{"ast":null,"code":"import { set, updateAll } from 'shades';\nexport default {\n  name: 'collections',\n  getReducer: () => {\n    const initialData = {\n      active: null,\n      loading: false,\n      data: null\n    };\n    return (state = initialData, {\n      type,\n      payload,\n      err\n    }) => {\n      if (type.startsWith('COLLECTIONS') && type.endsWith('_START')) {\n        return set('loading')(true)(state);\n      }\n\n      if (type === 'COLLECTIONS_RESET') {\n        return initialData;\n      }\n\n      if (type === 'COLLECTIONS_FETCH_SUCCESS') {\n        return updateAll(set('data')(payload.results), set('loading')(false))(state);\n      }\n\n      if (type === 'COLLECTIONS_FETCH_FAILED') {\n        return updateAll(set('data')(null), set('loading')(false))(state);\n      }\n\n      return state;\n    };\n  },\n  doCollectionsFetch: threadId => {\n    return async ({\n      apiGet,\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_FETCH_START'\n      });\n      const {\n        client\n      } = store.select(['selectAuthClient']);\n      return await client.listCollections(threadId).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsFetchActive: (threadId, name) => {\n    return async ({\n      apiGet,\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_FETCH_ACTIVE_START'\n      });\n      const {\n        client\n      } = store.select(['selectAuthClient']);\n      return await client.getCollectionInfo(threadId, name).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_ACTIVE_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_ACTIVE_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsFetchData: (threadId, name) => {\n    return async ({\n      apiGet,\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_FETCH_ACTIVE_START'\n      });\n      const {\n        client\n      } = store.select(['selectAuthClient']);\n      return await client.find(threadId, name, {}).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_ACTIVE_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_ACTIVE_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsCreate: name => {\n    return async ({\n      dispatch,\n      apiPost,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_ADD_START'\n      });\n      const {\n        client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadId\n      } = store.select(['selectThreadsActive']);\n      await client.newCollection(threadId, name, schema);\n      return await client.create(threadId, name, data).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsUpdate: (name, data) => {\n    return async ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_UPDATE_START'\n      });\n      const {\n        client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadId\n      } = store.select(['selectThreadsActive']);\n      return await client.save(threadId, name, data).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_UPDATE_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_UPDATE_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsAddRow: (name, emptyRowObject) => {\n    return async ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_UPDATE_START'\n      });\n      const {\n        client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadId\n      } = store.select(['selectThreadsActive']);\n      return await client.create(threadId, name, [emptyRowObject]).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_UPDATE_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_UPDATE_FAILED',\n          err\n        });\n      });\n    };\n  },\n  selectCollectionsLoading: state => state.collections.loading,\n  selectCollectionsData: state => state.collections.data,\n  selectCollectionsActive: state => state.collections.active\n};","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/dobby/src/bundles/collections.js"],"names":["set","updateAll","name","getReducer","initialData","active","loading","data","state","type","payload","err","startsWith","endsWith","results","doCollectionsFetch","threadId","apiGet","dispatch","store","client","select","listCollections","then","catch","doCollectionsFetchActive","getCollectionInfo","doCollectionsFetchData","find","doCollectionsCreate","apiPost","newCollection","schema","create","doCollectionsUpdate","save","doCollectionsAddRow","emptyRowObject","selectCollectionsLoading","collections","selectCollectionsData","selectCollectionsActive"],"mappings":"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","sourcesContent":["import { set, updateAll } from 'shades'\n\nexport default {\n  name: 'collections',\n  getReducer: () => {\n    const initialData = {\n      active: null,\n      loading: false,\n      data: null\n    }\n    return (state = initialData, { type, payload, err }) => {\n      if (type.startsWith('COLLECTIONS') && type.endsWith('_START')) {\n        return set('loading')(true)(state)\n      }\n\n      if (type === 'COLLECTIONS_RESET') {\n        return initialData\n      }\n\n      if (type === 'COLLECTIONS_FETCH_SUCCESS') {\n        return updateAll(\n          set('data')(payload.results),\n          set('loading')(false)\n        )(state)\n      }\n\n      if (type === 'COLLECTIONS_FETCH_FAILED') {\n        return updateAll(\n          set('data')(null),\n          set('loading')(false)\n        )(state)\n      }\n\n      return state\n    }\n  },\n  doCollectionsFetch: (threadId) => {\n    return async ({ apiGet, dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_FETCH_START' })\n      const { client } = store.select(['selectAuthClient'])\n      return await client.listCollections(threadId).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_FAILED', err })\n      })\n    }\n  },\n  doCollectionsFetchActive: (threadId, name) => {\n    return async ({ apiGet, dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_START' })\n      const { client } = store.select(['selectAuthClient'])\n      return await client.getCollectionInfo(threadId, name).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_FAILED', err })\n      })\n    }\n  },\n  doCollectionsFetchData: (threadId, name) => {\n    return async ({ apiGet, dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_START' })\n      const { client } = store.select(['selectAuthClient'])\n      return await client.find(threadId, name, {}).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_FAILED', err })\n      })\n    }\n  },\n  doCollectionsCreate: (name) => {\n    return async ({ dispatch, apiPost, store }) => {\n      dispatch({ type: 'COLLECTIONS_ADD_START' })\n      const { client } = store.select(['selectAuthClient'])\n      const { threadId } = store.select(['selectThreadsActive'])\n      await client.newCollection(threadId, name, schema)\n      return await client.create(threadId, name, data).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_FAILED', err })\n      })\n    }\n  },\n  doCollectionsUpdate: (name, data) => {\n    return async ({ dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_UPDATE_START' })\n      const { client } = store.select(['selectAuthClient'])\n      const { threadId } = store.select(['selectThreadsActive'])\n      return await client.save(threadId, name, data).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_UPDATE_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_UPDATE_FAILED', err })\n      })\n    }\n  },\n  doCollectionsAddRow: (name, emptyRowObject) => {\n    return async ({ dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_UPDATE_START' })\n      const { client } = store.select(['selectAuthClient'])\n      const { threadId } = store.select(['selectThreadsActive'])\n      return await client.create(threadId, name, [emptyRowObject]).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_UPDATE_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_UPDATE_FAILED', err })\n      })\n    }\n  },\n  selectCollectionsLoading: state => state.collections.loading,\n  selectCollectionsData: state => state.collections.data,\n  selectCollectionsActive: state => state.collections.active,\n}\n"]},"metadata":{},"sourceType":"module"}