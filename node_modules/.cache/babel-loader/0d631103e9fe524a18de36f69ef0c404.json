{"ast":null,"code":"import { set, updateAll } from 'shades';\nexport default {\n  name: 'databases',\n  getReducer: () => {\n    const initialData = {\n      loading: false,\n      data: null\n    };\n    return (state = initialData, {\n      type,\n      payload,\n      err\n    }) => {\n      if (type.startsWith('DATABASES') && type.endsWith('_START')) {\n        return set('loading')(true)(state);\n      }\n\n      if (type === 'DATABASES_RESET') {\n        return initialData;\n      }\n\n      if (type === 'DATABASES_FETCH_SUCCESS') {\n        return updateAll(set('data')(payload.results), set('loading')(false))(state);\n      }\n\n      if (type === 'DATABASES_FETCH_FAILED') {\n        return updateAll(set('data')(null), set('loading')(false))(state);\n      }\n\n      return state;\n    };\n  },\n  doDatabasesFetch: () => {\n    return ({\n      dispatch,\n      apiGet,\n      store\n    }) => {\n      dispatch({\n        type: 'DATABASES_FETCH_START'\n      });\n      return apiGet(`v1/skills/?${query}`).then(payload => {\n        return dispatch({\n          type: 'DATABASES_FETCH_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'DATABASES_FETCH_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doDatabasesCreate: () => {\n    return ({\n      dispatch,\n      apiPost,\n      store\n    }) => {\n      dispatch({\n        type: 'DATABASES_ADD_START'\n      });\n      return apiPost('v1/skills/', skill).then(payload => {\n        return dispatch({\n          type: 'DATABASES_ADD_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'DATABASES_ADD_FAILED',\n          err\n        });\n      });\n    };\n  },\n  selectDatabasesLoading: state => state.databases.loading,\n  selectDatabasesData: state => state.databases.data\n};","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/sushitable/src/bundles/databases.js"],"names":["set","updateAll","name","getReducer","initialData","loading","data","state","type","payload","err","startsWith","endsWith","results","doDatabasesFetch","dispatch","apiGet","store","query","then","catch","doDatabasesCreate","apiPost","skill","selectDatabasesLoading","databases","selectDatabasesData"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,QAA+B,QAA/B;AAEA,eAAe;AACbC,EAAAA,IAAI,EAAE,WADO;AAEbC,EAAAA,UAAU,EAAE,MAAM;AAChB,UAAMC,WAAW,GAAG;AAClBC,MAAAA,OAAO,EAAE,KADS;AAElBC,MAAAA,IAAI,EAAE;AAFY,KAApB;AAIA,WAAO,CAACC,KAAK,GAAGH,WAAT,EAAsB;AAAEI,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,KAAtB,KAAiD;AACtD,UAAIF,IAAI,CAACG,UAAL,CAAgB,WAAhB,KAAgCH,IAAI,CAACI,QAAL,CAAc,QAAd,CAApC,EAA6D;AAC3D,eAAOZ,GAAG,CAAC,SAAD,CAAH,CAAe,IAAf,EAAqBO,KAArB,CAAP;AACD;;AAED,UAAIC,IAAI,KAAK,iBAAb,EAAgC;AAC9B,eAAOJ,WAAP;AACD;;AAED,UAAII,IAAI,KAAK,yBAAb,EAAwC;AACtC,eAAOP,SAAS,CACdD,GAAG,CAAC,MAAD,CAAH,CAAYS,OAAO,CAACI,OAApB,CADc,EAEdb,GAAG,CAAC,SAAD,CAAH,CAAe,KAAf,CAFc,CAAT,CAGLO,KAHK,CAAP;AAID;;AAED,UAAIC,IAAI,KAAK,wBAAb,EAAuC;AACrC,eAAOP,SAAS,CACdD,GAAG,CAAC,MAAD,CAAH,CAAY,IAAZ,CADc,EAEdA,GAAG,CAAC,SAAD,CAAH,CAAe,KAAf,CAFc,CAAT,CAGLO,KAHK,CAAP;AAID;;AAED,aAAOA,KAAP;AACD,KAxBD;AAyBD,GAhCY;AAiCbO,EAAAA,gBAAgB,EAAE,MAAM;AACtB,WAAO,CAAC;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,MAAZ;AAAoBC,MAAAA;AAApB,KAAD,KAAiC;AACtCF,MAAAA,QAAQ,CAAC;AAAEP,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACA,aAAOQ,MAAM,CAAE,cAAaE,KAAM,EAArB,CAAN,CAA8BC,IAA9B,CAAoCV,OAAD,IAAa;AACrD,eAAOM,QAAQ,CAAC;AAAEP,UAAAA,IAAI,EAAE,yBAAR;AAAmCC,UAAAA;AAAnC,SAAD,CAAf;AACD,OAFM,EAEJW,KAFI,CAEGV,GAAD,IAAS;AAChB,eAAOK,QAAQ,CAAC;AAAEP,UAAAA,IAAI,EAAE,wBAAR;AAAkCE,UAAAA;AAAlC,SAAD,CAAf;AACD,OAJM,CAAP;AAKD,KAPD;AAQD,GA1CY;AA2CbW,EAAAA,iBAAiB,EAAE,MAAM;AACvB,WAAO,CAAC;AAAEN,MAAAA,QAAF;AAAYO,MAAAA,OAAZ;AAAqBL,MAAAA;AAArB,KAAD,KAAkC;AACvCF,MAAAA,QAAQ,CAAC;AAAEP,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACA,aAAOc,OAAO,CAAC,YAAD,EAAeC,KAAf,CAAP,CAA6BJ,IAA7B,CAAmCV,OAAD,IAAa;AACpD,eAAOM,QAAQ,CAAC;AAAEP,UAAAA,IAAI,EAAE,uBAAR;AAAiCC,UAAAA;AAAjC,SAAD,CAAf;AACD,OAFM,EAEJW,KAFI,CAEGV,GAAD,IAAS;AAChB,eAAOK,QAAQ,CAAC;AAAEP,UAAAA,IAAI,EAAE,sBAAR;AAAgCE,UAAAA;AAAhC,SAAD,CAAf;AACD,OAJM,CAAP;AAKD,KAPD;AAQD,GApDY;AAqDbc,EAAAA,sBAAsB,EAAEjB,KAAK,IAAIA,KAAK,CAACkB,SAAN,CAAgBpB,OArDpC;AAsDbqB,EAAAA,mBAAmB,EAAEnB,KAAK,IAAIA,KAAK,CAACkB,SAAN,CAAgBnB;AAtDjC,CAAf","sourcesContent":["import { set, updateAll } from 'shades'\n\nexport default {\n  name: 'databases',\n  getReducer: () => {\n    const initialData = {\n      loading: false,\n      data: null\n    }\n    return (state = initialData, { type, payload, err }) => {\n      if (type.startsWith('DATABASES') && type.endsWith('_START')) {\n        return set('loading')(true)(state)\n      }\n\n      if (type === 'DATABASES_RESET') {\n        return initialData\n      }\n\n      if (type === 'DATABASES_FETCH_SUCCESS') {\n        return updateAll(\n          set('data')(payload.results),\n          set('loading')(false)\n        )(state)\n      }\n\n      if (type === 'DATABASES_FETCH_FAILED') {\n        return updateAll(\n          set('data')(null),\n          set('loading')(false)\n        )(state)\n      }\n\n      return state\n    }\n  },\n  doDatabasesFetch: () => {\n    return ({ dispatch, apiGet, store }) => {\n      dispatch({ type: 'DATABASES_FETCH_START' })\n      return apiGet(`v1/skills/?${query}`).then((payload) => {\n        return dispatch({ type: 'DATABASES_FETCH_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'DATABASES_FETCH_FAILED', err })\n      })\n    }\n  },\n  doDatabasesCreate: () => {\n    return ({ dispatch, apiPost, store }) => {\n      dispatch({ type: 'DATABASES_ADD_START' })\n      return apiPost('v1/skills/', skill).then((payload) => {\n        return dispatch({ type: 'DATABASES_ADD_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'DATABASES_ADD_FAILED', err })\n      })\n    }\n  },\n  selectDatabasesLoading: state => state.databases.loading,\n  selectDatabasesData: state => state.databases.data,\n}\n"]},"metadata":{},"sourceType":"module"}