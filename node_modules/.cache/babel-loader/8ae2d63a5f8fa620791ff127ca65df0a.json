{"ast":null,"code":"// package: net.rpc\n// file: net/rpc/rpc.proto\nvar net_rpc_rpc_pb = require(\"../../net/rpc/rpc_pb\");\n\nvar grpc = require(\"@improbable-eng/grpc-web\").grpc;\n\nvar RPCService = function () {\n  function RPCService() {}\n\n  RPCService.serviceName = \"net.rpc.RPCService\";\n  return RPCService;\n}();\n\nRPCService.ListenAddr = {\n  methodName: \"ListenAddr\",\n  service: RPCService,\n  requestStream: false,\n  responseStream: false,\n  requestType: net_rpc_rpc_pb.ListenAddrRequest,\n  responseType: net_rpc_rpc_pb.ListenAddrResponse\n};\nRPCService.Peers = {\n  methodName: \"Peers\",\n  service: RPCService,\n  requestStream: false,\n  responseStream: false,\n  requestType: net_rpc_rpc_pb.PeersRequest,\n  responseType: net_rpc_rpc_pb.PeersResponse\n};\nRPCService.FindPeer = {\n  methodName: \"FindPeer\",\n  service: RPCService,\n  requestStream: false,\n  responseStream: false,\n  requestType: net_rpc_rpc_pb.FindPeerRequest,\n  responseType: net_rpc_rpc_pb.FindPeerResponse\n};\nRPCService.ConnectPeer = {\n  methodName: \"ConnectPeer\",\n  service: RPCService,\n  requestStream: false,\n  responseStream: false,\n  requestType: net_rpc_rpc_pb.ConnectPeerRequest,\n  responseType: net_rpc_rpc_pb.ConnectPeerResponse\n};\nRPCService.DisconnectPeer = {\n  methodName: \"DisconnectPeer\",\n  service: RPCService,\n  requestStream: false,\n  responseStream: false,\n  requestType: net_rpc_rpc_pb.DisconnectPeerRequest,\n  responseType: net_rpc_rpc_pb.DisconnectPeerResponse\n};\nRPCService.Connectedness = {\n  methodName: \"Connectedness\",\n  service: RPCService,\n  requestStream: false,\n  responseStream: false,\n  requestType: net_rpc_rpc_pb.ConnectednessRequest,\n  responseType: net_rpc_rpc_pb.ConnectednessResponse\n};\nexports.RPCService = RPCService;\n\nfunction RPCServiceClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\n\nRPCServiceClient.prototype.listenAddr = function listenAddr(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(RPCService.ListenAddr, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nRPCServiceClient.prototype.peers = function peers(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(RPCService.Peers, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nRPCServiceClient.prototype.findPeer = function findPeer(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(RPCService.FindPeer, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nRPCServiceClient.prototype.connectPeer = function connectPeer(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(RPCService.ConnectPeer, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nRPCServiceClient.prototype.disconnectPeer = function disconnectPeer(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(RPCService.DisconnectPeer, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nRPCServiceClient.prototype.connectedness = function connectedness(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(RPCService.Connectedness, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nexports.RPCServiceClient = RPCServiceClient;","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/js-examples/bucket-photo-gallery/node_modules/@textile/grpc-powergate-client/dist/net/rpc/rpc_pb_service.js"],"names":["net_rpc_rpc_pb","require","grpc","RPCService","serviceName","ListenAddr","methodName","service","requestStream","responseStream","requestType","ListenAddrRequest","responseType","ListenAddrResponse","Peers","PeersRequest","PeersResponse","FindPeer","FindPeerRequest","FindPeerResponse","ConnectPeer","ConnectPeerRequest","ConnectPeerResponse","DisconnectPeer","DisconnectPeerRequest","DisconnectPeerResponse","Connectedness","ConnectednessRequest","ConnectednessResponse","exports","RPCServiceClient","serviceHost","options","prototype","listenAddr","requestMessage","metadata","callback","arguments","length","client","unary","request","host","transport","debug","onEnd","response","status","Code","OK","err","Error","statusMessage","code","trailers","message","cancel","close","peers","findPeer","connectPeer","disconnectPeer","connectedness"],"mappings":"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","sourcesContent":["// package: net.rpc\n// file: net/rpc/rpc.proto\n\nvar net_rpc_rpc_pb = require(\"../../net/rpc/rpc_pb\");\nvar grpc = require(\"@improbable-eng/grpc-web\").grpc;\n\nvar RPCService = (function () {\n  function RPCService() {}\n  RPCService.serviceName = \"net.rpc.RPCService\";\n  return RPCService;\n}());\n\nRPCService.ListenAddr = {\n  methodName: \"ListenAddr\",\n  service: RPCService,\n  requestStream: false,\n  responseStream: false,\n  requestType: net_rpc_rpc_pb.ListenAddrRequest,\n  responseType: net_rpc_rpc_pb.ListenAddrResponse\n};\n\nRPCService.Peers = {\n  methodName: \"Peers\",\n  service: RPCService,\n  requestStream: false,\n  responseStream: false,\n  requestType: net_rpc_rpc_pb.PeersRequest,\n  responseType: net_rpc_rpc_pb.PeersResponse\n};\n\nRPCService.FindPeer = {\n  methodName: \"FindPeer\",\n  service: RPCService,\n  requestStream: false,\n  responseStream: false,\n  requestType: net_rpc_rpc_pb.FindPeerRequest,\n  responseType: net_rpc_rpc_pb.FindPeerResponse\n};\n\nRPCService.ConnectPeer = {\n  methodName: \"ConnectPeer\",\n  service: RPCService,\n  requestStream: false,\n  responseStream: false,\n  requestType: net_rpc_rpc_pb.ConnectPeerRequest,\n  responseType: net_rpc_rpc_pb.ConnectPeerResponse\n};\n\nRPCService.DisconnectPeer = {\n  methodName: \"DisconnectPeer\",\n  service: RPCService,\n  requestStream: false,\n  responseStream: false,\n  requestType: net_rpc_rpc_pb.DisconnectPeerRequest,\n  responseType: net_rpc_rpc_pb.DisconnectPeerResponse\n};\n\nRPCService.Connectedness = {\n  methodName: \"Connectedness\",\n  service: RPCService,\n  requestStream: false,\n  responseStream: false,\n  requestType: net_rpc_rpc_pb.ConnectednessRequest,\n  responseType: net_rpc_rpc_pb.ConnectednessResponse\n};\n\nexports.RPCService = RPCService;\n\nfunction RPCServiceClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\n\nRPCServiceClient.prototype.listenAddr = function listenAddr(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(RPCService.ListenAddr, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nRPCServiceClient.prototype.peers = function peers(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(RPCService.Peers, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nRPCServiceClient.prototype.findPeer = function findPeer(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(RPCService.FindPeer, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nRPCServiceClient.prototype.connectPeer = function connectPeer(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(RPCService.ConnectPeer, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nRPCServiceClient.prototype.disconnectPeer = function disconnectPeer(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(RPCService.DisconnectPeer, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nRPCServiceClient.prototype.connectedness = function connectedness(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(RPCService.Connectedness, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nexports.RPCServiceClient = RPCServiceClient;\n\n"]},"metadata":{},"sourceType":"script"}