{"ast":null,"code":"var _jsxFileName = \"/Users/nassarhayat/apps/textiletable/dobby/src/components/ThreadScreen.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'redux-bundler-react';\nimport { ThreadID } from '@textile/hub';\nimport BaseScreen from './BaseScreen';\nimport { Button } from 'semantic-ui-react';\nimport Table from '../table/Table';\n\nconst ThreadScreen = ({\n  threadsActive\n}) => {\n  const [name, setName] = useState('');\n  useEffect(() => {\n    const setup = async () => {\n      setName(threadsActive[0].name); // const threadId = await client.newDB()\n\n      const threadId = ThreadID.fromString('bafkypcdo2yzg7ydabdfp5op364htx6oratoobmivkkql6z3ii4lqkry');\n      setThreadId(threadId);\n    };\n\n    setup();\n  }, []);\n\n  const selectExisting = name => {\n    setName(name);\n  };\n\n  return /*#__PURE__*/React.createElement(BaseScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"optionsRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, threadsActive && threadsActive.map((collection, index) => /*#__PURE__*/React.createElement(Button, {\n    key: index,\n    className: \"tableButton\",\n    onClick: () => selectExisting(collection.name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, collection.name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"nameInput\",\n    placeholder: \"table name\",\n    type: \"text\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"ui primary button\",\n    onClick: () => console.log('a'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, \"Create\"))), threadId && client && /*#__PURE__*/React.createElement(Table, {\n    threadId: threadId,\n    client: client,\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default connect('selectThreadsActive', ThreadScreen);","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/dobby/src/components/ThreadScreen.tsx"],"names":["React","useState","useEffect","connect","ThreadID","BaseScreen","Button","Table","ThreadScreen","threadsActive","name","setName","setup","threadId","fromString","setThreadId","selectExisting","map","collection","index","e","target","value","console","log","client"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAMA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuC;AAC1D,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAS,EAAT,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,KAAK,GAAG,YAAY;AACxBD,MAAAA,OAAO,CAACF,aAAa,CAAC,CAAD,CAAb,CAAiBC,IAAlB,CAAP,CADwB,CAExB;;AACA,YAAMG,QAAQ,GAAGT,QAAQ,CAACU,UAAT,CAAoB,0DAApB,CAAjB;AACAC,MAAAA,WAAW,CAACF,QAAD,CAAX;AACD,KALD;;AAMAD,IAAAA,KAAK;AACN,GARQ,EAQN,EARM,CAAT;;AAUA,QAAMI,cAAc,GAAIN,IAAD,IAAkB;AACvCC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACD,GAFD;;AAGA,sBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,aAAa,IAAIA,aAAa,CAACQ,GAAd,CAAkB,CAACC,UAAD,EAAaC,KAAb,kBAClC,oBAAC,MAAD;AACE,IAAA,GAAG,EAAEA,KADP;AAEE,IAAA,SAAS,EAAC,aAFZ;AAGE,IAAA,OAAO,EAAE,MAAMH,cAAc,CAACE,UAAU,CAACR,IAAZ,CAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGQ,UAAU,CAACR,IALd,CADgB,CADpB,eAUE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,SAAS,EAAC,WAAjB;AAA6B,IAAA,WAAW,EAAC,YAAzC;AAAsD,IAAA,IAAI,EAAC,MAA3D;AAAkE,IAAA,KAAK,EAAEA,IAAzE;AAA+E,IAAA,QAAQ,EAAEU,CAAC,IAAIT,OAAO,CAACS,CAAC,CAACC,MAAF,CAASC,KAAV,CAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,mBAAlB;AAAsC,IAAA,OAAO,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAY,GAAZ,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAVF,CADF,EAgBGX,QAAQ,IAAIY,MAAZ,iBACC,oBAAC,KAAD;AAAO,IAAA,QAAQ,EAAEZ,QAAjB;AAA2B,IAAA,MAAM,EAAEY,MAAnC;AAA2C,IAAA,IAAI,EAAEf,IAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBJ,CADF;AAsBD,CAtCD;;AAwCA,eAAeP,OAAO,CACpB,qBADoB,EAEpBK,YAFoB,CAAtB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { connect } from 'redux-bundler-react'\nimport { ThreadID } from '@textile/hub'\nimport BaseScreen from './BaseScreen'\nimport { Button } from 'semantic-ui-react'\nimport Table from '../table/Table'\n\ninterface IThreadsScreen {\n  threadsActive: any\n}\n\nconst ThreadScreen = ({ threadsActive }: IThreadsScreen) => {\n  const [name, setName] = useState<string>('')\n\n  useEffect(() => {\n    const setup = async () => {\n      setName(threadsActive[0].name)\n      // const threadId = await client.newDB()\n      const threadId = ThreadID.fromString('bafkypcdo2yzg7ydabdfp5op364htx6oratoobmivkkql6z3ii4lqkry')\n      setThreadId(threadId)\n    }\n    setup()\n  }, [])\n\n  const selectExisting = (name: string) => {\n    setName(name)\n  }\n  return (\n    <BaseScreen>\n      <div className='optionsRow'>\n        {threadsActive && threadsActive.map((collection, index) => (\n          <Button\n            key={index}\n            className='tableButton'\n            onClick={() => selectExisting(collection.name)}\n          >\n            {collection.name}\n          </Button>\n        ))}\n        <div className=\"inputContainer\">\n          <input className='nameInput' placeholder='table name' type='text' value={name} onChange={e => setName(e.target.value)}/>\n          <Button className='ui primary button' onClick={() => console.log('a')}>Create</Button>\n        </div>\n      </div>\n      {threadId && client && (\n        <Table threadId={threadId} client={client} name={name}/>\n      )}\n    </BaseScreen>\n  )\n}\n\nexport default connect(\n  'selectThreadsActive',\n  ThreadScreen\n)\n"]},"metadata":{},"sourceType":"module"}