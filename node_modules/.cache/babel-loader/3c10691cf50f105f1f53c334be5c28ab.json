{"ast":null,"code":"var _jsxFileName = \"/Users/nassarhayat/apps/textiletable/sushitable/src/components/App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { PrivateKey, Client, ThreadID } from '@textile/hub';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport Table from './Table';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nconst App = () => {\n  const [client, setClient] = useState();\n  const [threadId, setThreadId] = useState();\n  const [name, setName] = useState('');\n  const [collections, setCollections] = useState();\n  useEffect(() => {\n    const setup = async () => {\n      const keyInfo = {\n        key: 'bs3g66aciasarrm46kosxap74te'\n      };\n      const newIdentity = await getIdentity();\n      const client = await Client.withKeyInfo(keyInfo);\n      await client.getToken(newIdentity);\n      setClient(client); // console.log('LLL', await client.listThreads())\n\n      const collections = await client.listCollections(ThreadID.fromString('bafkypcdo2yzg7ydabdfp5op364htx6oratoobmivkkql6z3ii4lqkry'));\n      setCollections(collections);\n      setName(collections[0].name); // const threadId = await client.newDB()\n\n      const threadId = ThreadID.fromString('bafkypcdo2yzg7ydabdfp5op364htx6oratoobmivkkql6z3ii4lqkry');\n      setThreadId(threadId);\n    };\n\n    setup();\n  }, []);\n\n  const getIdentity = async () => {\n    try {\n      var storedIdent = localStorage.getItem('identity');\n\n      if (storedIdent === null) {\n        throw new Error('No identity');\n      }\n\n      const restored = PrivateKey.fromString(storedIdent);\n      return restored;\n    } catch (e) {\n      try {\n        const identity = PrivateKey.fromRandom();\n        const identityString = identity.toString();\n        localStorage.setItem('identity', identityString);\n        return identity;\n      } catch (err) {\n        return err.message;\n      }\n    }\n  };\n\n  const selectExisting = name => {\n    setName(name);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Segment.Group, {\n    style: {\n      height: '100%',\n      border: 0,\n      boxShadow: '0px 0px 0px',\n      borderRadius: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Segment, {\n    clearing: true,\n    className: \"nav\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    className: \"avatar\",\n    as: \"h2\",\n    floated: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"avatar\",\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, \"|\", /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-label\": \"4.0 stars out of 5, 123 ratings\",\n    role: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 16\n    }\n  }, \"\\uD83C\\uDF63\"), \"|\", /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-label\": \"4.0 stars out of 5, 123 ratings\",\n    role: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }\n  }, \"\\uD83C\\uDF63\"), \"|\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"optionsRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, collections && collections.map((collection, index) => /*#__PURE__*/React.createElement(Button, {\n    key: index,\n    className: \"tableButton\",\n    onClick: () => selectExisting(collection.name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, collection.name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"nameInput\",\n    placeholder: \"table name\",\n    type: \"text\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"ui primary button\",\n    onClick: () => console.log('a'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"Create\"))), threadId && client && /*#__PURE__*/React.createElement(Table, {\n    threadId: threadId,\n    client: client,\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/sushitable/src/components/App.tsx"],"names":["React","useState","useEffect","PrivateKey","Client","ThreadID","Button","Header","Segment","Table","App","client","setClient","threadId","setThreadId","name","setName","collections","setCollections","setup","keyInfo","key","newIdentity","getIdentity","withKeyInfo","getToken","listCollections","fromString","storedIdent","localStorage","getItem","Error","restored","e","identity","fromRandom","identityString","toString","setItem","err","message","selectExisting","height","border","boxShadow","borderRadius","map","collection","index","target","value","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { PrivateKey, Client, ThreadID } from '@textile/hub'\nimport { Button, Header, Segment } from 'semantic-ui-react'\n\nimport Table from './Table'\n\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css'\n\nconst App = () => {\n  const [client, setClient] = useState<Client>()\n  const [threadId, setThreadId] = useState<ThreadID>()\n  const [name, setName] = useState<string>('')\n  const [collections, setCollections] = useState<Array<any>>()\n\n  useEffect(() => {\n    const setup = async () => {\n      const keyInfo = { key: 'bs3g66aciasarrm46kosxap74te' }\n      const newIdentity = await getIdentity()\n\n      const client = await Client.withKeyInfo(keyInfo)\n      await client.getToken(newIdentity)\n      setClient(client)\n      // console.log('LLL', await client.listThreads())\n      const collections = await client.listCollections(ThreadID.fromString('bafkypcdo2yzg7ydabdfp5op364htx6oratoobmivkkql6z3ii4lqkry'))\n      setCollections(collections)\n      setName(collections[0].name)\n      // const threadId = await client.newDB()\n      const threadId = ThreadID.fromString('bafkypcdo2yzg7ydabdfp5op364htx6oratoobmivkkql6z3ii4lqkry')\n      setThreadId(threadId)\n    }\n    setup()\n  }, [])\n\n\n  const getIdentity = async (): Promise<PrivateKey> => {\n    try {\n      var storedIdent = localStorage.getItem('identity')\n      if (storedIdent === null) {\n        throw new Error('No identity')\n      }\n      const restored = PrivateKey.fromString(storedIdent)\n      return restored\n    }\n    catch (e) {\n      try {\n        const identity = PrivateKey.fromRandom()\n        const identityString = identity.toString()\n        localStorage.setItem('identity', identityString)\n        return identity\n      } catch (err) {\n        return err.message\n      }\n    }\n  }\n\n  const selectExisting = (name: string) => {\n    setName(name)\n  }\n\n  return (\n    <div className='App'>\n      <Segment.Group style={{ height: '100%', border: 0, boxShadow: '0px 0px 0px', borderRadius: 0 }}>\n        <Segment clearing className='nav'>\n          <Header className='avatar' as='h2' floated='left'>\n            <a className='avatar' href='/'>\n              |<span aria-label='4.0 stars out of 5, 123 ratings' role='img'>🍣</span>\n              |<span aria-label='4.0 stars out of 5, 123 ratings' role='img'>🍣</span>|\n            </a>\n          </Header>\n        </Segment>\n        <div className='optionsRow'>\n          {collections && collections.map((collection, index) => (\n            <Button\n              key={index}\n              className='tableButton'\n              onClick={() => selectExisting(collection.name)}\n            >\n              {collection.name}\n            </Button>\n          ))}\n          <div className=\"inputContainer\">\n            <input className='nameInput' placeholder='table name' type='text' value={name} onChange={e => setName(e.target.value)}/>\n            <Button className='ui primary button' onClick={() => console.log('a')}>Create</Button>\n          </div>\n        </div>\n        {threadId && client && (\n          <Table threadId={threadId} client={client} name={name}/>\n        )}\n      </Segment.Group>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}