{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ThreadKey = exports.keyToString = exports.keyFromString = exports.invalidKeyError = void 0;\n\nconst threads_crypto_1 = require(\"@textile/threads-crypto\");\n\nconst multibase_1 = __importDefault(require(\"multibase\"));\n\nexports.invalidKeyError = new Error(\"Invalid key\"); // KeyBytes is the length of GCM key.\n\nconst keyBytes = 32;\n/**\n * keyFromString returns a key by decoding a base32-encoded string.\n * @param k Input base32-encoded string.\n */\n\nexports.keyFromString = k => {\n  return multibase_1.default.decode(k);\n};\n/**\n * String returns the base32-encoded string representation of raw key bytes.\n * @param k Input key buffer.\n */\n\n\nexports.keyToString = k => {\n  return multibase_1.default.encode(\"base32\", k).toString();\n};\n/**\n * Key is a thread encryption key with two components.\n * @param sk Network key is used to encrypt outer log record linkages.\n * @param rk Read key is used to encrypt inner record events.\n */\n\n\nclass ThreadKey {\n  constructor(service, read) {\n    this.service = service;\n    this.read = read;\n  }\n  /**\n   * Create a new set of keys.\n   * @param withRead Whether to also include a random read key.\n   */\n\n\n  static fromRandom(withRead = true) {\n    return new ThreadKey(threads_crypto_1.randomBytes(keyBytes), withRead ? threads_crypto_1.randomBytes(keyBytes) : undefined);\n  }\n  /**\n   * Create Key from bytes.\n   * @param bytes Input bytes of (possibly both) key(s).\n   */\n\n\n  static fromBytes(bytes) {\n    if (bytes.byteLength !== keyBytes && bytes.byteLength !== keyBytes * 2) {\n      throw exports.invalidKeyError;\n    }\n\n    const sk = bytes.slice(0, keyBytes);\n    let rk;\n\n    if (bytes.byteLength === keyBytes * 2) {\n      rk = bytes.slice(keyBytes);\n    }\n\n    return new ThreadKey(sk, rk);\n  }\n  /**\n   * Create Key by decoding a base32-encoded string.\n   * @param s The base32-encoded string.\n   */\n\n\n  static fromString(s) {\n    const data = multibase_1.default.decode(s);\n    return this.fromBytes(data);\n  }\n\n  isDefined() {\n    return this.service !== undefined;\n  }\n\n  canRead() {\n    return this.read !== undefined;\n  }\n\n  toBytes() {\n    var _a;\n\n    if (this.read !== undefined) {\n      const full = new Uint8Array(this.service.byteLength + ((_a = this.read.byteLength) !== null && _a !== void 0 ? _a : 0));\n      full.set(this.service);\n      this.read && full.set(this.read, this.service.byteLength);\n      return full;\n    }\n\n    return this.service;\n  }\n  /**\n   * Return the base32-encoded string representation of raw key bytes.\n   * For example:\n   * Full: \"brv7t5l2h55uklz5qwpntcat26csaasfchzof3emmdy6povabcd3a2to2qdkqdkto2prfhizerqqudqsdvwherbiy4nazqxjejgdr4oy\"\n   * Network: \"bp2vvqody5zm6yqycsnazb4kpqvycbdosos352zvpsorxce5koh7q\"\n   */\n\n\n  toString() {\n    return multibase_1.default.encode(\"base32\", this.toBytes()).toString();\n  }\n\n}\n\nexports.ThreadKey = ThreadKey;","map":{"version":3,"sources":["../../src/thread/key.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,gBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,eAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAEa,OAAA,CAAA,eAAA,GAAkB,IAAI,KAAJ,CAAU,aAAV,CAAlB,C,CAEb;;AACA,MAAM,QAAQ,GAAG,EAAjB;AAEA;;;;;AAIa,OAAA,CAAA,aAAA,GAAiB,CAAD,IAAsB;AACjD,SAAO,WAAA,CAAA,OAAA,CAAU,MAAV,CAAiB,CAAjB,CAAP;AACD,CAFY;AAIb;;;;;;AAIa,OAAA,CAAA,WAAA,GAAe,CAAD,IAA0B;AACnD,SAAO,WAAA,CAAA,OAAA,CAAU,MAAV,CAAiB,QAAjB,EAA2B,CAA3B,EAAwC,QAAxC,EAAP;AACD,CAFY;AAIb;;;;;;;AAKA,MAAa,SAAb,CAAsB;AACpB,EAAA,WAAA,CAAqB,OAArB,EAAmD,IAAnD,EAAoE;AAA/C,SAAA,OAAA,GAAA,OAAA;AAA8B,SAAA,IAAA,GAAA,IAAA;AAAqB;AACxE;;;;;;AAIA,SAAO,UAAP,CAAkB,QAAQ,GAAG,IAA7B,EAAiC;AAC/B,WAAO,IAAI,SAAJ,CACL,gBAAA,CAAA,WAAA,CAAY,QAAZ,CADK,EAEL,QAAQ,GAAG,gBAAA,CAAA,WAAA,CAAY,QAAZ,CAAH,GAA2B,SAF9B,CAAP;AAID;AAED;;;;;;AAIA,SAAO,SAAP,CAAiB,KAAjB,EAAkC;AAChC,QAAI,KAAK,CAAC,UAAN,KAAqB,QAArB,IAAiC,KAAK,CAAC,UAAN,KAAqB,QAAQ,GAAG,CAArE,EAAwE;AACtE,YAAM,OAAA,CAAA,eAAN;AACD;;AACD,UAAM,EAAE,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,QAAf,CAAX;AACA,QAAI,EAAJ;;AACA,QAAI,KAAK,CAAC,UAAN,KAAqB,QAAQ,GAAG,CAApC,EAAuC;AACrC,MAAA,EAAE,GAAG,KAAK,CAAC,KAAN,CAAY,QAAZ,CAAL;AACD;;AACD,WAAO,IAAI,SAAJ,CAAc,EAAd,EAAkB,EAAlB,CAAP;AACD;AAED;;;;;;AAIA,SAAO,UAAP,CAAkB,CAAlB,EAA2B;AACzB,UAAM,IAAI,GAAG,WAAA,CAAA,OAAA,CAAU,MAAV,CAAiB,CAAjB,CAAb;AACA,WAAO,KAAK,SAAL,CAAe,IAAf,CAAP;AACD;;AAED,EAAA,SAAS,GAAA;AACP,WAAO,KAAK,OAAL,KAAiB,SAAxB;AACD;;AAED,EAAA,OAAO,GAAA;AACL,WAAO,KAAK,IAAL,KAAc,SAArB;AACD;;AAED,EAAA,OAAO,GAAA;;;AACL,QAAI,KAAK,IAAL,KAAc,SAAlB,EAA6B;AAC3B,YAAM,IAAI,GAAG,IAAI,UAAJ,CACX,KAAK,OAAL,CAAa,UAAb,IAA0B,CAAA,EAAA,GAAC,KAAK,IAAL,CAAU,UAAX,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,EAArB,GAAyB,CAAnD,CADW,CAAb;AAGA,MAAA,IAAI,CAAC,GAAL,CAAS,KAAK,OAAd;AACA,WAAK,IAAL,IAAa,IAAI,CAAC,GAAL,CAAS,KAAK,IAAd,EAAoB,KAAK,OAAL,CAAa,UAAjC,CAAb;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAK,OAAZ;AACD;AAED;;;;;;;;AAMA,EAAA,QAAQ,GAAA;AACN,WAAO,WAAA,CAAA,OAAA,CAAU,MAAV,CAAiB,QAAjB,EAA2B,KAAK,OAAL,EAA3B,EAAqD,QAArD,EAAP;AACD;;AAlEmB;;AAAtB,OAAA,CAAA,SAAA,GAAA,SAAA","sourcesContent":["import { randomBytes } from \"@textile/threads-crypto\"\nimport multibase from \"multibase\"\n\nexport const invalidKeyError = new Error(\"Invalid key\")\n\n// KeyBytes is the length of GCM key.\nconst keyBytes = 32\n\n/**\n * keyFromString returns a key by decoding a base32-encoded string.\n * @param k Input base32-encoded string.\n */\nexport const keyFromString = (k: string): Buffer => {\n  return multibase.decode(k)\n}\n\n/**\n * String returns the base32-encoded string representation of raw key bytes.\n * @param k Input key buffer.\n */\nexport const keyToString = (k: Uint8Array): string => {\n  return multibase.encode(\"base32\", k as Buffer).toString()\n}\n\n/**\n * Key is a thread encryption key with two components.\n * @param sk Network key is used to encrypt outer log record linkages.\n * @param rk Read key is used to encrypt inner record events.\n */\nexport class ThreadKey {\n  constructor(readonly service: Uint8Array, readonly read?: Uint8Array) {}\n  /**\n   * Create a new set of keys.\n   * @param withRead Whether to also include a random read key.\n   */\n  static fromRandom(withRead = true): ThreadKey {\n    return new ThreadKey(\n      randomBytes(keyBytes),\n      withRead ? randomBytes(keyBytes) : undefined\n    )\n  }\n\n  /**\n   * Create Key from bytes.\n   * @param bytes Input bytes of (possibly both) key(s).\n   */\n  static fromBytes(bytes: Uint8Array): ThreadKey {\n    if (bytes.byteLength !== keyBytes && bytes.byteLength !== keyBytes * 2) {\n      throw invalidKeyError\n    }\n    const sk = bytes.slice(0, keyBytes)\n    let rk: Uint8Array | undefined\n    if (bytes.byteLength === keyBytes * 2) {\n      rk = bytes.slice(keyBytes)\n    }\n    return new ThreadKey(sk, rk)\n  }\n\n  /**\n   * Create Key by decoding a base32-encoded string.\n   * @param s The base32-encoded string.\n   */\n  static fromString(s: string): ThreadKey {\n    const data = multibase.decode(s)\n    return this.fromBytes(data)\n  }\n\n  isDefined(): boolean {\n    return this.service !== undefined\n  }\n\n  canRead(): boolean {\n    return this.read !== undefined\n  }\n\n  toBytes(): Uint8Array {\n    if (this.read !== undefined) {\n      const full = new Uint8Array(\n        this.service.byteLength + (this.read.byteLength ?? 0)\n      )\n      full.set(this.service)\n      this.read && full.set(this.read, this.service.byteLength)\n      return full\n    }\n    return this.service\n  }\n\n  /**\n   * Return the base32-encoded string representation of raw key bytes.\n   * For example:\n   * Full: \"brv7t5l2h55uklz5qwpntcat26csaasfchzof3emmdy6povabcd3a2to2qdkqdkto2prfhizerqqudqsdvwherbiy4nazqxjejgdr4oy\"\n   * Network: \"bp2vvqody5zm6yqycsnazb4kpqvycbdosos352zvpsorxce5koh7q\"\n   */\n  toString(): string {\n    return multibase.encode(\"base32\", this.toBytes() as Buffer).toString()\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}