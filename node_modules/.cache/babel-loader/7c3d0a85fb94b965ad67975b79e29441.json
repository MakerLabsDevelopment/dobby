{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BucketsGrpcClient = exports.bucketsArchiveWatch = exports.bucketsArchiveInfo = exports.bucketsArchiveStatus = exports.bucketsArchive = exports.bucketsRemovePath = exports.bucketsRemove = exports.bucketsPullIpfsPath = exports.bucketsPullPath = exports.bucketsSetPath = exports.bucketsPushPath = exports.bucketsListIpfsPath = exports.bucketsListPath = exports.bucketsList = exports.bucketsLinks = exports.bucketsRoot = exports.bucketsCreate = exports.StatusCode = exports.PathAccessRole = void 0;\n\nconst grpc_web_1 = require(\"@improbable-eng/grpc-web\");\n\nconst buckets_pb_1 = require(\"@textile/buckets-grpc/buckets_pb\");\n\nconst buckets_pb_service_1 = require(\"@textile/buckets-grpc/buckets_pb_service\");\n\nconst context_1 = require(\"@textile/context\");\n\nconst grpc_transport_1 = require(\"@textile/grpc-transport\");\n\nconst cids_1 = __importDefault(require(\"cids\"));\n\nconst event_iterator_1 = require(\"event-iterator\");\n\nconst loglevel_1 = __importDefault(require(\"loglevel\"));\n\nconst next_tick_1 = __importDefault(require(\"next-tick\"));\n\nconst normalize_1 = require(\"./normalize\"); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nconst block = require('it-block');\n\nconst logger = loglevel_1.default.getLogger('buckets-api');\nvar PathAccessRole;\n\n(function (PathAccessRole) {\n  PathAccessRole[PathAccessRole[\"PATH_ACCESS_ROLE_UNSPECIFIED\"] = 0] = \"PATH_ACCESS_ROLE_UNSPECIFIED\";\n  PathAccessRole[PathAccessRole[\"PATH_ACCESS_ROLE_READER\"] = 1] = \"PATH_ACCESS_ROLE_READER\";\n  PathAccessRole[PathAccessRole[\"PATH_ACCESS_ROLE_WRITER\"] = 2] = \"PATH_ACCESS_ROLE_WRITER\";\n  PathAccessRole[PathAccessRole[\"PATH_ACCESS_ROLE_ADMIN\"] = 3] = \"PATH_ACCESS_ROLE_ADMIN\";\n})(PathAccessRole = exports.PathAccessRole || (exports.PathAccessRole = {}));\n/**\n * Archive status codes\n */\n\n\nvar StatusCode;\n\n(function (StatusCode) {\n  StatusCode[StatusCode[\"STATUS_UNSPECIFIED\"] = 0] = \"STATUS_UNSPECIFIED\";\n  StatusCode[StatusCode[\"STATUS_EXECUTING\"] = 1] = \"STATUS_EXECUTING\";\n  StatusCode[StatusCode[\"STATUS_FAILED\"] = 2] = \"STATUS_FAILED\";\n  StatusCode[StatusCode[\"STATUS_DONE\"] = 3] = \"STATUS_DONE\";\n  StatusCode[StatusCode[\"STATUS_CANCELED\"] = 4] = \"STATUS_CANCELED\";\n})(StatusCode = exports.StatusCode || (exports.StatusCode = {}));\n\nconst convertRootObject = root => {\n  return {\n    key: root.getKey(),\n    name: root.getName(),\n    path: root.getPath(),\n    createdAt: root.getCreatedAt(),\n    updatedAt: root.getUpdatedAt(),\n    thread: root.getThread()\n  };\n};\n\nconst convertRootObjectNullable = root => {\n  if (!root) return;\n  return convertRootObject(root);\n};\n\nconst convertMetadata = metadata => {\n  if (!metadata) return;\n  const roles = metadata.getRolesMap();\n  const typedRoles = new Map();\n  roles.forEach((entry, key) => typedRoles.set(key, entry));\n  const response = {\n    updatedAt: metadata.getUpdatedAt(),\n    roles: typedRoles\n  };\n  return response;\n};\n\nconst convertPathItem = item => {\n  const list = item.getItemsList();\n  return {\n    cid: item.getCid(),\n    name: item.getName(),\n    path: item.getPath(),\n    size: item.getSize(),\n    isDir: item.getIsDir(),\n    items: list ? list.map(convertPathItem) : [],\n    count: item.getItemsCount(),\n    metadata: convertMetadata(item.getMetadata())\n  };\n};\n\nconst convertPathItemNullable = item => {\n  if (!item) return;\n  return convertPathItem(item);\n};\n/**\n * Creates a new bucket.\n * @public\n * @param name Human-readable bucket name. It is only meant to help identify a bucket in a UI and is not unique.\n * @param isPrivate encrypt the bucket contents (default `false`)\n * @example\n * Creates a Bucket called \"app-name-files\"\n * ```typescript\n * import { Buckets } from '@textile/hub'\n *\n * const create = async (buckets: Buckets) => {\n *     return buckets.create(\"app-name-files\")\n * }\n * ```\n *\n * @internal\n */\n\n\nfunction bucketsCreate(api, name, isPrivate = false, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    logger.debug('create request');\n    const req = new buckets_pb_1.CreateRequest();\n    req.setName(name);\n    req.setPrivate(isPrivate);\n    const res = yield api.unary(buckets_pb_service_1.APIService.Create, req, ctx);\n    const links = res.getLinks();\n    return {\n      seed: res.getSeed_asU8(),\n      seedCid: res.getSeedCid(),\n      root: convertRootObjectNullable(res.getRoot()),\n      links: links ? links.toObject() : undefined\n    };\n  });\n}\n\nexports.bucketsCreate = bucketsCreate;\n/**\n * Returns the bucket root CID\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n *\n * @internal\n */\n\nfunction bucketsRoot(api, key, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    logger.debug('root request');\n    const req = new buckets_pb_1.RootRequest();\n    req.setKey(key);\n    const res = yield api.unary(buckets_pb_service_1.APIService.Root, req, ctx);\n    return convertRootObjectNullable(res.getRoot());\n  });\n}\n\nexports.bucketsRoot = bucketsRoot;\n/**\n * Returns a list of bucket links.\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n * @example\n * Generate the HTTP, IPNS, and IPFS links for a Bucket\n * ```typescript\n * import { Buckets } from '@textile/hub'\n *\n * const getLinks = async (buckets: Buckets) => {\n *    const links = buckets.links(bucketKey)\n *    return links.ipfs\n * }\n *\n * const getIpfs = async (buckets: Buckets) => {\n *    const links = buckets.links(bucketKey)\n *    return links.ipfs\n * }\n * ```\n *\n * @internal\n */\n\nfunction bucketsLinks(api, key, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    logger.debug('link request');\n    const req = new buckets_pb_1.LinksRequest();\n    req.setKey(key);\n    const res = yield api.unary(buckets_pb_service_1.APIService.Links, req, ctx);\n    return res.toObject();\n  });\n}\n\nexports.bucketsLinks = bucketsLinks;\n/**\n * Returns a list of all bucket roots.\n * @example\n * Find an existing Bucket named \"app-name-files\"\n * ```typescript\n * import { Buckets } from '@textile/hub'\n *\n * const exists = async (buckets: Buckets) => {\n *     const roots = await buckets.list();\n *     return roots.find((bucket) => bucket.name ===  \"app-name-files\")\n * }\n * ```\n *\n * @internal\n */\n\nfunction bucketsList(api, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    logger.debug('list request');\n    const req = new buckets_pb_1.ListRequest();\n    const res = yield api.unary(buckets_pb_service_1.APIService.List, req, ctx);\n    const roots = res.getRootsList();\n    const map = roots ? roots.map(m => m).map(m => convertRootObject(m)) : [];\n    return map;\n  });\n}\n\nexports.bucketsList = bucketsList;\n/**\n * Returns information about a bucket path.\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n * @param path A file/object (sub)-path within a bucket.\n *\n * @internal\n */\n\nfunction bucketsListPath(api, key, path, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    logger.debug('list path request');\n    const req = new buckets_pb_1.ListPathRequest();\n    req.setKey(key);\n    req.setPath(path);\n    const res = yield api.unary(buckets_pb_service_1.APIService.ListPath, req, ctx);\n    return {\n      item: convertPathItemNullable(res.getItem()),\n      root: convertRootObjectNullable(res.getRoot())\n    };\n  });\n}\n\nexports.bucketsListPath = bucketsListPath;\n/**\n * listIpfsPath returns items at a particular path in a UnixFS path living in the IPFS network.\n * @param path UnixFS path\n *\n * @internal\n */\n\nfunction bucketsListIpfsPath(api, path, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    logger.debug('list path request');\n    const req = new buckets_pb_1.ListIpfsPathRequest();\n    req.setPath(path);\n    const res = yield api.unary(buckets_pb_service_1.APIService.ListIpfsPath, req, ctx);\n    return convertPathItemNullable(res.getItem());\n  });\n}\n\nexports.bucketsListIpfsPath = bucketsListIpfsPath;\n/**\n * Pushes a file to a bucket path.\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n * @param path A file/object (sub)-path within a bucket.\n * @param input The input file/stream/object.\n * @param opts Options to control response stream. Currently only supports a progress function.\n * @remarks\n * This will return the resolved path and the bucket's new root path.\n * @example\n * Push a file to the root of a bucket\n * ```typescript\n * import { Buckets } from '@textile/hub'\n *\n * const pushFile = async (content: string, bucketKey: string) => {\n *    const file = { path: '/index.html', content: Buffer.from(content) }\n *    return await buckets.pushPath(bucketKey!, 'index.html', file)\n * }\n * ```\n *\n * @internal\n */\n\nfunction bucketsPushPath(api, key, path, input, opts, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n      var e_1, _a; // Only process the first  input if there are more than one\n\n\n      const source = (yield normalize_1.normaliseInput(input).next()).value;\n      const client = grpc_web_1.grpc.client(buckets_pb_service_1.APIService.PushPath, {\n        host: api.serviceHost,\n        transport: api.rpcOptions.transport,\n        debug: api.rpcOptions.debug\n      });\n      client.onMessage(message => {\n        var _a, _b, _c;\n\n        if (message.hasError()) {\n          // Reject on first error\n          reject(new Error(message.getError()));\n        } else if (message.hasEvent()) {\n          const event = (_a = message.getEvent()) === null || _a === void 0 ? void 0 : _a.toObject();\n\n          if (event === null || event === void 0 ? void 0 : event.path) {\n            // @todo: Is there an standard library/tool for this step in JS?\n            const pth = event.path.startsWith('/ipfs/') ? event.path.split('/ipfs/')[1] : event.path;\n            const cid = new cids_1.default(pth);\n            const res = {\n              path: {\n                path: `/ipfs/${cid.toString()}`,\n                cid: cid,\n                root: cid,\n                remainder: ''\n              },\n              root: (_c = (_b = event.root) === null || _b === void 0 ? void 0 : _b.path) !== null && _c !== void 0 ? _c : ''\n            };\n            resolve(res);\n          } else if (opts === null || opts === void 0 ? void 0 : opts.progress) {\n            opts.progress(event === null || event === void 0 ? void 0 : event.bytes);\n          }\n        } else {\n          reject(new Error('Invalid reply'));\n        }\n      });\n      client.onEnd(code => {\n        if (code === grpc_web_1.grpc.Code.OK) {\n          resolve();\n        } else {\n          reject(new Error(code.toString()));\n        }\n      });\n\n      if (source) {\n        const head = new buckets_pb_1.PushPathRequest.Header();\n        head.setPath(source.path || path);\n        head.setKey(key);\n        const req = new buckets_pb_1.PushPathRequest();\n        req.setHeader(head);\n        const metadata = Object.assign(Object.assign({}, api.context.toJSON()), ctx === null || ctx === void 0 ? void 0 : ctx.toJSON());\n        client.start(metadata);\n        client.send(req);\n\n        if (source.content) {\n          const process = yield block({\n            size: 4096,\n            noPad: true\n          });\n\n          try {\n            for (var _b = __asyncValues(process(source.content)), _c; _c = yield _b.next(), !_c.done;) {\n              const chunk = _c.value;\n              const buf = chunk.slice();\n              const part = new buckets_pb_1.PushPathRequest();\n              part.setChunk(buf);\n              client.send(part);\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n\n          client.finishSend();\n        }\n      }\n    }));\n  });\n}\n\nexports.bucketsPushPath = bucketsPushPath;\n/**\n * Pushes a file to a bucket path.\n * @internal\n */\n\nfunction bucketsSetPath(api, key, path, cid, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const request = new buckets_pb_1.SetPathRequest();\n    request.setKey(key);\n    request.setPath(path);\n    request.setCid(cid);\n    yield api.unary(buckets_pb_service_1.APIService.SetPath, request, ctx);\n  });\n}\n\nexports.bucketsSetPath = bucketsSetPath;\n/**\n * Pulls the bucket path, returning the bytes of the given file.\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n * @param path A file/object (sub)-path within a bucket.\n * @param opts Options to control response stream. Currently only supports a progress function.\n *\n * @internal\n */\n\nfunction bucketsPullPath(api, key, path, opts, ctx) {\n  const metadata = Object.assign(Object.assign({}, api.context.toJSON()), ctx === null || ctx === void 0 ? void 0 : ctx.toJSON());\n  const request = new buckets_pb_1.PullPathRequest();\n  request.setKey(key);\n  request.setPath(path);\n  let written = 0;\n  const events = new event_iterator_1.EventIterator(({\n    push,\n    stop,\n    fail\n  }) => {\n    const resp = grpc_web_1.grpc.invoke(buckets_pb_service_1.APIService.PullPath, {\n      host: api.serviceHost,\n      transport: api.rpcOptions.transport,\n      debug: api.rpcOptions.debug,\n      request,\n      metadata,\n      onMessage: res => __awaiter(this, void 0, void 0, function* () {\n        const chunk = res.getChunk_asU8();\n        push(chunk);\n        written += chunk.byteLength;\n\n        if (opts === null || opts === void 0 ? void 0 : opts.progress) {\n          opts.progress(written);\n        }\n      }),\n      onEnd: (status, message, _trailers) => __awaiter(this, void 0, void 0, function* () {\n        if (status !== grpc_web_1.grpc.Code.OK) {\n          fail(new Error(message));\n        }\n\n        stop();\n      })\n    });\n    return () => resp.close();\n  });\n  const it = Object.assign({\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n\n  }, events[Symbol.asyncIterator]());\n  return it;\n}\n\nexports.bucketsPullPath = bucketsPullPath;\n/**\n * pullIpfsPath pulls the path from a remote UnixFS dag, writing it to writer if it's a file.\n * @param path A file/object (sub)-path within a bucket.\n * @param opts Options to control response stream. Currently only supports a progress function.\n *\n * @internal\n */\n\nfunction bucketsPullIpfsPath(api, path, opts, ctx) {\n  const metadata = Object.assign(Object.assign({}, api.context.toJSON()), ctx === null || ctx === void 0 ? void 0 : ctx.toJSON());\n  const request = new buckets_pb_1.PullIpfsPathRequest();\n  request.setPath(path);\n  let written = 0;\n  const events = new event_iterator_1.EventIterator(({\n    push,\n    stop,\n    fail\n  }) => {\n    const resp = grpc_web_1.grpc.invoke(buckets_pb_service_1.APIService.PullIpfsPath, {\n      host: api.serviceHost,\n      transport: api.rpcOptions.transport,\n      debug: api.rpcOptions.debug,\n      request,\n      metadata,\n      onMessage: res => __awaiter(this, void 0, void 0, function* () {\n        const chunk = res.getChunk_asU8();\n        push(chunk);\n        written += chunk.byteLength;\n\n        if (opts === null || opts === void 0 ? void 0 : opts.progress) {\n          opts.progress(written);\n        }\n      }),\n      onEnd: (status, message, _trailers) => __awaiter(this, void 0, void 0, function* () {\n        if (status !== grpc_web_1.grpc.Code.OK) {\n          fail(new Error(message));\n        }\n\n        stop();\n      })\n    });\n    return () => resp.close();\n  });\n  const it = Object.assign({\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n\n  }, events[Symbol.asyncIterator]());\n  return it;\n}\n\nexports.bucketsPullIpfsPath = bucketsPullIpfsPath;\n/**\n * Removes an entire bucket. Files and directories will be unpinned.\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n *\n * @internal\n */\n\nfunction bucketsRemove(api, key, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    logger.debug('remove request');\n    const req = new buckets_pb_1.RemoveRequest();\n    req.setKey(key);\n    yield api.unary(buckets_pb_service_1.APIService.Remove, req, ctx);\n    return;\n  });\n}\n\nexports.bucketsRemove = bucketsRemove;\n/**\n * Returns information about a bucket path.\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n * @param path A file/object (sub)-path within a bucket.\n * @param root optional to specify a root\n *\n * @internal\n */\n\nfunction bucketsRemovePath(api, key, path, root, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    logger.debug('remove path request');\n    const req = new buckets_pb_1.RemovePathRequest();\n    req.setKey(key);\n    req.setPath(path);\n    if (root) req.setRoot(root);\n    yield api.unary(buckets_pb_service_1.APIService.RemovePath, req, ctx);\n    return;\n  });\n}\n\nexports.bucketsRemovePath = bucketsRemovePath;\n/**\n * archive creates a Filecoin bucket archive via Powergate.\n * @internal\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n */\n\nfunction bucketsArchive(api, key, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    logger.debug('archive request');\n    const req = new buckets_pb_1.ArchiveRequest();\n    req.setKey(key);\n    yield api.unary(buckets_pb_service_1.APIService.Archive, req, ctx);\n    return;\n  });\n}\n\nexports.bucketsArchive = bucketsArchive;\n/**\n * archiveStatus returns the status of a Filecoin bucket archive.\n * @internal\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n */\n\nfunction bucketsArchiveStatus(api, key, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    logger.debug('archive status request');\n    const req = new buckets_pb_1.ArchiveStatusRequest();\n    req.setKey(key);\n    const res = yield api.unary(buckets_pb_service_1.APIService.ArchiveStatus, req, ctx);\n    return {\n      key: res.getKey(),\n      status: res.getStatus(),\n      failedMsg: res.getFailedMsg()\n    };\n  });\n}\n\nexports.bucketsArchiveStatus = bucketsArchiveStatus;\n/**\n * archiveInfo returns info about a Filecoin bucket archive.\n * @internal\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n */\n\nfunction bucketsArchiveInfo(api, key, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    logger.debug('archive info request');\n    const req = new buckets_pb_1.ArchiveInfoRequest();\n    req.setKey(key);\n    const res = yield api.unary(buckets_pb_service_1.APIService.ArchiveInfo, req, ctx);\n    const archive = res.getArchive();\n    const deals = archive ? archive.getDealsList() : [];\n    return {\n      key: res.getKey(),\n      cid: archive ? archive.getCid() : undefined,\n      deals: deals.map(d => {\n        return {\n          proposalCid: d.getProposalCid(),\n          miner: d.getMiner()\n        };\n      })\n    };\n  });\n}\n\nexports.bucketsArchiveInfo = bucketsArchiveInfo;\n/**\n * archiveWatch watches status events from a Filecoin bucket archive.\n * @internal\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n */\n\nfunction bucketsArchiveWatch(api, key, callback, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    logger.debug('archive watch request');\n    const req = new buckets_pb_1.ArchiveWatchRequest();\n    req.setKey(key);\n    const metadata = Object.assign(Object.assign({}, api.context.toJSON()), ctx === null || ctx === void 0 ? void 0 : ctx.toJSON());\n    const res = grpc_web_1.grpc.invoke(buckets_pb_service_1.APIService.ArchiveWatch, {\n      host: api.context.host,\n      request: req,\n      metadata,\n      onMessage: rec => {\n        const response = {\n          id: rec.getJsPbMessageId(),\n          msg: rec.getMsg()\n        };\n        next_tick_1.default(() => callback(response));\n      },\n      onEnd: (status, message, _trailers) => {\n        if (status !== grpc_web_1.grpc.Code.OK) {\n          return callback(undefined, new Error(message));\n        }\n\n        callback();\n      }\n    });\n    return res.close.bind(res);\n  });\n}\n\nexports.bucketsArchiveWatch = bucketsArchiveWatch;\n/**\n * Raw API connected needed by Buckets CI code (compile friendly)\n * see more https://github.com/textileio/github-action-buckets\n */\n\nclass BucketsGrpcClient {\n  /**\n   * Creates a new gRPC client instance for accessing the Textile Buckets API.\n   * @param context The context to use for interacting with the APIs. Can be modified later.\n   */\n  constructor(context = new context_1.Context(), debug = false) {\n    this.context = context;\n    this.serviceHost = context.host;\n    this.rpcOptions = {\n      transport: grpc_transport_1.WebsocketTransport(),\n      debug\n    };\n  }\n\n  unary(methodDescriptor, req, ctx) {\n    return new Promise((resolve, reject) => {\n      const metadata = Object.assign(Object.assign({}, this.context.toJSON()), ctx === null || ctx === void 0 ? void 0 : ctx.toJSON());\n      grpc_web_1.grpc.unary(methodDescriptor, {\n        request: req,\n        host: this.serviceHost,\n        transport: this.rpcOptions.transport,\n        debug: this.rpcOptions.debug,\n        metadata,\n        onEnd: res => {\n          const {\n            status,\n            statusMessage,\n            message\n          } = res;\n\n          if (status === grpc_web_1.grpc.Code.OK) {\n            if (message) {\n              resolve(message);\n            } else {\n              resolve();\n            }\n          } else {\n            reject(new Error(statusMessage));\n          }\n        }\n      });\n    });\n  }\n\n}\n\nexports.BucketsGrpcClient = BucketsGrpcClient;","map":{"version":3,"sources":["../../src/api/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BucketsGrpcClient = exports.bucketsArchiveWatch = exports.bucketsArchiveInfo = exports.bucketsArchiveStatus = exports.bucketsArchive = exports.bucketsRemovePath = exports.bucketsRemove = exports.bucketsPullIpfsPath = exports.bucketsPullPath = exports.bucketsSetPath = exports.bucketsPushPath = exports.bucketsListIpfsPath = exports.bucketsListPath = exports.bucketsList = exports.bucketsLinks = exports.bucketsRoot = exports.bucketsCreate = exports.StatusCode = exports.PathAccessRole = void 0;\nconst grpc_web_1 = require(\"@improbable-eng/grpc-web\");\nconst buckets_pb_1 = require(\"@textile/buckets-grpc/buckets_pb\");\nconst buckets_pb_service_1 = require(\"@textile/buckets-grpc/buckets_pb_service\");\nconst context_1 = require(\"@textile/context\");\nconst grpc_transport_1 = require(\"@textile/grpc-transport\");\nconst cids_1 = __importDefault(require(\"cids\"));\nconst event_iterator_1 = require(\"event-iterator\");\nconst loglevel_1 = __importDefault(require(\"loglevel\"));\nconst next_tick_1 = __importDefault(require(\"next-tick\"));\nconst normalize_1 = require(\"./normalize\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst block = require('it-block');\nconst logger = loglevel_1.default.getLogger('buckets-api');\nvar PathAccessRole;\n(function (PathAccessRole) {\n    PathAccessRole[PathAccessRole[\"PATH_ACCESS_ROLE_UNSPECIFIED\"] = 0] = \"PATH_ACCESS_ROLE_UNSPECIFIED\";\n    PathAccessRole[PathAccessRole[\"PATH_ACCESS_ROLE_READER\"] = 1] = \"PATH_ACCESS_ROLE_READER\";\n    PathAccessRole[PathAccessRole[\"PATH_ACCESS_ROLE_WRITER\"] = 2] = \"PATH_ACCESS_ROLE_WRITER\";\n    PathAccessRole[PathAccessRole[\"PATH_ACCESS_ROLE_ADMIN\"] = 3] = \"PATH_ACCESS_ROLE_ADMIN\";\n})(PathAccessRole = exports.PathAccessRole || (exports.PathAccessRole = {}));\n/**\n * Archive status codes\n */\nvar StatusCode;\n(function (StatusCode) {\n    StatusCode[StatusCode[\"STATUS_UNSPECIFIED\"] = 0] = \"STATUS_UNSPECIFIED\";\n    StatusCode[StatusCode[\"STATUS_EXECUTING\"] = 1] = \"STATUS_EXECUTING\";\n    StatusCode[StatusCode[\"STATUS_FAILED\"] = 2] = \"STATUS_FAILED\";\n    StatusCode[StatusCode[\"STATUS_DONE\"] = 3] = \"STATUS_DONE\";\n    StatusCode[StatusCode[\"STATUS_CANCELED\"] = 4] = \"STATUS_CANCELED\";\n})(StatusCode = exports.StatusCode || (exports.StatusCode = {}));\nconst convertRootObject = (root) => {\n    return {\n        key: root.getKey(),\n        name: root.getName(),\n        path: root.getPath(),\n        createdAt: root.getCreatedAt(),\n        updatedAt: root.getUpdatedAt(),\n        thread: root.getThread(),\n    };\n};\nconst convertRootObjectNullable = (root) => {\n    if (!root)\n        return;\n    return convertRootObject(root);\n};\nconst convertMetadata = (metadata) => {\n    if (!metadata)\n        return;\n    const roles = metadata.getRolesMap();\n    const typedRoles = new Map();\n    roles.forEach((entry, key) => typedRoles.set(key, entry));\n    const response = {\n        updatedAt: metadata.getUpdatedAt(),\n        roles: typedRoles,\n    };\n    return response;\n};\nconst convertPathItem = (item) => {\n    const list = item.getItemsList();\n    return {\n        cid: item.getCid(),\n        name: item.getName(),\n        path: item.getPath(),\n        size: item.getSize(),\n        isDir: item.getIsDir(),\n        items: list ? list.map(convertPathItem) : [],\n        count: item.getItemsCount(),\n        metadata: convertMetadata(item.getMetadata()),\n    };\n};\nconst convertPathItemNullable = (item) => {\n    if (!item)\n        return;\n    return convertPathItem(item);\n};\n/**\n * Creates a new bucket.\n * @public\n * @param name Human-readable bucket name. It is only meant to help identify a bucket in a UI and is not unique.\n * @param isPrivate encrypt the bucket contents (default `false`)\n * @example\n * Creates a Bucket called \"app-name-files\"\n * ```typescript\n * import { Buckets } from '@textile/hub'\n *\n * const create = async (buckets: Buckets) => {\n *     return buckets.create(\"app-name-files\")\n * }\n * ```\n *\n * @internal\n */\nfunction bucketsCreate(api, name, isPrivate = false, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        logger.debug('create request');\n        const req = new buckets_pb_1.CreateRequest();\n        req.setName(name);\n        req.setPrivate(isPrivate);\n        const res = yield api.unary(buckets_pb_service_1.APIService.Create, req, ctx);\n        const links = res.getLinks();\n        return {\n            seed: res.getSeed_asU8(),\n            seedCid: res.getSeedCid(),\n            root: convertRootObjectNullable(res.getRoot()),\n            links: links ? links.toObject() : undefined,\n        };\n    });\n}\nexports.bucketsCreate = bucketsCreate;\n/**\n * Returns the bucket root CID\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n *\n * @internal\n */\nfunction bucketsRoot(api, key, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        logger.debug('root request');\n        const req = new buckets_pb_1.RootRequest();\n        req.setKey(key);\n        const res = yield api.unary(buckets_pb_service_1.APIService.Root, req, ctx);\n        return convertRootObjectNullable(res.getRoot());\n    });\n}\nexports.bucketsRoot = bucketsRoot;\n/**\n * Returns a list of bucket links.\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n * @example\n * Generate the HTTP, IPNS, and IPFS links for a Bucket\n * ```typescript\n * import { Buckets } from '@textile/hub'\n *\n * const getLinks = async (buckets: Buckets) => {\n *    const links = buckets.links(bucketKey)\n *    return links.ipfs\n * }\n *\n * const getIpfs = async (buckets: Buckets) => {\n *    const links = buckets.links(bucketKey)\n *    return links.ipfs\n * }\n * ```\n *\n * @internal\n */\nfunction bucketsLinks(api, key, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        logger.debug('link request');\n        const req = new buckets_pb_1.LinksRequest();\n        req.setKey(key);\n        const res = yield api.unary(buckets_pb_service_1.APIService.Links, req, ctx);\n        return res.toObject();\n    });\n}\nexports.bucketsLinks = bucketsLinks;\n/**\n * Returns a list of all bucket roots.\n * @example\n * Find an existing Bucket named \"app-name-files\"\n * ```typescript\n * import { Buckets } from '@textile/hub'\n *\n * const exists = async (buckets: Buckets) => {\n *     const roots = await buckets.list();\n *     return roots.find((bucket) => bucket.name ===  \"app-name-files\")\n * }\n * ```\n *\n * @internal\n */\nfunction bucketsList(api, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        logger.debug('list request');\n        const req = new buckets_pb_1.ListRequest();\n        const res = yield api.unary(buckets_pb_service_1.APIService.List, req, ctx);\n        const roots = res.getRootsList();\n        const map = roots ? roots.map((m) => m).map((m) => convertRootObject(m)) : [];\n        return map;\n    });\n}\nexports.bucketsList = bucketsList;\n/**\n * Returns information about a bucket path.\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n * @param path A file/object (sub)-path within a bucket.\n *\n * @internal\n */\nfunction bucketsListPath(api, key, path, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        logger.debug('list path request');\n        const req = new buckets_pb_1.ListPathRequest();\n        req.setKey(key);\n        req.setPath(path);\n        const res = yield api.unary(buckets_pb_service_1.APIService.ListPath, req, ctx);\n        return {\n            item: convertPathItemNullable(res.getItem()),\n            root: convertRootObjectNullable(res.getRoot()),\n        };\n    });\n}\nexports.bucketsListPath = bucketsListPath;\n/**\n * listIpfsPath returns items at a particular path in a UnixFS path living in the IPFS network.\n * @param path UnixFS path\n *\n * @internal\n */\nfunction bucketsListIpfsPath(api, path, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        logger.debug('list path request');\n        const req = new buckets_pb_1.ListIpfsPathRequest();\n        req.setPath(path);\n        const res = yield api.unary(buckets_pb_service_1.APIService.ListIpfsPath, req, ctx);\n        return convertPathItemNullable(res.getItem());\n    });\n}\nexports.bucketsListIpfsPath = bucketsListIpfsPath;\n/**\n * Pushes a file to a bucket path.\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n * @param path A file/object (sub)-path within a bucket.\n * @param input The input file/stream/object.\n * @param opts Options to control response stream. Currently only supports a progress function.\n * @remarks\n * This will return the resolved path and the bucket's new root path.\n * @example\n * Push a file to the root of a bucket\n * ```typescript\n * import { Buckets } from '@textile/hub'\n *\n * const pushFile = async (content: string, bucketKey: string) => {\n *    const file = { path: '/index.html', content: Buffer.from(content) }\n *    return await buckets.pushPath(bucketKey!, 'index.html', file)\n * }\n * ```\n *\n * @internal\n */\nfunction bucketsPushPath(api, key, path, input, opts, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n            var e_1, _a;\n            // Only process the first  input if there are more than one\n            const source = (yield normalize_1.normaliseInput(input).next()).value;\n            const client = grpc_web_1.grpc.client(buckets_pb_service_1.APIService.PushPath, {\n                host: api.serviceHost,\n                transport: api.rpcOptions.transport,\n                debug: api.rpcOptions.debug,\n            });\n            client.onMessage((message) => {\n                var _a, _b, _c;\n                if (message.hasError()) {\n                    // Reject on first error\n                    reject(new Error(message.getError()));\n                }\n                else if (message.hasEvent()) {\n                    const event = (_a = message.getEvent()) === null || _a === void 0 ? void 0 : _a.toObject();\n                    if (event === null || event === void 0 ? void 0 : event.path) {\n                        // @todo: Is there an standard library/tool for this step in JS?\n                        const pth = event.path.startsWith('/ipfs/') ? event.path.split('/ipfs/')[1] : event.path;\n                        const cid = new cids_1.default(pth);\n                        const res = {\n                            path: {\n                                path: `/ipfs/${cid.toString()}`,\n                                cid: cid,\n                                root: cid,\n                                remainder: '',\n                            },\n                            root: (_c = (_b = event.root) === null || _b === void 0 ? void 0 : _b.path) !== null && _c !== void 0 ? _c : '',\n                        };\n                        resolve(res);\n                    }\n                    else if (opts === null || opts === void 0 ? void 0 : opts.progress) {\n                        opts.progress(event === null || event === void 0 ? void 0 : event.bytes);\n                    }\n                }\n                else {\n                    reject(new Error('Invalid reply'));\n                }\n            });\n            client.onEnd((code) => {\n                if (code === grpc_web_1.grpc.Code.OK) {\n                    resolve();\n                }\n                else {\n                    reject(new Error(code.toString()));\n                }\n            });\n            if (source) {\n                const head = new buckets_pb_1.PushPathRequest.Header();\n                head.setPath(source.path || path);\n                head.setKey(key);\n                const req = new buckets_pb_1.PushPathRequest();\n                req.setHeader(head);\n                const metadata = Object.assign(Object.assign({}, api.context.toJSON()), ctx === null || ctx === void 0 ? void 0 : ctx.toJSON());\n                client.start(metadata);\n                client.send(req);\n                if (source.content) {\n                    const process = yield block({ size: 4096, noPad: true });\n                    try {\n                        for (var _b = __asyncValues(process(source.content)), _c; _c = yield _b.next(), !_c.done;) {\n                            const chunk = _c.value;\n                            const buf = chunk.slice();\n                            const part = new buckets_pb_1.PushPathRequest();\n                            part.setChunk(buf);\n                            client.send(part);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                    client.finishSend();\n                }\n            }\n        }));\n    });\n}\nexports.bucketsPushPath = bucketsPushPath;\n/**\n * Pushes a file to a bucket path.\n * @internal\n */\nfunction bucketsSetPath(api, key, path, cid, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const request = new buckets_pb_1.SetPathRequest();\n        request.setKey(key);\n        request.setPath(path);\n        request.setCid(cid);\n        yield api.unary(buckets_pb_service_1.APIService.SetPath, request, ctx);\n    });\n}\nexports.bucketsSetPath = bucketsSetPath;\n/**\n * Pulls the bucket path, returning the bytes of the given file.\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n * @param path A file/object (sub)-path within a bucket.\n * @param opts Options to control response stream. Currently only supports a progress function.\n *\n * @internal\n */\nfunction bucketsPullPath(api, key, path, opts, ctx) {\n    const metadata = Object.assign(Object.assign({}, api.context.toJSON()), ctx === null || ctx === void 0 ? void 0 : ctx.toJSON());\n    const request = new buckets_pb_1.PullPathRequest();\n    request.setKey(key);\n    request.setPath(path);\n    let written = 0;\n    const events = new event_iterator_1.EventIterator(({ push, stop, fail }) => {\n        const resp = grpc_web_1.grpc.invoke(buckets_pb_service_1.APIService.PullPath, {\n            host: api.serviceHost,\n            transport: api.rpcOptions.transport,\n            debug: api.rpcOptions.debug,\n            request,\n            metadata,\n            onMessage: (res) => __awaiter(this, void 0, void 0, function* () {\n                const chunk = res.getChunk_asU8();\n                push(chunk);\n                written += chunk.byteLength;\n                if (opts === null || opts === void 0 ? void 0 : opts.progress) {\n                    opts.progress(written);\n                }\n            }),\n            onEnd: (status, message, _trailers) => __awaiter(this, void 0, void 0, function* () {\n                if (status !== grpc_web_1.grpc.Code.OK) {\n                    fail(new Error(message));\n                }\n                stop();\n            }),\n        });\n        return () => resp.close();\n    });\n    const it = Object.assign({ [Symbol.asyncIterator]() {\n            return this;\n        } }, events[Symbol.asyncIterator]());\n    return it;\n}\nexports.bucketsPullPath = bucketsPullPath;\n/**\n * pullIpfsPath pulls the path from a remote UnixFS dag, writing it to writer if it's a file.\n * @param path A file/object (sub)-path within a bucket.\n * @param opts Options to control response stream. Currently only supports a progress function.\n *\n * @internal\n */\nfunction bucketsPullIpfsPath(api, path, opts, ctx) {\n    const metadata = Object.assign(Object.assign({}, api.context.toJSON()), ctx === null || ctx === void 0 ? void 0 : ctx.toJSON());\n    const request = new buckets_pb_1.PullIpfsPathRequest();\n    request.setPath(path);\n    let written = 0;\n    const events = new event_iterator_1.EventIterator(({ push, stop, fail }) => {\n        const resp = grpc_web_1.grpc.invoke(buckets_pb_service_1.APIService.PullIpfsPath, {\n            host: api.serviceHost,\n            transport: api.rpcOptions.transport,\n            debug: api.rpcOptions.debug,\n            request,\n            metadata,\n            onMessage: (res) => __awaiter(this, void 0, void 0, function* () {\n                const chunk = res.getChunk_asU8();\n                push(chunk);\n                written += chunk.byteLength;\n                if (opts === null || opts === void 0 ? void 0 : opts.progress) {\n                    opts.progress(written);\n                }\n            }),\n            onEnd: (status, message, _trailers) => __awaiter(this, void 0, void 0, function* () {\n                if (status !== grpc_web_1.grpc.Code.OK) {\n                    fail(new Error(message));\n                }\n                stop();\n            }),\n        });\n        return () => resp.close();\n    });\n    const it = Object.assign({ [Symbol.asyncIterator]() {\n            return this;\n        } }, events[Symbol.asyncIterator]());\n    return it;\n}\nexports.bucketsPullIpfsPath = bucketsPullIpfsPath;\n/**\n * Removes an entire bucket. Files and directories will be unpinned.\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n *\n * @internal\n */\nfunction bucketsRemove(api, key, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        logger.debug('remove request');\n        const req = new buckets_pb_1.RemoveRequest();\n        req.setKey(key);\n        yield api.unary(buckets_pb_service_1.APIService.Remove, req, ctx);\n        return;\n    });\n}\nexports.bucketsRemove = bucketsRemove;\n/**\n * Returns information about a bucket path.\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n * @param path A file/object (sub)-path within a bucket.\n * @param root optional to specify a root\n *\n * @internal\n */\nfunction bucketsRemovePath(api, key, path, root, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        logger.debug('remove path request');\n        const req = new buckets_pb_1.RemovePathRequest();\n        req.setKey(key);\n        req.setPath(path);\n        if (root)\n            req.setRoot(root);\n        yield api.unary(buckets_pb_service_1.APIService.RemovePath, req, ctx);\n        return;\n    });\n}\nexports.bucketsRemovePath = bucketsRemovePath;\n/**\n * archive creates a Filecoin bucket archive via Powergate.\n * @internal\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n */\nfunction bucketsArchive(api, key, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        logger.debug('archive request');\n        const req = new buckets_pb_1.ArchiveRequest();\n        req.setKey(key);\n        yield api.unary(buckets_pb_service_1.APIService.Archive, req, ctx);\n        return;\n    });\n}\nexports.bucketsArchive = bucketsArchive;\n/**\n * archiveStatus returns the status of a Filecoin bucket archive.\n * @internal\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n */\nfunction bucketsArchiveStatus(api, key, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        logger.debug('archive status request');\n        const req = new buckets_pb_1.ArchiveStatusRequest();\n        req.setKey(key);\n        const res = yield api.unary(buckets_pb_service_1.APIService.ArchiveStatus, req, ctx);\n        return {\n            key: res.getKey(),\n            status: res.getStatus(),\n            failedMsg: res.getFailedMsg(),\n        };\n    });\n}\nexports.bucketsArchiveStatus = bucketsArchiveStatus;\n/**\n * archiveInfo returns info about a Filecoin bucket archive.\n * @internal\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n */\nfunction bucketsArchiveInfo(api, key, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        logger.debug('archive info request');\n        const req = new buckets_pb_1.ArchiveInfoRequest();\n        req.setKey(key);\n        const res = yield api.unary(buckets_pb_service_1.APIService.ArchiveInfo, req, ctx);\n        const archive = res.getArchive();\n        const deals = archive ? archive.getDealsList() : [];\n        return {\n            key: res.getKey(),\n            cid: archive ? archive.getCid() : undefined,\n            deals: deals.map((d) => {\n                return {\n                    proposalCid: d.getProposalCid(),\n                    miner: d.getMiner(),\n                };\n            }),\n        };\n    });\n}\nexports.bucketsArchiveInfo = bucketsArchiveInfo;\n/**\n * archiveWatch watches status events from a Filecoin bucket archive.\n * @internal\n * @param key Unique (IPNS compatible) identifier key for a bucket.\n */\nfunction bucketsArchiveWatch(api, key, callback, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        logger.debug('archive watch request');\n        const req = new buckets_pb_1.ArchiveWatchRequest();\n        req.setKey(key);\n        const metadata = Object.assign(Object.assign({}, api.context.toJSON()), ctx === null || ctx === void 0 ? void 0 : ctx.toJSON());\n        const res = grpc_web_1.grpc.invoke(buckets_pb_service_1.APIService.ArchiveWatch, {\n            host: api.context.host,\n            request: req,\n            metadata,\n            onMessage: (rec) => {\n                const response = {\n                    id: rec.getJsPbMessageId(),\n                    msg: rec.getMsg(),\n                };\n                next_tick_1.default(() => callback(response));\n            },\n            onEnd: (status, message, _trailers) => {\n                if (status !== grpc_web_1.grpc.Code.OK) {\n                    return callback(undefined, new Error(message));\n                }\n                callback();\n            },\n        });\n        return res.close.bind(res);\n    });\n}\nexports.bucketsArchiveWatch = bucketsArchiveWatch;\n/**\n * Raw API connected needed by Buckets CI code (compile friendly)\n * see more https://github.com/textileio/github-action-buckets\n */\nclass BucketsGrpcClient {\n    /**\n     * Creates a new gRPC client instance for accessing the Textile Buckets API.\n     * @param context The context to use for interacting with the APIs. Can be modified later.\n     */\n    constructor(context = new context_1.Context(), debug = false) {\n        this.context = context;\n        this.serviceHost = context.host;\n        this.rpcOptions = {\n            transport: grpc_transport_1.WebsocketTransport(),\n            debug,\n        };\n    }\n    unary(methodDescriptor, req, ctx) {\n        return new Promise((resolve, reject) => {\n            const metadata = Object.assign(Object.assign({}, this.context.toJSON()), ctx === null || ctx === void 0 ? void 0 : ctx.toJSON());\n            grpc_web_1.grpc.unary(methodDescriptor, {\n                request: req,\n                host: this.serviceHost,\n                transport: this.rpcOptions.transport,\n                debug: this.rpcOptions.debug,\n                metadata,\n                onEnd: (res) => {\n                    const { status, statusMessage, message } = res;\n                    if (status === grpc_web_1.grpc.Code.OK) {\n                        if (message) {\n                            resolve(message);\n                        }\n                        else {\n                            resolve();\n                        }\n                    }\n                    else {\n                        reject(new Error(statusMessage));\n                    }\n                },\n            });\n        });\n    }\n}\nexports.BucketsGrpcClient = BucketsGrpcClient;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}