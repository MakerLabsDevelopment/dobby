{"ast":null,"code":"import { set, updateAll } from 'shades';\nimport { createSelector } from 'redux-bundler';\nexport default {\n  name: 'threads',\n  getReducer: () => {\n    const initialData = {\n      active: null,\n      loading: false,\n      data: null\n    };\n    return (state = initialData, {\n      type,\n      payload,\n      err\n    }) => {\n      if (type.startsWith('THREADS') && type.endsWith('_START')) {\n        return set('loading')(true)(state);\n      }\n\n      if (type === 'THREADS_RESET') {\n        return initialData;\n      }\n\n      if (type === 'THREADS_FETCH_SUCCESS') {\n        return updateAll(set('data')(payload.listList), set('loading')(false))(state);\n      }\n\n      if (type === 'THREADS_FETCH_FAILED') {\n        return updateAll(set('data')(null), set('loading')(false))(state);\n      }\n\n      return state;\n    };\n  },\n  doThreadsFetch: client => {\n    return ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'THREADS_FETCH_START'\n      });\n      return client.listThreads().then(payload => {\n        return dispatch({\n          type: 'THREADS_FETCH_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'THREADS_FETCH_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doThreadsCreate: () => {\n    return ({\n      dispatch,\n      apiPost,\n      store\n    }) => {\n      dispatch({\n        type: 'THREADS_ADD_START'\n      });\n      return apiPost('v1/skills/').then(payload => {\n        return dispatch({\n          type: 'THREADS_ADD_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'THREADS_ADD_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doThreadsSetActive: threadId => {\n    return async ({\n      dispatch,\n      store\n    }) => {\n      const result = await dispatch({\n        type: 'MESSAGES_SET_ACTIVE',\n        payload: threadId\n      });\n\n      if (!threadId) {\n        const {\n          accountsActive\n        } = store.select(['selectAccountsActive']);\n        await store.doMessagesFetch(accountsActive.id);\n      }\n\n      return result;\n    };\n  },\n  reactThreadsPath: createSelector('selectAuthClient', 'selectThreadsData', 'selectThreadsLoading', (authClient, threadsData, loading) => {\n    if (authClient && !threadsData && !loading) {\n      return {\n        actionCreator: 'doThreadsFetch',\n        args: [authClient]\n      };\n    }\n  }),\n  selectThreadsLoading: state => state.threads.loading,\n  selectThreadsData: state => state.threads.data\n};","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/sushitable/src/bundles/threads.js"],"names":["set","updateAll","createSelector","name","getReducer","initialData","active","loading","data","state","type","payload","err","startsWith","endsWith","listList","doThreadsFetch","client","dispatch","store","listThreads","then","catch","doThreadsCreate","apiPost","doThreadsSetActive","threadId","result","accountsActive","select","doMessagesFetch","id","reactThreadsPath","authClient","threadsData","actionCreator","args","selectThreadsLoading","threads","selectThreadsData"],"mappings":"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","sourcesContent":["import { set, updateAll } from 'shades'\nimport { createSelector } from 'redux-bundler'\n\nexport default {\n  name: 'threads',\n  getReducer: () => {\n    const initialData = {\n      active: null,\n      loading: false,\n      data: null\n    }\n    return (state = initialData, { type, payload, err }) => {\n      if (type.startsWith('THREADS') && type.endsWith('_START')) {\n        return set('loading')(true)(state)\n      }\n\n      if (type === 'THREADS_RESET') {\n        return initialData\n      }\n\n      if (type === 'THREADS_FETCH_SUCCESS') {\n        return updateAll(\n          set('data')(payload.listList),\n          set('loading')(false)\n        )(state)\n      }\n\n      if (type === 'THREADS_FETCH_FAILED') {\n        return updateAll(\n          set('data')(null),\n          set('loading')(false)\n        )(state)\n      }\n\n      return state\n    }\n  },\n  doThreadsFetch: (client) => {\n    return ({ dispatch, store }) => {\n      dispatch({ type: 'THREADS_FETCH_START' })\n      return client.listThreads().then((payload) => {\n        return dispatch({ type: 'THREADS_FETCH_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'THREADS_FETCH_FAILED', err })\n      })\n    }\n  },\n  doThreadsCreate: () => {\n    return ({ dispatch, apiPost, store }) => {\n      dispatch({ type: 'THREADS_ADD_START' })\n      return apiPost('v1/skills/').then((payload) => {\n        return dispatch({ type: 'THREADS_ADD_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'THREADS_ADD_FAILED', err })\n      })\n    }\n  },\n  doThreadsSetActive: (threadId) => {\n    return async ({ dispatch, store }) => {\n      const result = await dispatch({ type: 'MESSAGES_SET_ACTIVE', payload: threadId })\n      if (!threadId) {\n        const { accountsActive } = store.select(['selectAccountsActive'])\n        await store.doMessagesFetch(accountsActive.id)\n      }\n      return result\n    }\n  },\n  reactThreadsPath: createSelector(\n    'selectAuthClient',\n    'selectThreadsData',\n    'selectThreadsLoading',\n    (authClient, threadsData, loading) => {\n      if (authClient && !threadsData && !loading) {\n        return { actionCreator: 'doThreadsFetch', args: [authClient] }\n      }\n    },\n  ),\n  selectThreadsLoading: state => state.threads.loading,\n  selectThreadsData: state => state.threads.data,\n}\n"]},"metadata":{},"sourceType":"module"}