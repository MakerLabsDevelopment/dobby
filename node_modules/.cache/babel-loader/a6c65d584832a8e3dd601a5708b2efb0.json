{"ast":null,"code":"import { set, updateAll } from 'shades';\nexport default {\n  name: 'collections',\n  getReducer: () => {\n    const initialData = {\n      loading: false,\n      data: null\n    };\n    return (state = initialData, {\n      type,\n      payload,\n      err\n    }) => {\n      if (type.startsWith('COLLECTIONS') && type.endsWith('_START')) {\n        return set('loading')(true)(state);\n      }\n\n      if (type === 'COLLECTIONS_RESET') {\n        return initialData;\n      }\n\n      if (type === 'COLLECTIONS_FETCH_SUCCESS') {\n        return updateAll(set('data')(payload.results), set('loading')(false))(state);\n      }\n\n      if (type === 'COLLECTIONS_FETCH_FAILED') {\n        return updateAll(set('data')(null), set('loading')(false))(state);\n      }\n\n      return state;\n    };\n  },\n  doCollectionsFetch: threadId => {\n    return async ({\n      apiGet,\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_FETCH_START'\n      });\n      const {\n        client\n      } = store.select(['selectAuthClient']);\n      const collections = await client.listCollections(threadId);\n      return apiGet(`v1/skills/`).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_SUCCESS',\n          collections\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsCreate: () => {\n    return ({\n      dispatch,\n      apiPost,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_ADD_START'\n      });\n      return apiPost('v1/skills/').then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_FAILED',\n          err\n        });\n      });\n    };\n  },\n  selectCollectionsLoading: state => state.collections.loading,\n  selectCollectionsData: state => state.collections.data\n};","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/dobby/src/bundles/collections.js"],"names":["set","updateAll","name","getReducer","initialData","loading","data","state","type","payload","err","startsWith","endsWith","results","doCollectionsFetch","threadId","apiGet","dispatch","store","client","select","collections","listCollections","then","catch","doCollectionsCreate","apiPost","selectCollectionsLoading","selectCollectionsData"],"mappings":"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","sourcesContent":["import { set, updateAll } from 'shades'\n\nexport default {\n  name: 'collections',\n  getReducer: () => {\n    const initialData = {\n      loading: false,\n      data: null\n    }\n    return (state = initialData, { type, payload, err }) => {\n      if (type.startsWith('COLLECTIONS') && type.endsWith('_START')) {\n        return set('loading')(true)(state)\n      }\n\n      if (type === 'COLLECTIONS_RESET') {\n        return initialData\n      }\n\n      if (type === 'COLLECTIONS_FETCH_SUCCESS') {\n        return updateAll(\n          set('data')(payload.results),\n          set('loading')(false)\n        )(state)\n      }\n\n      if (type === 'COLLECTIONS_FETCH_FAILED') {\n        return updateAll(\n          set('data')(null),\n          set('loading')(false)\n        )(state)\n      }\n\n      return state\n    }\n  },\n  doCollectionsFetch: (threadId) => {\n    return async ({ apiGet, dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_FETCH_START' })\n      const { client } = store.select(['selectAuthClient'])\n      const collections = await client.listCollections(threadId)\n      return apiGet(`v1/skills/`).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_SUCCESS', collections })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_FAILED', err })\n      })\n    }\n  },\n  doCollectionsCreate: () => {\n    return ({ dispatch, apiPost, store }) => {\n      dispatch({ type: 'COLLECTIONS_ADD_START' })\n      return apiPost('v1/skills/').then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_FAILED', err })\n      })\n    }\n  },\n  selectCollectionsLoading: state => state.collections.loading,\n  selectCollectionsData: state => state.collections.data,\n}\n"]},"metadata":{},"sourceType":"module"}