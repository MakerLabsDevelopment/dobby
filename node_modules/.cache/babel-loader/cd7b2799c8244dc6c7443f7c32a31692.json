{"ast":null,"code":"\"use strict\";\n\nconst AES_MODE_N = \"aes-256-gcm\";\nconst AES_MODE_B = \"AES-GCM\";\nconst AES_MODE_BB = {\n  name: AES_MODE_B,\n  length: 256\n};\nconst isBrowser = typeof window !== 'undefined' && window.crypto;\nconst wcryp = isBrowser && window.crypto;\n\nconst cryp = !isBrowser && require(\"crypto\");\n\nconst secureRandom = wcryp ? length => window.crypto.getRandomValues(new Uint8Array(length)) : length => new Uint8Array(cryp.randomBytes(length).buffer);\n\nfunction hexToArray(hex) {\n  if (hex.startsWith('0x')) hex = hex.slice(2);\n  if (hex.length & 1) hex = `0${hex}`;\n  const array = new Uint8Array(hex.length / 2);\n\n  for (let i = 0; i < array.length; i++) {\n    let j = i * 2;\n    array[i] = Number.parseInt(hex.slice(j, j + 2), 16);\n  }\n\n  return array;\n}\n/**\n * @param {Uint8Array} sharedKey\n * @param {Uint8Array|string} plaintext\n * @returns {Promise<Uint8Array>}\n */\n\n\nasync function encrypt(sharedKey, plaintext) {\n  if (typeof plaintext === \"string\") plaintext = new TextEncoder().encode(plaintext);\n  const iv = secureRandom(12);\n\n  if (isBrowser) {\n    const bSharedKey = await wcryp.subtle.importKey(\"raw\", sharedKey, AES_MODE_BB, true, [\"encrypt\"]);\n    const cipher = await wcryp.subtle.encrypt({\n      name: AES_MODE_B,\n      iv\n    }, bSharedKey, plaintext);\n    const ciphertext = new Uint8Array(cipher);\n    const encrypted = new Uint8Array(iv.length + ciphertext.byteLength);\n    encrypted.set(iv, 0);\n    encrypted.set(ciphertext, iv.length);\n    return encrypted;\n  } else {\n    const cipher = cryp.createCipheriv(AES_MODE_N, sharedKey, iv);\n    let ciphertext = cipher.update(plaintext, undefined, \"hex\");\n    ciphertext += cipher.final(\"hex\");\n    const ciphertextArray = hexToArray(ciphertext);\n    const tag = cipher.getAuthTag();\n    const encrypted = new Uint8Array(iv.length + ciphertextArray.length + tag.length);\n    encrypted.set(iv, 0);\n    encrypted.set(ciphertextArray, iv.length);\n    encrypted.set(tag, iv.length + ciphertextArray.length);\n    return encrypted;\n  }\n}\n/**\n * @param {Uint8Array} sharedKey\n * @param {Uint8Array} encoded\n * @returns {Promise<Uint8Array>}\n */\n\n\nasync function decrypt(sharedKey, encoded) {\n  if (typeof encoded === \"string\") encoded = hexToArray(encoded);\n  const iv = encoded.slice(0, 12);\n\n  if (isBrowser) {\n    const ciphertextWithTag = encoded.slice(12);\n    const bSharedKey = await wcryp.subtle.importKey(\"raw\", sharedKey, AES_MODE_BB, true, [\"decrypt\"]);\n    const plaintext = await wcryp.subtle.decrypt({\n      name: AES_MODE_B,\n      iv\n    }, bSharedKey, ciphertextWithTag);\n    return new Uint8Array(plaintext);\n  } else {\n    const ciphertext = encoded.slice(12, -16);\n    const authTag = encoded.slice(-16);\n    const decipher = cryp.createDecipheriv(AES_MODE_N, sharedKey, iv);\n    decipher.setAuthTag(authTag);\n    const plaintext = decipher.update(ciphertext);\n    const res = Buffer.concat([plaintext, decipher.final()]);\n    return Uint8Array.from(res);\n  }\n}\n/**\n * Converts a typed array to unicode string in UTF-8 format.\n * @param {Uint8Array} byteArray\n * @returns {string}\n */\n\n\nfunction bytesToUTF8(byteArray) {\n  return new TextDecoder().decode(byteArray);\n}\n\nif (typeof exports !== \"undefined\") {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.decrypt = decrypt;\n  exports.encrypt = encrypt;\n  exports.bytesToUTF8 = bytesToUTF8;\n}","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/dobby/node_modules/micro-aes-gcm/index.js"],"names":["AES_MODE_N","AES_MODE_B","AES_MODE_BB","name","length","isBrowser","window","crypto","wcryp","cryp","require","secureRandom","getRandomValues","Uint8Array","randomBytes","buffer","hexToArray","hex","startsWith","slice","array","i","j","Number","parseInt","encrypt","sharedKey","plaintext","TextEncoder","encode","iv","bSharedKey","subtle","importKey","cipher","ciphertext","encrypted","byteLength","set","createCipheriv","update","undefined","final","ciphertextArray","tag","getAuthTag","decrypt","encoded","ciphertextWithTag","authTag","decipher","createDecipheriv","setAuthTag","res","Buffer","concat","from","bytesToUTF8","byteArray","TextDecoder","decode","exports","Object","defineProperty","value"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst AES_MODE_N = \"aes-256-gcm\";\nconst AES_MODE_B = \"AES-GCM\";\nconst AES_MODE_BB = { name: AES_MODE_B, length: 256 };\n\nconst isBrowser = typeof window !== 'undefined' && window.crypto;\nconst wcryp = isBrowser && window.crypto;\nconst cryp = !isBrowser && require(\"crypto\");\nconst secureRandom = wcryp ?\n  (length => window.crypto.getRandomValues(new Uint8Array(length))) :\n  (length => new Uint8Array(cryp.randomBytes(length).buffer));\n\nfunction hexToArray(hex) {\n  if (hex.startsWith('0x')) hex = hex.slice(2);\n  if (hex.length & 1) hex = `0${hex}`;\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    let j = i * 2;\n    array[i] = Number.parseInt(hex.slice(j, j + 2), 16);\n  }\n  return array;\n}\n\n/**\n * @param {Uint8Array} sharedKey\n * @param {Uint8Array|string} plaintext\n * @returns {Promise<Uint8Array>}\n */\nasync function encrypt(sharedKey, plaintext) {\n  if (typeof plaintext === \"string\")\n    plaintext = new TextEncoder().encode(plaintext);\n  const iv = secureRandom(12);\n  if (isBrowser) {\n    const bSharedKey = await wcryp.subtle.importKey(\n      \"raw\",\n      sharedKey,\n      AES_MODE_BB,\n      true,\n      [\"encrypt\"]\n    );\n    const cipher = await wcryp.subtle.encrypt(\n      { name: AES_MODE_B, iv },\n      bSharedKey,\n      plaintext\n    );\n    const ciphertext = new Uint8Array(cipher);\n    const encrypted = new Uint8Array(iv.length + ciphertext.byteLength);\n    encrypted.set(iv, 0);\n    encrypted.set(ciphertext, iv.length);\n    return encrypted;\n  } else {\n    const cipher = cryp.createCipheriv(AES_MODE_N, sharedKey, iv);\n    let ciphertext = cipher.update(plaintext, undefined, \"hex\");\n    ciphertext += cipher.final(\"hex\");\n    const ciphertextArray = hexToArray(ciphertext);\n    const tag = cipher.getAuthTag();\n    const encrypted = new Uint8Array(\n      iv.length + ciphertextArray.length + tag.length\n    );\n    encrypted.set(iv, 0);\n    encrypted.set(ciphertextArray, iv.length);\n    encrypted.set(tag, iv.length + ciphertextArray.length);\n    return encrypted;\n  }\n}\n\n/**\n * @param {Uint8Array} sharedKey\n * @param {Uint8Array} encoded\n * @returns {Promise<Uint8Array>}\n */\nasync function decrypt(sharedKey, encoded) {\n  if (typeof encoded === \"string\") encoded = hexToArray(encoded);\n  const iv = encoded.slice(0, 12);\n  if (isBrowser) {\n    const ciphertextWithTag = encoded.slice(12);\n    const bSharedKey = await wcryp.subtle.importKey(\n      \"raw\",\n      sharedKey,\n      AES_MODE_BB,\n      true,\n      [\"decrypt\"]\n    );\n    const plaintext = await wcryp.subtle.decrypt(\n      { name: AES_MODE_B, iv },\n      bSharedKey,\n      ciphertextWithTag\n    );\n    return new Uint8Array(plaintext);\n  } else {\n    const ciphertext = encoded.slice(12, -16);\n    const authTag = encoded.slice(-16);\n    const decipher = cryp.createDecipheriv(AES_MODE_N, sharedKey, iv);\n    decipher.setAuthTag(authTag);\n    const plaintext = decipher.update(ciphertext);\n    const res = Buffer.concat([plaintext, decipher.final()]);\n    return Uint8Array.from(res);\n  }\n}\n\n/**\n * Converts a typed array to unicode string in UTF-8 format.\n * @param {Uint8Array} byteArray\n * @returns {string}\n */\nfunction bytesToUTF8(byteArray) {\n  return new TextDecoder().decode(byteArray);\n}\n\nif (typeof exports !== \"undefined\") {\n  Object.defineProperty(exports, \"__esModule\", { value: true });\n  exports.decrypt = decrypt;\n  exports.encrypt = encrypt;\n  exports.bytesToUTF8 = bytesToUTF8;\n}\n"]},"metadata":{},"sourceType":"script"}