{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Pow = void 0;\n\nconst grpc_authentication_1 = require(\"@textile/grpc-authentication\");\n\nconst loglevel_1 = __importDefault(require(\"loglevel\"));\n\nconst api_1 = require(\"./api\");\n\nconst logger = loglevel_1.default.getLogger('pow');\n/**\n * Pow a client wrapper for interacting with the Textile Powergate API.\n * @example\n * Initialize the Bucket API and open an existing bucket (or create if new).\n * ```typescript\n * import { Pow, PrivateKey, UserAuth } from '@textile/hub'\n *\n * const checkHealth = async (auth: UserAuth, user: PrivateKey) => {\n *   const pow = Pow.withUserAuth(auth)\n *   // Scope the API to the current user\n *   await pow.getToken(user)\n *   // List adrs\n *   const health = pow.health()\n * }\n * ```\n */\n\nclass Pow extends grpc_authentication_1.GrpcAuthentication {\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.copyAuth}\n   *\n   * @example\n   * Copy an authenticated Users api instance to Pow.\n   * ```typescript\n   * import { Pow, Users } from '@textile/hub'\n   *\n   * const usersToPow = async (user: Users) => {\n   *   const pow = Pow.copyAuth(user)\n   *   return pow\n   * }\n   * ```\n   *\n   * @example\n   * Copy an authenticated Pow api instance to Users.\n   * ```typescript\n   * import { Pow, Users } from '@textile/hub'\n   *\n   * const powToUsers = async (pow: Pow) => {\n   *   const user = Users.copyAuth(pow)\n   *   return user\n   * }\n   * ```\n   */\n  static copyAuth(auth, options) {\n    return new Pow(auth.context, options === null || options === void 0 ? void 0 : options.debug);\n  }\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.withUserAuth}\n   *\n   * @example\n   * ```@typescript\n   * import { Pow, UserAuth } from '@textile/hub'\n   *\n   * async function example (userAuth: UserAuth) {\n   *   const pow = await Pow.withUserAuth(userAuth)\n   * }\n   * ```\n   */\n\n\n  static withUserAuth(auth, options) {\n    const res = super.withUserAuth(auth, options);\n    return this.copyAuth(res, options);\n  }\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.withKeyInfo}\n   *\n   * @example\n   * ```@typescript\n   * import { Pow, KeyInfo } from '@textile/hub'\n   *\n   * async function start () {\n   *   const keyInfo: KeyInfo = {\n   *     key: '<api key>',\n   *     secret: '<api secret>'\n   *   }\n   *   const pow = await Pow.withKeyInfo(keyInfo)\n   * }\n   * ```\n   */\n\n\n  static withKeyInfo(key, options) {\n    const _super = Object.create(null, {\n      withKeyInfo: {\n        get: () => super.withKeyInfo\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const auth = yield _super.withKeyInfo.call(this, key, options);\n      return this.copyAuth(auth, options);\n    });\n  }\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.getToken}\n   *\n   * @example\n   * ```@typescript\n   * import { Pow, PrivateKey } from '@textile/hub'\n   *\n   * async function example (pow: Pow, identity: PrivateKey) {\n   *   const token = await pow.getToken(identity)\n   *   return token // already added to `pow` scope\n   * }\n   * ```\n   */\n\n\n  getToken(identity) {\n    const _super = Object.create(null, {\n      getToken: {\n        get: () => super.getToken\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      return _super.getToken.call(this, identity);\n    });\n  }\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.getTokenChallenge}\n   *\n   * @example\n   * ```typescript\n   * import { Pow, PrivateKey } from '@textile/hub'\n   *\n   * async function example (pow: Pow, identity: PrivateKey) {\n   *   const token = await pow.getTokenChallenge(\n   *     identity.public.toString(),\n   *     (challenge: Uint8Array) => {\n   *       return new Promise((resolve, reject) => {\n   *         // This is where you should program PrivateKey to respond to challenge\n   *         // Read more here: https://docs.textile.io/tutorials/hub/production-auth/\n   *       })\n   *     }\n   *   )\n   *   return token\n   * }\n   * ```\n   */\n\n\n  getTokenChallenge(publicKey, callback) {\n    const _super = Object.create(null, {\n      getTokenChallenge: {\n        get: () => super.getTokenChallenge\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      return _super.getTokenChallenge.call(this, publicKey, callback);\n    });\n  }\n  /**\n   * @beta\n   */\n\n\n  health() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.health(this);\n    });\n  }\n  /**\n   * Gets the Powergate node Filecoin peers. This method\n   * requires a valid user, token, and session.\n   * @beta\n   *\n   * @example\n   * ```typescript\n   * import { Pow } from \"@textile/hub\"\n   *\n   * async function example(pow: Pow) {\n   *    const peersResp = await pow.peers()\n   * }\n   * ```\n   */\n\n\n  peers() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.peers(this);\n    });\n  }\n  /**\n   * Find a peer by peer id.\n   * @beta\n   * @param peerId The peer id of the peer you want to find.\n   */\n\n\n  findPeer(peerId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.findPeer(this, peerId);\n    });\n  }\n  /**\n   * Query for network connectedness to the specified peer.\n   * @beta\n   * @param peerId The peer id to test connectedness for.\n   */\n\n\n  connectedness(peerId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.connectedness(this, peerId);\n    });\n  }\n  /**\n   * List all Filecoin wallet addresses associated with the current account or user.\n   * @beta\n   */\n\n\n  addrs() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.addrs(this);\n    });\n  }\n  /**\n   * Create a new Filecoin wallet address.\n   * @beta\n   * @param name A human readable name for the wallet address.\n   * @param type The type of address to create, wither bls or secp256k1.\n   * @param makeDefault Whether or not to make the new address the default address to use in Filecoin transactions.\n   */\n\n\n  newAddr(name, type, makeDefault) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.newAddr(this, name, type, makeDefault);\n    });\n  }\n  /**\n   * Query for general information about Powergate associated with the current account/user.\n   * @beta\n   */\n\n\n  info() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.info(this);\n    });\n  }\n  /**\n   * Show information about data stored in Powergate.\n   * @beta\n   * @param cid The cid of the data to show information about.\n   */\n\n\n  show(cid) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.show(this, cid);\n    });\n  }\n  /**\n   * Show information for all data stored in Powergate for the current account/user.\n   * @beta\n   */\n\n\n  showAll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.showAll(this);\n    });\n  }\n  /**\n   * Query for Filecoin storage deal records for the current account/user.\n   * @beta\n   * @param config A config object to control the behavior of the query.\n   */\n\n\n  listStorageDealRecords(config) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.listStorageDealRecords(this, config);\n    });\n  }\n  /**\n   * Query for Filecoin retrieval deal records for the current account/user.\n   * @beta\n   * @param config A config object to control the behavior of the query.\n   */\n\n\n  listRetrievalDealRecords(config) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.listRetrievalDealRecords(this, config);\n    });\n  }\n  /**\n   * Get the balance for any wallet address.\n   * @beta\n   * @param address The wallet address to check the balance of.\n   */\n\n\n  balance(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.balance(this, address);\n    });\n  }\n\n}\n\nexports.Pow = Pow;","map":{"version":3,"sources":["../src/pow.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Pow = void 0;\nconst grpc_authentication_1 = require(\"@textile/grpc-authentication\");\nconst loglevel_1 = __importDefault(require(\"loglevel\"));\nconst api_1 = require(\"./api\");\nconst logger = loglevel_1.default.getLogger('pow');\n/**\n * Pow a client wrapper for interacting with the Textile Powergate API.\n * @example\n * Initialize the Bucket API and open an existing bucket (or create if new).\n * ```typescript\n * import { Pow, PrivateKey, UserAuth } from '@textile/hub'\n *\n * const checkHealth = async (auth: UserAuth, user: PrivateKey) => {\n *   const pow = Pow.withUserAuth(auth)\n *   // Scope the API to the current user\n *   await pow.getToken(user)\n *   // List adrs\n *   const health = pow.health()\n * }\n * ```\n */\nclass Pow extends grpc_authentication_1.GrpcAuthentication {\n    /**\n     * {@inheritDoc @textile/hub#GrpcAuthentication.copyAuth}\n     *\n     * @example\n     * Copy an authenticated Users api instance to Pow.\n     * ```typescript\n     * import { Pow, Users } from '@textile/hub'\n     *\n     * const usersToPow = async (user: Users) => {\n     *   const pow = Pow.copyAuth(user)\n     *   return pow\n     * }\n     * ```\n     *\n     * @example\n     * Copy an authenticated Pow api instance to Users.\n     * ```typescript\n     * import { Pow, Users } from '@textile/hub'\n     *\n     * const powToUsers = async (pow: Pow) => {\n     *   const user = Users.copyAuth(pow)\n     *   return user\n     * }\n     * ```\n     */\n    static copyAuth(auth, options) {\n        return new Pow(auth.context, options === null || options === void 0 ? void 0 : options.debug);\n    }\n    /**\n     * {@inheritDoc @textile/hub#GrpcAuthentication.withUserAuth}\n     *\n     * @example\n     * ```@typescript\n     * import { Pow, UserAuth } from '@textile/hub'\n     *\n     * async function example (userAuth: UserAuth) {\n     *   const pow = await Pow.withUserAuth(userAuth)\n     * }\n     * ```\n     */\n    static withUserAuth(auth, options) {\n        const res = super.withUserAuth(auth, options);\n        return this.copyAuth(res, options);\n    }\n    /**\n     * {@inheritDoc @textile/hub#GrpcAuthentication.withKeyInfo}\n     *\n     * @example\n     * ```@typescript\n     * import { Pow, KeyInfo } from '@textile/hub'\n     *\n     * async function start () {\n     *   const keyInfo: KeyInfo = {\n     *     key: '<api key>',\n     *     secret: '<api secret>'\n     *   }\n     *   const pow = await Pow.withKeyInfo(keyInfo)\n     * }\n     * ```\n     */\n    static withKeyInfo(key, options) {\n        const _super = Object.create(null, {\n            withKeyInfo: { get: () => super.withKeyInfo }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            const auth = yield _super.withKeyInfo.call(this, key, options);\n            return this.copyAuth(auth, options);\n        });\n    }\n    /**\n     * {@inheritDoc @textile/hub#GrpcAuthentication.getToken}\n     *\n     * @example\n     * ```@typescript\n     * import { Pow, PrivateKey } from '@textile/hub'\n     *\n     * async function example (pow: Pow, identity: PrivateKey) {\n     *   const token = await pow.getToken(identity)\n     *   return token // already added to `pow` scope\n     * }\n     * ```\n     */\n    getToken(identity) {\n        const _super = Object.create(null, {\n            getToken: { get: () => super.getToken }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            return _super.getToken.call(this, identity);\n        });\n    }\n    /**\n     * {@inheritDoc @textile/hub#GrpcAuthentication.getTokenChallenge}\n     *\n     * @example\n     * ```typescript\n     * import { Pow, PrivateKey } from '@textile/hub'\n     *\n     * async function example (pow: Pow, identity: PrivateKey) {\n     *   const token = await pow.getTokenChallenge(\n     *     identity.public.toString(),\n     *     (challenge: Uint8Array) => {\n     *       return new Promise((resolve, reject) => {\n     *         // This is where you should program PrivateKey to respond to challenge\n     *         // Read more here: https://docs.textile.io/tutorials/hub/production-auth/\n     *       })\n     *     }\n     *   )\n     *   return token\n     * }\n     * ```\n     */\n    getTokenChallenge(publicKey, callback) {\n        const _super = Object.create(null, {\n            getTokenChallenge: { get: () => super.getTokenChallenge }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            return _super.getTokenChallenge.call(this, publicKey, callback);\n        });\n    }\n    /**\n     * @beta\n     */\n    health() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.health(this);\n        });\n    }\n    /**\n     * Gets the Powergate node Filecoin peers. This method\n     * requires a valid user, token, and session.\n     * @beta\n     *\n     * @example\n     * ```typescript\n     * import { Pow } from \"@textile/hub\"\n     *\n     * async function example(pow: Pow) {\n     *    const peersResp = await pow.peers()\n     * }\n     * ```\n     */\n    peers() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.peers(this);\n        });\n    }\n    /**\n     * Find a peer by peer id.\n     * @beta\n     * @param peerId The peer id of the peer you want to find.\n     */\n    findPeer(peerId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.findPeer(this, peerId);\n        });\n    }\n    /**\n     * Query for network connectedness to the specified peer.\n     * @beta\n     * @param peerId The peer id to test connectedness for.\n     */\n    connectedness(peerId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.connectedness(this, peerId);\n        });\n    }\n    /**\n     * List all Filecoin wallet addresses associated with the current account or user.\n     * @beta\n     */\n    addrs() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.addrs(this);\n        });\n    }\n    /**\n     * Create a new Filecoin wallet address.\n     * @beta\n     * @param name A human readable name for the wallet address.\n     * @param type The type of address to create, wither bls or secp256k1.\n     * @param makeDefault Whether or not to make the new address the default address to use in Filecoin transactions.\n     */\n    newAddr(name, type, makeDefault) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.newAddr(this, name, type, makeDefault);\n        });\n    }\n    /**\n     * Query for general information about Powergate associated with the current account/user.\n     * @beta\n     */\n    info() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.info(this);\n        });\n    }\n    /**\n     * Show information about data stored in Powergate.\n     * @beta\n     * @param cid The cid of the data to show information about.\n     */\n    show(cid) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.show(this, cid);\n        });\n    }\n    /**\n     * Show information for all data stored in Powergate for the current account/user.\n     * @beta\n     */\n    showAll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.showAll(this);\n        });\n    }\n    /**\n     * Query for Filecoin storage deal records for the current account/user.\n     * @beta\n     * @param config A config object to control the behavior of the query.\n     */\n    listStorageDealRecords(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.listStorageDealRecords(this, config);\n        });\n    }\n    /**\n     * Query for Filecoin retrieval deal records for the current account/user.\n     * @beta\n     * @param config A config object to control the behavior of the query.\n     */\n    listRetrievalDealRecords(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.listRetrievalDealRecords(this, config);\n        });\n    }\n    /**\n     * Get the balance for any wallet address.\n     * @beta\n     * @param address The wallet address to check the balance of.\n     */\n    balance(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.balance(this, address);\n        });\n    }\n}\nexports.Pow = Pow;\n//# sourceMappingURL=pow.js.map"]},"metadata":{},"sourceType":"script"}