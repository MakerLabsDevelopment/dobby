{"ast":null,"code":"import { set, updateAll } from 'shades';\nimport { createSelector } from 'redux-bundler';\nimport { ThreadID } from '@textile/hub';\nexport default {\n  name: 'threads',\n  getReducer: () => {\n    const initialData = {\n      active: null,\n      loading: false,\n      data: null\n    };\n    return (state = initialData, {\n      type,\n      payload,\n      err\n    }) => {\n      if (type.startsWith('THREADS') && type.endsWith('_START')) {\n        return set('loading')(true)(state);\n      }\n\n      if (type === 'THREADS_RESET') {\n        return initialData;\n      }\n\n      if (type === 'THREADS_FETCH_SUCCESS') {\n        return updateAll(set('data')(payload.listList), set('loading')(false))(state);\n      }\n\n      if (type === 'THREADS_FETCH_FAILED') {\n        return updateAll(set('data')(null), set('loading')(false))(state);\n      }\n\n      if (type === 'THREADS_SET_ACTIVE') {\n        return updateAll(set('active')(payload))(state);\n      }\n\n      return state;\n    };\n  },\n  doThreadsFetch: client => {\n    return ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'THREADS_FETCH_START'\n      });\n      return client.listThreads().then(payload => {\n        return dispatch({\n          type: 'THREADS_FETCH_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'THREADS_FETCH_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doThreadsCreate: () => {\n    return async ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'THREADS_ADD_START'\n      });\n      const client = await store.selectAuthClient();\n      const threadId = client.newDB();\n      return threadId.then(payload => {\n        return dispatch({\n          type: 'THREADS_ADD_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'THREADS_ADD_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doThreadsSetActive: threadId => {\n    return async ({\n      dispatch,\n      store\n    }) => {\n      const {\n        authClient\n      } = store.select(['selectAuthClient']);\n      const collections = await authClient.listCollections(ThreadID.fromString(threadId));\n      const result = await dispatch({\n        type: 'THREADS_SET_ACTIVE',\n        payload: collections\n      });\n      return result;\n    };\n  },\n  reactThreadsPath: createSelector('selectThreadsActive', 'selectAuthClient', 'selectThreadsData', 'selectThreadsLoading', 'selectPathname', 'selectRouteParams', (active, client, data, loading, pathname, {\n    threadId\n  }) => {\n    if (client && active && pathname.match(/\\/threads/) && !loading && !threadId) {\n      return {\n        actionCreator: 'doThreadsSetActive',\n        args: [null]\n      };\n    }\n\n    if (client && data && !loading && threadId && (!active || threadId !== active.id)) {\n      console.log('OOOO');\n      return {\n        actionCreator: 'doThreadsSetActive',\n        args: [threadId]\n      };\n    }\n  }),\n  reactThreadsShouldFetch: createSelector('selectAuthClient', 'selectThreadsData', 'selectThreadsLoading', (authClient, threadsData, loading) => {\n    if (authClient && !threadsData && !loading) {\n      return {\n        actionCreator: 'doThreadsFetch',\n        args: [authClient]\n      };\n    }\n  }),\n  selectThreadsLoading: state => state.threads.loading,\n  selectThreadsData: state => state.threads.data,\n  selectThreadsActive: state => state.threads.active\n};","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/dobby/src/bundles/threads.js"],"names":["set","updateAll","createSelector","ThreadID","name","getReducer","initialData","active","loading","data","state","type","payload","err","startsWith","endsWith","listList","doThreadsFetch","client","dispatch","store","listThreads","then","catch","doThreadsCreate","selectAuthClient","threadId","newDB","doThreadsSetActive","authClient","select","collections","listCollections","fromString","result","reactThreadsPath","pathname","match","actionCreator","args","id","console","log","reactThreadsShouldFetch","threadsData","selectThreadsLoading","threads","selectThreadsData","selectThreadsActive"],"mappings":"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","sourcesContent":["import { set, updateAll } from 'shades'\nimport { createSelector } from 'redux-bundler'\nimport { ThreadID } from '@textile/hub'\n\nexport default {\n  name: 'threads',\n  getReducer: () => {\n    const initialData = {\n      active: null,\n      loading: false,\n      data: null\n    }\n    return (state = initialData, { type, payload, err }) => {\n      if (type.startsWith('THREADS') && type.endsWith('_START')) {\n        return set('loading')(true)(state)\n      }\n\n      if (type === 'THREADS_RESET') {\n        return initialData\n      }\n\n      if (type === 'THREADS_FETCH_SUCCESS') {\n        return updateAll(\n          set('data')(payload.listList),\n          set('loading')(false)\n        )(state)\n      }\n\n      if (type === 'THREADS_FETCH_FAILED') {\n        return updateAll(\n          set('data')(null),\n          set('loading')(false)\n        )(state)\n      }\n\n      if (type === 'THREADS_SET_ACTIVE') {\n        return updateAll(\n          set('active')(payload),\n        )(state)\n      }\n\n      return state\n    }\n  },\n  doThreadsFetch: (client) => {\n    return ({ dispatch, store }) => {\n      dispatch({ type: 'THREADS_FETCH_START' })\n      return client.listThreads().then((payload) => {\n        return dispatch({ type: 'THREADS_FETCH_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'THREADS_FETCH_FAILED', err })\n      })\n    }\n  },\n  doThreadsCreate: () => {\n    return async ({ dispatch, store }) => {\n      dispatch({ type: 'THREADS_ADD_START' })\n      const client = await store.selectAuthClient()\n      const threadId = client.newDB()\n      return threadId.then((payload) => {\n        return dispatch({ type: 'THREADS_ADD_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'THREADS_ADD_FAILED', err })\n      })\n    }\n  },\n  doThreadsSetActive: (threadId) => {\n    return async ({ dispatch, store }) => {\n      const { authClient } = store.select(['selectAuthClient'])\n      const collections = await authClient.listCollections(ThreadID.fromString(threadId))\n      const result = await dispatch({ type: 'THREADS_SET_ACTIVE', payload: collections })\n      return result\n    }\n  },\n  reactThreadsPath: createSelector(\n    'selectThreadsActive',\n    'selectAuthClient',\n    'selectThreadsData',\n    'selectThreadsLoading',\n    'selectPathname',\n    'selectRouteParams',\n    (active, client, data, loading, pathname, { threadId }) => {\n      if (client && active && pathname.match(/\\/threads/) && !loading && !threadId) {\n        return { actionCreator: 'doThreadsSetActive', args: [null] }\n      }\n      if (client && data && !loading && threadId && (\n        !active || threadId !== active.id\n      )) {\n        console.log('OOOO')\n        return { actionCreator: 'doThreadsSetActive', args: [threadId] }\n      }\n    },\n  ),\n  reactThreadsShouldFetch: createSelector(\n    'selectAuthClient',\n    'selectThreadsData',\n    'selectThreadsLoading',\n    (authClient, threadsData, loading) => {\n      if (authClient && !threadsData && !loading) {\n        return { actionCreator: 'doThreadsFetch', args: [authClient] }\n      }\n    },\n  ),\n  selectThreadsLoading: state => state.threads.loading,\n  selectThreadsData: state => state.threads.data,\n  selectThreadsActive: state => state.threads.active,\n}\n"]},"metadata":{},"sourceType":"module"}