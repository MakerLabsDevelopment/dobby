{"ast":null,"code":"var _jsxFileName = \"/Users/nassarhayat/apps/textiletable/dobby/src/table/Table.tsx\";\n// @ts-nocheck\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'redux-bundler-react';\nimport { useTable, usePagination } from 'react-table';\nimport './Table.css';\n\nconst Table = ({\n  collectionsActive\n}) => {\n  const [columns, setColumns] = useState([{\n    Header: name,\n    columns: [{\n      Header: 'Name',\n      accessor: 'name'\n    }, {\n      Header: 'Count',\n      accessor: 'count'\n    }]\n  }]);\n  const emptyRowObject = {\n    _id: Math.random().toString(36),\n    name: \"\",\n    count: 0\n  };\n  const [data, setData] = useState([]);\n  const [skipPageReset, setSkipPageReset] = useState(false);\n  useEffect(() => {\n    collectionsActive && setSchema(collectionsActive.schema);\n\n    if (collectionsData) {\n      setData(collectionsData.instancesList);\n    } else {\n      doCollectionsFetchData();\n    }\n  }, []);\n  useEffect(() => {\n    if (data.length > 1) {\n      doCollectionsUpdate(name, data);\n    }\n  }, [data]);\n\n  const updateMyData = async (rowIndex, columnId, value) => {\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return { ...old[rowIndex],\n          [columnId]: value\n        };\n      }\n\n      return row;\n    }));\n  };\n\n  const addRow = () => {\n    setData([...data, emptyRowObject]);\n    doCollectionsAddRow(name, emptyRowObject);\n  }; // const removeRow = async (instanceId: string) => {\n  //   doCollectionsDeleteRow(name, instanceId)\n  // }\n\n\n  const addColumn = async () => {\n    const newColData = {\n      Header: 'Field',\n      accessor: 'field'\n    };\n    setColumns(old => old.map(row => {\n      return {\n        Header: name,\n        columns: [...row.columns, newColData]\n      };\n    })); // @ts-ignore\n\n    schema.properties.field = {\n      type: 'string'\n    };\n    doCollectionsAddColumn(name, schema);\n  };\n\n  const EditableCell = ({\n    value: initialValue,\n    row: {\n      index\n    },\n    column: {\n      id\n    },\n    updateMyData\n  }) => {\n    const [value, setValue] = React.useState(initialValue);\n\n    const onChange = e => {\n      setValue(e.target.value);\n    };\n\n    const onBlur = () => {\n      updateMyData(index, id, value);\n    };\n\n    useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n    return /*#__PURE__*/React.createElement(\"input\", {\n      value: value,\n      onChange: onChange,\n      onBlur: onBlur,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    });\n  };\n\n  const defaultColumn = {\n    Cell: EditableCell\n  };\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    autoResetPage: !skipPageReset,\n    updateMyData\n  }, usePagination);\n  useEffect(() => {\n    setSkipPageReset(false);\n  }, [data]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/db\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, \"Database\"), /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }\n  }), column.render('Header')))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }), page.map(row => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 26\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, \"add row\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addColumn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, \"add column\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => gotoPage(0),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, '<<'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => previousPage(),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, '<'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => nextPage(),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }, '>'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => gotoPage(pageCount - 1),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }, '>>'), ' ', /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, \"Page\", ' ', /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }\n  }, pageIndex + 1, \" of \", pageOptions.length), ' '), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, \"| Go to page:\", ' ', /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: e => {\n      const page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  })), ' ', /*#__PURE__*/React.createElement(\"select\", {\n    value: pageSize,\n    onChange: e => {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, [10, 20, 30, 40, 50].map(pageSize => /*#__PURE__*/React.createElement(\"option\", {\n    key: pageSize,\n    value: pageSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, \"Show \", pageSize)))));\n};\n\nexport default connect('selectCollectionsActive', Table);","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/dobby/src/table/Table.tsx"],"names":["React","useEffect","useState","connect","useTable","usePagination","Table","collectionsActive","columns","setColumns","Header","name","accessor","emptyRowObject","_id","Math","random","toString","count","data","setData","skipPageReset","setSkipPageReset","setSchema","schema","collectionsData","instancesList","doCollectionsFetchData","length","doCollectionsUpdate","updateMyData","rowIndex","columnId","value","old","map","row","index","addRow","doCollectionsAddRow","addColumn","newColData","properties","field","type","doCollectionsAddColumn","EditableCell","initialValue","column","id","setValue","onChange","e","target","onBlur","defaultColumn","Cell","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","autoResetPage","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","getRowProps","cells","cell","getCellProps","Number","width"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport React, { useEffect, useState } from 'react'\nimport { connect } from 'redux-bundler-react'\nimport { useTable, usePagination, TableInstance } from 'react-table'\nimport './Table.css'\n\ntype TableProps = {\n  collectionsActive: any\n}\n\ntype EditabeCellProps = {\n  value: any,\n  row: any,\n  column: any,\n  updateMyData: any\n}\n\ntype Data = object\n\nconst Table = ({ collectionsActive }: TableProps) => {\n\n  const [columns, setColumns] = useState([\n      {\n        Header: name,\n        columns: [\n          {\n            Header: 'Name',\n            accessor: 'name',\n          },\n          {\n            Header: 'Count',\n            accessor: 'count',\n          },\n        ],\n      },\n    ],\n  )\n  const emptyRowObject = { _id: Math.random().toString(36), name: \"\", count: 0 }\n  const [data, setData] = useState([])\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  useEffect(() => {\n    collectionsActive && setSchema(collectionsActive.schema)\n    if (collectionsData) {\n      setData(collectionsData.instancesList)\n    } else {\n      doCollectionsFetchData()\n    }\n  }, [])\n\n  useEffect(() => {\n    if (data.length > 1) {\n      doCollectionsUpdate(name, data)\n    }\n  }, [data])\n\n  const updateMyData = async (rowIndex: number, columnId: string, value: any) => {\n    setSkipPageReset(true)\n    setData(old =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  const addRow = () => {\n    setData([...data, emptyRowObject])\n    doCollectionsAddRow(name, emptyRowObject)\n  }\n\n  // const removeRow = async (instanceId: string) => {\n  //   doCollectionsDeleteRow(name, instanceId)\n  // }\n\n  const addColumn = async () => {\n    const newColData = { Header: 'Field', accessor: 'field' }\n    setColumns(old =>\n      old.map((row) => {\n        return {\n          Header: name,\n          columns: [...row.columns, newColData]\n        }\n      })\n    )\n    // @ts-ignore\n    schema.properties.field = { type: 'string' }\n    doCollectionsAddColumn(name, schema)\n  }\n\n  const EditableCell = ({\n    value: initialValue,\n    row: { index },\n    column: { id },\n    updateMyData,\n  }: EditabeCellProps) => {\n    const [value, setValue] = React.useState(initialValue)\n\n    const onChange = (e: any) => {\n      setValue(e.target.value)\n    }\n\n    const onBlur = () => {\n      updateMyData(index, id, value)\n    }\n\n    useEffect(() => {\n      setValue(initialValue)\n    }, [initialValue])\n\n    return (<input value={value} onChange={onChange} onBlur={onBlur} />)\n  }\n\n  const defaultColumn = {\n    Cell: EditableCell,\n  }\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable<Data>(\n    {\n      columns,\n      data,\n      defaultColumn,\n      autoResetPage: !skipPageReset,\n      updateMyData,\n    },\n    usePagination\n  ) as TableInstance<object>\n\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <>\n      <a href='/db'>Database</a>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup: any) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column: any) => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row: any) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell: any) => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <button onClick={addRow}>\n        add row\n      </button>\n      <button onClick={addColumn}>\n        add column\n      </button>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  )\n}\n\nexport default connect(\n  'selectCollectionsActive',\n  Table\n)\n"]},"metadata":{},"sourceType":"module"}