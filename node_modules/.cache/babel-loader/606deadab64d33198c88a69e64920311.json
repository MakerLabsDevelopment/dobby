{"ast":null,"code":"let node8 = false;\n\nif ('process' in global) {\n  node8 = /^v8\\./.test(global.process.version);\n}\n\nmodule.exports = function init(window) {\n  function execGlobal(name, value) {\n    return window[name](value);\n  }\n\n  const crypto = execGlobal('require', 'crypto');\n\n  function randomFillUint32(input, bytes) {\n    const len = input.length;\n\n    for (let i = 0, o = 0; i < len; i++) {\n      input[i] = bytes[o++] << 24 | bytes[o++] << 16 | bytes[o++] << 8 | bytes[o++];\n    }\n\n    return input;\n  }\n\n  function randomFillInt32(input, bytes) {\n    const len = input.length;\n\n    for (let i = 0, o = 0; i < len; i++) {\n      input[i] = (bytes[o++] << 24 | bytes[o++] << 16 | bytes[o++] << 8 | bytes[o++]) - 0x80000000;\n    }\n\n    return input;\n  }\n\n  function randomFillUint16(input, bytes) {\n    const len = input.length;\n\n    for (let i = 0, o = 0; i < len; i++) {\n      input[i] = bytes[o++] << 8 | bytes[o++];\n    }\n\n    return input;\n  }\n\n  function randomFillInt16(input, bytes) {\n    const len = input.length;\n\n    for (let i = 0, o = 0; i < len; i++) {\n      input[i] = (bytes[o++] << 8 | bytes[o++]) - 0x8000;\n    }\n\n    return input;\n  }\n\n  function randomFillUint8(input, bytes) {\n    const len = input.length;\n\n    for (let i = 0; i < len; i++) {\n      input[i] = bytes[i];\n    }\n\n    return input;\n  }\n\n  function randomFillInt8(input, bytes) {\n    const len = input.length;\n\n    for (let i = 0; i < len; i++) {\n      input[i] = bytes[i] - 0x80;\n    }\n\n    return input;\n  }\n\n  if (node8) {\n    return function randomFillNode8(input) {\n      if (input instanceof Uint8Array) {\n        return crypto.randomFillSync(input);\n      }\n\n      const bytes = crypto.randomBytes(input.byteLength);\n\n      if (input instanceof Uint32Array) {\n        return randomFillUint32(input, bytes);\n      }\n\n      if (input instanceof Uint16Array) {\n        return randomFillUint16(input, bytes);\n      }\n\n      if (input instanceof Int32Array) {\n        return randomFillInt32(input, bytes);\n      }\n\n      if (input instanceof Int16Array) {\n        return randomFillInt16(input, bytes);\n      }\n\n      if (input instanceof Int8Array) {\n        return randomFillInt8(input, bytes);\n      }\n\n      if (input instanceof Uint8ClampedArray) {\n        return randomFillUint8(input, bytes);\n      }\n\n      throw new Error('invalid type');\n    };\n  }\n\n  return crypto.randomFillSync || function randomFillClassic(input) {\n    const bytes = crypto.randomBytes(input.byteLength);\n\n    if (input instanceof Uint8Array) {\n      return randomFillUint8(input, bytes);\n    }\n\n    if (input instanceof Uint32Array) {\n      return randomFillUint32(input, bytes);\n    }\n\n    if (input instanceof Uint16Array) {\n      return randomFillUint16(input, bytes);\n    }\n\n    if (input instanceof Int32Array) {\n      return randomFillInt32(input, bytes);\n    }\n\n    if (input instanceof Int16Array) {\n      return randomFillInt16(input, bytes);\n    }\n\n    if (input instanceof Int8Array) {\n      return randomFillInt8(input, bytes);\n    }\n\n    if (input instanceof Uint8ClampedArray) {\n      return randomFillUint8(input, bytes);\n    }\n\n    throw new Error('invalid type');\n  };\n};","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/js-examples/bucket-photo-gallery/node_modules/@consento/sync-randombytes/index-crypto.js"],"names":["node8","global","test","process","version","module","exports","init","window","execGlobal","name","value","crypto","randomFillUint32","input","bytes","len","length","i","o","randomFillInt32","randomFillUint16","randomFillInt16","randomFillUint8","randomFillInt8","randomFillNode8","Uint8Array","randomFillSync","randomBytes","byteLength","Uint32Array","Uint16Array","Int32Array","Int16Array","Int8Array","Uint8ClampedArray","Error","randomFillClassic"],"mappings":"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","sourcesContent":["let node8 = false\n\nif ('process' in global) {\n  node8 = /^v8\\./.test(global.process.version)\n}\n\nmodule.exports = function init (window) {\n  function execGlobal (name, value) {\n    return window[name](value)\n  }\n  const crypto = execGlobal('require', 'crypto')\n\n  function randomFillUint32 (input, bytes) {\n    const len = input.length\n    for (let i = 0, o = 0; i < len; i++) {\n      input[i] = (\n        (bytes[o++] << 24) |\n        (bytes[o++] << 16) |\n        (bytes[o++] << 8) |\n        bytes[o++]\n      )\n    }\n    return input\n  }\n\n  function randomFillInt32 (input, bytes) {\n    const len = input.length\n    for (let i = 0, o = 0; i < len; i++) {\n      input[i] = (\n        (bytes[o++] << 24) |\n        (bytes[o++] << 16) |\n        (bytes[o++] << 8) |\n        bytes[o++]\n      ) - 0x80000000\n    }\n    return input\n  }\n\n  function randomFillUint16 (input, bytes) {\n    const len = input.length\n    for (let i = 0, o = 0; i < len; i++) {\n      input[i] = (bytes[o++] << 8) | bytes[o++]\n    }\n    return input\n  }\n\n  function randomFillInt16 (input, bytes) {\n    const len = input.length\n    for (let i = 0, o = 0; i < len; i++) {\n      input[i] = ((bytes[o++] << 8) | bytes[o++]) - 0x8000\n    }\n    return input\n  }\n\n  function randomFillUint8 (input, bytes) {\n    const len = input.length\n    for (let i = 0; i < len; i++) {\n      input[i] = bytes[i]\n    }\n    return input\n  }\n\n  function randomFillInt8 (input, bytes) {\n    const len = input.length\n    for (let i = 0; i < len; i++) {\n      input[i] = bytes[i] - 0x80\n    }\n    return input\n  }\n\n  if (node8) {\n    return function randomFillNode8 (input) {\n      if (input instanceof Uint8Array) {\n        return crypto.randomFillSync(input)\n      }\n      const bytes = crypto.randomBytes(input.byteLength)\n      if (input instanceof Uint32Array) {\n        return randomFillUint32(input, bytes)\n      }\n      if (input instanceof Uint16Array) {\n        return randomFillUint16(input, bytes)\n      }\n      if (input instanceof Int32Array) {\n        return randomFillInt32(input, bytes)\n      }\n      if (input instanceof Int16Array) {\n        return randomFillInt16(input, bytes)\n      }\n      if (input instanceof Int8Array) {\n        return randomFillInt8(input, bytes)\n      }\n      if (input instanceof Uint8ClampedArray) {\n        return randomFillUint8(input, bytes)\n      }\n      throw new Error('invalid type')\n    }\n  }\n\n  return crypto.randomFillSync || function randomFillClassic (input) {\n    const bytes = crypto.randomBytes(input.byteLength)\n    if (input instanceof Uint8Array) {\n      return randomFillUint8(input, bytes)\n    }\n    if (input instanceof Uint32Array) {\n      return randomFillUint32(input, bytes)\n    }\n    if (input instanceof Uint16Array) {\n      return randomFillUint16(input, bytes)\n    }\n    if (input instanceof Int32Array) {\n      return randomFillInt32(input, bytes)\n    }\n    if (input instanceof Int16Array) {\n      return randomFillInt16(input, bytes)\n    }\n    if (input instanceof Int8Array) {\n      return randomFillInt8(input, bytes)\n    }\n    if (input instanceof Uint8ClampedArray) {\n      return randomFillUint8(input, bytes)\n    }\n    throw new Error('invalid type')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}