{"ast":null,"code":"var _jsxFileName = \"/Users/nassarhayat/apps/textiletable/dobby/src/components/ThreadScreen.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'redux-bundler-react';\nimport BaseScreen from './BaseScreen';\nimport { Button } from 'semantic-ui-react';\nimport Table from './table/Table';\nimport './ThreadScreen.css';\n\nconst ThreadScreen = ({\n  authClient,\n  threadsActiveCollections,\n  doCollectionsCreate,\n  doThreadsSetActive,\n  doUpdateUrl,\n  routeParams\n}) => {\n  const [name, setName] = useState('');\n  const threadId = routeParams.threadId;\n  useEffect(() => {\n    const setup = async () => {\n      if (threadId && authClient && !threadsActiveCollections) {\n        doThreadsSetActive(threadId);\n      }\n\n      if (threadsActiveCollections) {\n        doUpdateUrl(`/threads/${threadId}/${threadsActiveCollections[0].name}`);\n      }\n    };\n\n    setup();\n  }, [threadsActiveCollections, authClient]);\n  return /*#__PURE__*/React.createElement(BaseScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"optionsRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, threadsActiveCollections && threadsActiveCollections.map((collection, index) => /*#__PURE__*/React.createElement(\"a\", {\n    key: index,\n    className: \"tableButton\",\n    href: `/threads/${threadId}/${collection.name}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, collection.name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"nameInput\",\n    placeholder: \"table name\",\n    type: \"text\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"ui primary button\",\n    onClick: () => doCollectionsCreate(name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, \"Create\"))), threadsActiveCollections && /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default connect('doUpdateUrl', 'doThreadsCreate', 'doThreadsSetActive', 'doCollectionsCreate', 'selectAuthClient', 'selectThreadsActiveCollections', 'selectRouteParams', ThreadScreen);","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/dobby/src/components/ThreadScreen.tsx"],"names":["React","useState","useEffect","connect","BaseScreen","Button","Table","ThreadScreen","authClient","threadsActiveCollections","doCollectionsCreate","doThreadsSetActive","doUpdateUrl","routeParams","name","setName","threadId","setup","map","collection","index","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAO,oBAAP;;AAYA,MAAMC,YAAY,GAAG,CAAC;AACpBC,EAAAA,UADoB;AAEpBC,EAAAA,wBAFoB;AAGpBC,EAAAA,mBAHoB;AAIpBC,EAAAA,kBAJoB;AAKpBC,EAAAA,WALoB;AAMpBC,EAAAA;AANoB,CAAD,KAOC;AACpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAS,EAAT,CAAhC;AACA,QAAMe,QAAQ,GAAGH,WAAW,CAACG,QAA7B;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,KAAK,GAAG,YAAY;AACxB,UAAID,QAAQ,IAAIR,UAAZ,IAA0B,CAACC,wBAA/B,EAAyD;AACvDE,QAAAA,kBAAkB,CAACK,QAAD,CAAlB;AACD;;AACD,UAAIP,wBAAJ,EAA8B;AAC5BG,QAAAA,WAAW,CAAE,YAAWI,QAAS,IAAGP,wBAAwB,CAAC,CAAD,CAAxB,CAA4BK,IAAK,EAA1D,CAAX;AACD;AACF,KAPD;;AAQAG,IAAAA,KAAK;AACN,GAVQ,EAUN,CAACR,wBAAD,EAA2BD,UAA3B,CAVM,CAAT;AAYA,sBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,wBAAwB,IAAIA,wBAAwB,CAACS,GAAzB,CAA6B,CAACC,UAAD,EAAkBC,KAAlB,kBACxD;AACE,IAAA,GAAG,EAAEA,KADP;AAEE,IAAA,SAAS,EAAC,aAFZ;AAGE,IAAA,IAAI,EAAG,YAAWJ,QAAS,IAAGG,UAAU,CAACL,IAAK,EAHhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGK,UAAU,CAACL,IALd,CAD2B,CAD/B,eAUE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,SAAS,EAAC,WAAjB;AAA6B,IAAA,WAAW,EAAC,YAAzC;AAAsD,IAAA,IAAI,EAAC,MAA3D;AAAkE,IAAA,KAAK,EAAEA,IAAzE;AAA+E,IAAA,QAAQ,EAAEO,CAAC,IAAIN,OAAO,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,mBAAlB;AAAsC,IAAA,OAAO,EAAE,MAAMb,mBAAmB,CAACI,IAAD,CAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAVF,CADF,EAgBGL,wBAAwB,iBACvB,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBJ,CADF;AAsBD,CA7CD;;AA+CA,eAAeN,OAAO,CACpB,aADoB,EAEpB,iBAFoB,EAGpB,oBAHoB,EAIpB,qBAJoB,EAKpB,kBALoB,EAMpB,gCANoB,EAOpB,mBAPoB,EAQpBI,YARoB,CAAtB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { connect } from 'redux-bundler-react'\nimport BaseScreen from './BaseScreen'\nimport { Button } from 'semantic-ui-react'\nimport Table from './table/Table'\nimport './ThreadScreen.css'\n\n\ninterface IThreadsScreen {\n  authClient: any\n  threadsActiveCollections: any\n  doCollectionsCreate: (name: string) => any\n  doThreadsSetActive: (threadId: string) => any\n  doUpdateUrl: (url: string) => any\n  routeParams: any\n}\n\nconst ThreadScreen = ({\n  authClient,\n  threadsActiveCollections,\n  doCollectionsCreate,\n  doThreadsSetActive,\n  doUpdateUrl,\n  routeParams\n}: IThreadsScreen) => {\n  const [name, setName] = useState<string>('')\n  const threadId = routeParams.threadId\n\n  useEffect(() => {\n    const setup = async () => {\n      if (threadId && authClient && !threadsActiveCollections) {\n        doThreadsSetActive(threadId)\n      }\n      if (threadsActiveCollections) {\n        doUpdateUrl(`/threads/${threadId}/${threadsActiveCollections[0].name}`)\n      }\n    }\n    setup()\n  }, [threadsActiveCollections, authClient])\n\n  return (\n    <BaseScreen>\n      <div className='optionsRow'>\n        {threadsActiveCollections && threadsActiveCollections.map((collection: any, index: number) => (\n          <a\n            key={index}\n            className='tableButton'\n            href={`/threads/${threadId}/${collection.name}`}\n          >\n            {collection.name}\n          </a>\n        ))}\n        <div className=\"inputContainer\">\n          <input className='nameInput' placeholder='table name' type='text' value={name} onChange={e => setName(e.target.value)}/>\n          <Button className='ui primary button' onClick={() => doCollectionsCreate(name)}>Create</Button>\n        </div>\n      </div>\n      {threadsActiveCollections && (\n        <Table />\n      )}\n    </BaseScreen>\n  )\n}\n\nexport default connect(\n  'doUpdateUrl',\n  'doThreadsCreate',\n  'doThreadsSetActive',\n  'doCollectionsCreate',\n  'selectAuthClient',\n  'selectThreadsActiveCollections',\n  'selectRouteParams',\n  ThreadScreen\n)\n"]},"metadata":{},"sourceType":"module"}