{"ast":null,"code":"// package: health.rpc\n// file: health/rpc/rpc.proto\nvar health_rpc_rpc_pb = require(\"../../health/rpc/rpc_pb\");\n\nvar grpc = require(\"@improbable-eng/grpc-web\").grpc;\n\nvar RPCService = function () {\n  function RPCService() {}\n\n  RPCService.serviceName = \"health.rpc.RPCService\";\n  return RPCService;\n}();\n\nRPCService.Check = {\n  methodName: \"Check\",\n  service: RPCService,\n  requestStream: false,\n  responseStream: false,\n  requestType: health_rpc_rpc_pb.CheckRequest,\n  responseType: health_rpc_rpc_pb.CheckResponse\n};\nexports.RPCService = RPCService;\n\nfunction RPCServiceClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\n\nRPCServiceClient.prototype.check = function check(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(RPCService.Check, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nexports.RPCServiceClient = RPCServiceClient;","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/dobby/node_modules/@textile/grpc-powergate-client/dist/health/rpc/rpc_pb_service.js"],"names":["health_rpc_rpc_pb","require","grpc","RPCService","serviceName","Check","methodName","service","requestStream","responseStream","requestType","CheckRequest","responseType","CheckResponse","exports","RPCServiceClient","serviceHost","options","prototype","check","requestMessage","metadata","callback","arguments","length","client","unary","request","host","transport","debug","onEnd","response","status","Code","OK","err","Error","statusMessage","code","trailers","message","cancel","close"],"mappings":"AAAA;AACA;AAEA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,yBAAD,CAA/B;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,0BAAD,CAAP,CAAoCC,IAA/C;;AAEA,IAAIC,UAAU,GAAI,YAAY;AAC5B,WAASA,UAAT,GAAsB,CAAE;;AACxBA,EAAAA,UAAU,CAACC,WAAX,GAAyB,uBAAzB;AACA,SAAOD,UAAP;AACD,CAJiB,EAAlB;;AAMAA,UAAU,CAACE,KAAX,GAAmB;AACjBC,EAAAA,UAAU,EAAE,OADK;AAEjBC,EAAAA,OAAO,EAAEJ,UAFQ;AAGjBK,EAAAA,aAAa,EAAE,KAHE;AAIjBC,EAAAA,cAAc,EAAE,KAJC;AAKjBC,EAAAA,WAAW,EAAEV,iBAAiB,CAACW,YALd;AAMjBC,EAAAA,YAAY,EAAEZ,iBAAiB,CAACa;AANf,CAAnB;AASAC,OAAO,CAACX,UAAR,GAAqBA,UAArB;;AAEA,SAASY,gBAAT,CAA0BC,WAA1B,EAAuCC,OAAvC,EAAgD;AAC9C,OAAKD,WAAL,GAAmBA,WAAnB;AACA,OAAKC,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACD;;AAEDF,gBAAgB,CAACG,SAAjB,CAA2BC,KAA3B,GAAmC,SAASA,KAAT,CAAeC,cAAf,EAA+BC,QAA/B,EAAyCC,QAAzC,EAAmD;AACpF,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,QAAQ,GAAGC,SAAS,CAAC,CAAD,CAApB;AACD;;AACD,MAAIE,MAAM,GAAGvB,IAAI,CAACwB,KAAL,CAAWvB,UAAU,CAACE,KAAtB,EAA6B;AACxCsB,IAAAA,OAAO,EAAEP,cAD+B;AAExCQ,IAAAA,IAAI,EAAE,KAAKZ,WAF6B;AAGxCK,IAAAA,QAAQ,EAAEA,QAH8B;AAIxCQ,IAAAA,SAAS,EAAE,KAAKZ,OAAL,CAAaY,SAJgB;AAKxCC,IAAAA,KAAK,EAAE,KAAKb,OAAL,CAAaa,KALoB;AAMxCC,IAAAA,KAAK,EAAE,UAAUC,QAAV,EAAoB;AACzB,UAAIV,QAAJ,EAAc;AACZ,YAAIU,QAAQ,CAACC,MAAT,KAAoB/B,IAAI,CAACgC,IAAL,CAAUC,EAAlC,EAAsC;AACpC,cAAIC,GAAG,GAAG,IAAIC,KAAJ,CAAUL,QAAQ,CAACM,aAAnB,CAAV;AACAF,UAAAA,GAAG,CAACG,IAAJ,GAAWP,QAAQ,CAACC,MAApB;AACAG,UAAAA,GAAG,CAACf,QAAJ,GAAeW,QAAQ,CAACQ,QAAxB;AACAlB,UAAAA,QAAQ,CAACc,GAAD,EAAM,IAAN,CAAR;AACD,SALD,MAKO;AACLd,UAAAA,QAAQ,CAAC,IAAD,EAAOU,QAAQ,CAACS,OAAhB,CAAR;AACD;AACF;AACF;AAjBuC,GAA7B,CAAb;AAmBA,SAAO;AACLC,IAAAA,MAAM,EAAE,YAAY;AAClBpB,MAAAA,QAAQ,GAAG,IAAX;AACAG,MAAAA,MAAM,CAACkB,KAAP;AACD;AAJI,GAAP;AAMD,CA7BD;;AA+BA7B,OAAO,CAACC,gBAAR,GAA2BA,gBAA3B","sourcesContent":["// package: health.rpc\n// file: health/rpc/rpc.proto\n\nvar health_rpc_rpc_pb = require(\"../../health/rpc/rpc_pb\");\nvar grpc = require(\"@improbable-eng/grpc-web\").grpc;\n\nvar RPCService = (function () {\n  function RPCService() {}\n  RPCService.serviceName = \"health.rpc.RPCService\";\n  return RPCService;\n}());\n\nRPCService.Check = {\n  methodName: \"Check\",\n  service: RPCService,\n  requestStream: false,\n  responseStream: false,\n  requestType: health_rpc_rpc_pb.CheckRequest,\n  responseType: health_rpc_rpc_pb.CheckResponse\n};\n\nexports.RPCService = RPCService;\n\nfunction RPCServiceClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\n\nRPCServiceClient.prototype.check = function check(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(RPCService.Check, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nexports.RPCServiceClient = RPCServiceClient;\n\n"]},"metadata":{},"sourceType":"script"}