{"ast":null,"code":"var _jsxFileName = \"/Users/nassarhayat/apps/textiletable/sushitable/src/Table.tsx\";\n// @ts-nocheck\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport './Table.css';\n\nconst Table = ({\n  threadId,\n  client,\n  name\n}) => {\n  const [schema, setSchema] = useState({\n    $schema: 'http://json-schema.org/draft-07/schema#',\n    title: name,\n    type: 'object',\n    properties: {\n      _id: {\n        type: 'string'\n      },\n      name: {\n        type: 'string'\n      },\n      missions: {\n        type: 'number',\n        minimum: 0\n      }\n    }\n  });\n  const [columns, setColumns] = useState([{\n    Header: name,\n    columns: [{\n      Header: 'Name',\n      accessor: 'name'\n    }, {\n      Header: 'Missions',\n      accessor: 'missions'\n    }]\n  }]);\n  const emptyRowObject = {\n    _id: Math.random().toString(36),\n    name: \"\",\n    missions: 0\n  };\n  const [data, setData] = useState([emptyRowObject]);\n  const [skipPageReset, setSkipPageReset] = useState(false);\n  const [activeCollection, setActiveCollection] = useState(false);\n  useEffect(() => {\n    const existingCollection = async () => {\n      const clientInfo = await client.getCollectionInfo(threadId, name);\n      setSchema(clientInfo.schema);\n      const list = await client.find(threadId, name, {});\n      setData(list.instancesList);\n    };\n\n    existingCollection().catch(async () => {\n      await client.newCollection(threadId, name, schema);\n      await client.create(threadId, name, data);\n    });\n    setActiveCollection(true);\n  }, [client, threadId, name, data, schema]);\n  useEffect(() => {\n    if (data.length > 1) {\n      saveCollectionUpdates();\n    }\n  }, [data]);\n\n  const updateMyData = async (rowIndex, columnId, value) => {\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return { ...old[rowIndex],\n          [columnId]: value\n        };\n      }\n\n      return row;\n    }));\n  };\n\n  const saveCollectionUpdates = async () => {\n    await client.save(threadId, name, data);\n  };\n\n  const addRow = () => {\n    setData([...data, emptyRowObject]);\n    client.create(threadId, name, [emptyRowObject]);\n  }; // const removeRow = async (instanceId: string) => {\n  //   client.delete(threadId, name, [instanceId])\n  // }\n\n\n  const addColumn = async () => {\n    const newColData = {\n      Header: 'Field',\n      accessor: 'field'\n    };\n    setColumns(old => old.map(row => {\n      return {\n        Header: name,\n        columns: [...row.columns, newColData]\n      };\n    })); // @ts-ignore\n\n    schema.properties.field = {\n      type: 'string'\n    };\n    client.updateCollection(threadId, name, schema);\n  };\n\n  const EditableCell = ({\n    value: initialValue,\n    row: {\n      index\n    },\n    column: {\n      id\n    },\n    updateMyData\n  }) => {\n    const [value, setValue] = React.useState(initialValue);\n\n    const onChange = e => {\n      setValue(e.target.value);\n    };\n\n    const onBlur = () => {\n      updateMyData(index, id, value);\n    };\n\n    useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n    return /*#__PURE__*/React.createElement(\"input\", {\n      value: value,\n      onChange: onChange,\n      onBlur: onBlur,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    });\n  };\n\n  const defaultColumn = {\n    Cell: EditableCell\n  };\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    autoResetPage: !skipPageReset,\n    updateMyData\n  }, usePagination);\n  useEffect(() => {\n    setSkipPageReset(false);\n  }, [data]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }), column.render('Header')))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }), page.map(row => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 26\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }, \"add row\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addColumn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }, \"add column\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => gotoPage(0),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }, '<<'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => previousPage(),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }, '<'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => nextPage(),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, '>'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => gotoPage(pageCount - 1),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }, '>>'), ' ', /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, \"Page\", ' ', /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }, pageIndex + 1, \" of \", pageOptions.length), ' '), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }, \"| Go to page:\", ' ', /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: e => {\n      const page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  })), ' ', /*#__PURE__*/React.createElement(\"select\", {\n    value: pageSize,\n    onChange: e => {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, [10, 20, 30, 40, 50].map(pageSize => /*#__PURE__*/React.createElement(\"option\", {\n    key: pageSize,\n    value: pageSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }\n  }, \"Show \", pageSize)))));\n};\n\nexport default Table;","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/sushitable/src/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","Table","threadId","client","name","schema","setSchema","$schema","title","type","properties","_id","missions","minimum","columns","setColumns","Header","accessor","emptyRowObject","Math","random","toString","data","setData","skipPageReset","setSkipPageReset","activeCollection","setActiveCollection","existingCollection","clientInfo","getCollectionInfo","list","find","instancesList","catch","newCollection","create","length","saveCollectionUpdates","updateMyData","rowIndex","columnId","value","old","map","row","index","save","addRow","addColumn","newColData","field","updateCollection","EditableCell","initialValue","column","id","setValue","onChange","e","target","onBlur","defaultColumn","Cell","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","autoResetPage","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","getRowProps","cells","cell","getCellProps","Number","width"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport React, { useEffect, useState } from 'react'\nimport { useTable, usePagination, TableInstance } from 'react-table'\nimport { Client, ThreadID } from '@textile/hub'\nimport './Table.css'\n\ntype TableProps = {\n  threadId: ThreadID,\n  client: Client,\n  name: string\n}\n\ntype EditabeCellProps = {\n  value: any,\n  row: any,\n  column: any,\n  updateMyData: any\n}\n\ntype Data = object\n\nconst Table = ({ threadId, client, name }: TableProps) => {\n  const [schema, setSchema] = useState({\n    $schema: 'http://json-schema.org/draft-07/schema#',\n    title: name,\n    type: 'object',\n    properties: {\n      _id: { type: 'string' },\n      name: { type: 'string' },\n      missions: {\n        type: 'number',\n        minimum: 0,\n      },\n    },\n  })\n\n  const [columns, setColumns] = useState([\n      {\n        Header: name,\n        columns: [\n          {\n            Header: 'Name',\n            accessor: 'name',\n          },\n          {\n            Header: 'Missions',\n            accessor: 'missions',\n          },\n        ],\n      },\n    ],\n  )\n  const emptyRowObject = { _id: Math.random().toString(36), name: \"\", missions: 0 }\n  const [data, setData] = useState([emptyRowObject])\n  const [skipPageReset, setSkipPageReset] = useState(false)\n  const [activeCollection, setActiveCollection] = useState(false)\n\n  useEffect(() => {\n    const existingCollection = async () => {\n      const clientInfo = await client.getCollectionInfo(threadId, name)\n      setSchema(clientInfo.schema)\n      const list = await client.find(threadId, name, {})\n      setData(list.instancesList)\n    }\n    existingCollection().catch(async () => {\n      await client.newCollection(threadId, name, schema)\n      await client.create(threadId, name, data)\n    })\n    setActiveCollection(true)\n  }, [client, threadId, name, data, schema])\n\n  useEffect(() => {\n    if (data.length > 1) {\n      saveCollectionUpdates()\n    }\n  }, [data])\n\n  const updateMyData = async (rowIndex: number, columnId: string, value: any) => {\n    setSkipPageReset(true)\n    setData(old =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  const saveCollectionUpdates = async () => {\n    await client.save(threadId, name, data)\n  }\n\n  const addRow = () => {\n    setData([...data, emptyRowObject])\n    client.create(threadId, name, [emptyRowObject])\n  }\n\n  // const removeRow = async (instanceId: string) => {\n  //   client.delete(threadId, name, [instanceId])\n  // }\n\n  const addColumn = async () => {\n    const newColData = { Header: 'Field', accessor: 'field' }\n    setColumns(old =>\n      old.map((row) => {\n        return {\n          Header: name,\n          columns: [...row.columns, newColData]\n        }\n      })\n    )\n    // @ts-ignore\n    schema.properties.field = { type: 'string' }\n    client.updateCollection(threadId, name, schema)\n  }\n\n  const EditableCell = ({\n    value: initialValue,\n    row: { index },\n    column: { id },\n    updateMyData,\n  }: EditabeCellProps) => {\n    const [value, setValue] = React.useState(initialValue)\n\n    const onChange = (e: any) => {\n      setValue(e.target.value)\n    }\n\n    const onBlur = () => {\n      updateMyData(index, id, value)\n    }\n\n    useEffect(() => {\n      setValue(initialValue)\n    }, [initialValue])\n\n    return (<input value={value} onChange={onChange} onBlur={onBlur} />)\n  }\n\n  const defaultColumn = {\n    Cell: EditableCell,\n  }\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable<Data>(\n    {\n      columns,\n      data,\n      defaultColumn,\n      autoResetPage: !skipPageReset,\n      updateMyData,\n    },\n    usePagination\n  ) as TableInstance<object>\n\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup: any) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column: any) => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row: any) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell: any) => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <button onClick={addRow}>\n        add row\n      </button>\n      <button onClick={addColumn}>\n        add column\n      </button>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  )\n}\n\nexport default Table\n"]},"metadata":{},"sourceType":"module"}