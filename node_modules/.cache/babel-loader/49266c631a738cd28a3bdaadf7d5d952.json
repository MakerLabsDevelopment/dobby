{"ast":null,"code":"import { set, updateAll } from 'shades';\nexport default {\n  name: 'threads',\n  getReducer: () => {\n    const initialData = {\n      active: null,\n      loading: false,\n      data: null\n    };\n    return (state = initialData, {\n      type,\n      payload,\n      err\n    }) => {\n      if (type.startsWith('THREADS') && type.endsWith('_START')) {\n        return set('loading')(true)(state);\n      }\n\n      if (type === 'THREADS_RESET') {\n        return initialData;\n      }\n\n      if (type === 'THREADS_FETCH_SUCCESS') {\n        return updateAll(set('data')(payload.listList), set('loading')(false))(state);\n      }\n\n      if (type === 'THREADS_FETCH_FAILED') {\n        return updateAll(set('data')(null), set('loading')(false))(state);\n      }\n\n      return state;\n    };\n  },\n  doThreadsFetch: client => {\n    return async ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'THREADS_FETCH_START'\n      });\n      return await client.listThreads().then(payload => {\n        console.log(payload, 'PAY');\n        return dispatch({\n          type: 'THREADS_FETCH_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'THREADS_FETCH_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doThreadsCreate: () => {\n    return ({\n      dispatch,\n      apiPost,\n      store\n    }) => {\n      dispatch({\n        type: 'THREADS_ADD_START'\n      });\n      return apiPost('v1/skills/').then(payload => {\n        return dispatch({\n          type: 'THREADS_ADD_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'THREADS_ADD_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doThreadsSetActive: threadId => {\n    return async ({\n      dispatch,\n      store\n    }) => {\n      const result = await dispatch({\n        type: 'MESSAGES_SET_ACTIVE',\n        payload: threadId\n      });\n\n      if (!threadId) {\n        const {\n          accountsActive\n        } = store.select(['selectAccountsActive']);\n        await store.doMessagesFetch(accountsActive.id);\n      }\n\n      return result;\n    };\n  },\n  selectThreadsLoading: state => state.threads.loading,\n  selectThreadsData: state => state.threads.data\n};","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/sushitable/src/bundles/threads.js"],"names":["set","updateAll","name","getReducer","initialData","active","loading","data","state","type","payload","err","startsWith","endsWith","listList","doThreadsFetch","client","dispatch","store","listThreads","then","console","log","catch","doThreadsCreate","apiPost","doThreadsSetActive","threadId","result","accountsActive","select","doMessagesFetch","id","selectThreadsLoading","threads","selectThreadsData"],"mappings":"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","sourcesContent":["import { set, updateAll } from 'shades'\n\nexport default {\n  name: 'threads',\n  getReducer: () => {\n    const initialData = {\n      active: null,\n      loading: false,\n      data: null\n    }\n    return (state = initialData, { type, payload, err }) => {\n      if (type.startsWith('THREADS') && type.endsWith('_START')) {\n        return set('loading')(true)(state)\n      }\n\n      if (type === 'THREADS_RESET') {\n        return initialData\n      }\n\n      if (type === 'THREADS_FETCH_SUCCESS') {\n        return updateAll(\n          set('data')(payload.listList),\n          set('loading')(false)\n        )(state)\n      }\n\n      if (type === 'THREADS_FETCH_FAILED') {\n        return updateAll(\n          set('data')(null),\n          set('loading')(false)\n        )(state)\n      }\n\n      return state\n    }\n  },\n  doThreadsFetch: (client) => {\n    return async ({ dispatch, store }) => {\n      dispatch({ type: 'THREADS_FETCH_START' })\n      return await client.listThreads().then((payload) => {\n        console.log(payload, 'PAY')\n        return dispatch({ type: 'THREADS_FETCH_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'THREADS_FETCH_FAILED', err })\n      })\n    }\n  },\n  doThreadsCreate: () => {\n    return ({ dispatch, apiPost, store }) => {\n      dispatch({ type: 'THREADS_ADD_START' })\n      return apiPost('v1/skills/').then((payload) => {\n        return dispatch({ type: 'THREADS_ADD_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'THREADS_ADD_FAILED', err })\n      })\n    }\n  },\n  doThreadsSetActive: (threadId) => {\n    return async ({ dispatch, store }) => {\n      const result = await dispatch({ type: 'MESSAGES_SET_ACTIVE', payload: threadId })\n      if (!threadId) {\n        const { accountsActive } = store.select(['selectAccountsActive'])\n        await store.doMessagesFetch(accountsActive.id)\n      }\n      return result\n    }\n  },\n  selectThreadsLoading: state => state.threads.loading,\n  selectThreadsData: state => state.threads.data,\n}\n"]},"metadata":{},"sourceType":"module"}