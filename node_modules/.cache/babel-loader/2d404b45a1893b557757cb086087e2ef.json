{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.protoFromTuple = exports.ParseError = exports.cleanPath = exports.isValidBuffer = exports.fromBuffer = exports.fromString = exports.stringToBuffer = exports.bufferToString = exports.bufferToTuples = exports.sizeForAddr = exports.tuplesToBuffer = exports.tuplesToStringTuples = exports.stringTuplesToTuples = exports.stringTuplesToString = exports.stringToStringTuples = void 0;\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nconst varint_1 = __importDefault(require(\"varint\"));\n\nconst convert = __importStar(require(\"./convert\"));\n\nconst protocols_1 = require(\"./protocols\"); // string -> [[str name, str addr]... ]\n\n\nfunction stringToStringTuples(str) {\n  const tuples = [];\n  const parts = str.split(\"/\").slice(1); // skip first empty elem\n\n  if (parts.length === 1 && parts[0] === \"\") {\n    return [];\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p];\n    const proto = protocols_1.protocols(part);\n\n    if (proto.size === 0) {\n      tuples.push([part]);\n      continue;\n    }\n\n    p++; // advance addr part\n\n    if (p >= parts.length) {\n      throw ParseError(\"invalid address: \" + str);\n    } // if it's a path proto, take the rest\n\n\n    if (proto.path) {\n      tuples.push([part, // TODO: should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      cleanPath(parts.slice(p).join(\"/\"))]);\n      break;\n    }\n\n    tuples.push([part, parts[p]]);\n  }\n\n  return tuples;\n}\n\nexports.stringToStringTuples = stringToStringTuples; // [[str name, str addr]... ] -> string\n\nfunction stringTuplesToString(tuples) {\n  const parts = [];\n  tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    parts.push(proto.name);\n\n    if (tup.length > 1) {\n      parts.push(tup[1]);\n    }\n  });\n  return cleanPath(parts.join(\"/\"));\n}\n\nexports.stringTuplesToString = stringTuplesToString; // [[str name, str addr]... ] -> [[int code, Buffer]... ]\n\nfunction stringTuplesToTuples(tuples) {\n  return tuples.map(tup => {\n    if (!Array.isArray(tup)) {\n      tup = [tup];\n    }\n\n    const proto = protoFromTuple(tup);\n\n    if (tup.length > 1) {\n      return [proto.code, convert.toBuffer(proto.code, tup[1])];\n    }\n\n    return [proto.code];\n  });\n}\n\nexports.stringTuplesToTuples = stringTuplesToTuples; // [[int code, Buffer]... ] -> [[str name, str addr]... ]\n\nfunction tuplesToStringTuples(tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n\n    if (tup.length > 1) {\n      return [proto.code, convert.toString(proto.code, tup[1])];\n    }\n\n    return [proto.code];\n  });\n}\n\nexports.tuplesToStringTuples = tuplesToStringTuples; // [[int code, Buffer ]... ] -> Buffer\n\nfunction tuplesToBuffer(tuples) {\n  return fromBuffer(Buffer.concat(tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    let buf = Buffer.from(varint_1.default.encode(proto.code));\n\n    if (tup.length > 1) {\n      buf = Buffer.concat([buf, tup[1]]); // add address buffer\n    }\n\n    return buf;\n  })));\n}\n\nexports.tuplesToBuffer = tuplesToBuffer;\n\nfunction sizeForAddr(p, addr) {\n  if (p.size > 0) {\n    return p.size / 8;\n  } else if (p.size === 0) {\n    return 0;\n  } else {\n    const size = varint_1.default.decode(addr);\n    return size + varint_1.default.decode.bytes;\n  }\n}\n\nexports.sizeForAddr = sizeForAddr; // Buffer -> [[int code, Buffer ]... ]\n\nfunction bufferToTuples(buf) {\n  const tuples = [];\n  let i = 0;\n\n  while (i < buf.length) {\n    const code = varint_1.default.decode(buf, i);\n    const n = varint_1.default.decode.bytes;\n    const p = protocols_1.protocols(code);\n    const size = sizeForAddr(p, buf.slice(i + n));\n\n    if (size === 0) {\n      tuples.push([code]);\n      i += n;\n      continue;\n    }\n\n    const addr = buf.slice(i + n, i + n + size);\n    i += size + n;\n\n    if (i > buf.length) {\n      // did not end _exactly_ at buffer.length\n      throw ParseError(\"Invalid address buffer: \" + buf.toString(\"hex\"));\n    } // ok, tuple seems good.\n\n\n    tuples.push([code, addr]);\n  }\n\n  return tuples;\n}\n\nexports.bufferToTuples = bufferToTuples; // Buffer -> String\n\nfunction bufferToString(buf) {\n  const a = bufferToTuples(buf);\n  const b = tuplesToStringTuples(a);\n  return stringTuplesToString(b);\n}\n\nexports.bufferToString = bufferToString; // String -> Buffer\n\nfunction stringToBuffer(str) {\n  str = cleanPath(str);\n  const a = stringToStringTuples(str);\n  const b = stringTuplesToTuples(a);\n  return tuplesToBuffer(b);\n}\n\nexports.stringToBuffer = stringToBuffer; // String -> Buffer\n\nfunction fromString(str) {\n  return stringToBuffer(str);\n}\n\nexports.fromString = fromString; // Buffer -> Buffer\n\nfunction fromBuffer(buf) {\n  const err = validateBuffer(buf);\n  if (err) throw err;\n  return Buffer.from(buf); // copy\n}\n\nexports.fromBuffer = fromBuffer;\n\nfunction validateBuffer(buf) {\n  try {\n    bufferToTuples(buf); // try to parse. will throw if breaks\n  } catch (err) {\n    return err;\n  }\n}\n\nfunction isValidBuffer(buf) {\n  return validateBuffer(buf) === undefined;\n}\n\nexports.isValidBuffer = isValidBuffer;\n\nfunction cleanPath(str) {\n  return \"/\" + str.trim().split(\"/\").filter(a => a).join(\"/\");\n}\n\nexports.cleanPath = cleanPath;\n\nfunction ParseError(str) {\n  return new Error(\"Error parsing address: \" + str);\n}\n\nexports.ParseError = ParseError;\n\nfunction protoFromTuple(tup) {\n  const proto = protocols_1.protocols(tup[0]);\n  return proto;\n}\n\nexports.protoFromTuple = protoFromTuple;","map":{"version":3,"sources":["../src/codec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA,MAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,MAAA,OAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA,C,CAEA;;;AACA,SAAgB,oBAAhB,CAAqC,GAArC,EAAgD;AAC9C,QAAM,MAAM,GAAG,EAAf;AACA,QAAM,KAAK,GAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,EAAe,KAAf,CAAqB,CAArB,CAAd,CAF8C,CAER;;AACtC,MAAI,KAAK,CAAC,MAAN,KAAiB,CAAjB,IAAsB,KAAK,CAAC,CAAD,CAAL,KAAa,EAAvC,EAA2C;AACzC,WAAO,EAAP;AACD;;AAED,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,UAAM,IAAI,GAAG,KAAK,CAAC,CAAD,CAAlB;AACA,UAAM,KAAK,GAAG,WAAA,CAAA,SAAA,CAAU,IAAV,CAAd;;AAEA,QAAI,KAAK,CAAC,IAAN,KAAe,CAAnB,EAAsB;AACpB,MAAA,MAAM,CAAC,IAAP,CAAY,CAAC,IAAD,CAAZ;AACA;AACD;;AAED,IAAA,CAAC,GAToC,CASjC;;AACJ,QAAI,CAAC,IAAI,KAAK,CAAC,MAAf,EAAuB;AACrB,YAAM,UAAU,CAAC,sBAAsB,GAAvB,CAAhB;AACD,KAZoC,CAcrC;;;AACA,QAAI,KAAK,CAAC,IAAV,EAAgB;AACd,MAAA,MAAM,CAAC,IAAP,CAAY,CACV,IADU,EAEV;AACA;AACA;AACA,MAAA,SAAS,CAAC,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,IAAf,CAAoB,GAApB,CAAD,CALC,CAAZ;AAOA;AACD;;AAED,IAAA,MAAM,CAAC,IAAP,CAAY,CAAC,IAAD,EAAO,KAAK,CAAC,CAAD,CAAZ,CAAZ;AACD;;AAED,SAAO,MAAP;AACD;;AArCD,OAAA,CAAA,oBAAA,GAAA,oBAAA,C,CAuCA;;AACA,SAAgB,oBAAhB,CAAqC,MAArC,EAAuD;AACrD,QAAM,KAAK,GAAa,EAAxB;AACA,EAAA,MAAM,CAAC,GAAP,CAAY,GAAD,IAAQ;AACjB,UAAM,KAAK,GAAG,cAAc,CAAC,GAAD,CAA5B;AACA,IAAA,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,IAAjB;;AACA,QAAI,GAAG,CAAC,MAAJ,GAAa,CAAjB,EAAoB;AAClB,MAAA,KAAK,CAAC,IAAN,CAAW,GAAG,CAAC,CAAD,CAAd;AACD;AACF,GAND;AAQA,SAAO,SAAS,CAAC,KAAK,CAAC,IAAN,CAAW,GAAX,CAAD,CAAhB;AACD;;AAXD,OAAA,CAAA,oBAAA,GAAA,oBAAA,C,CAaA;;AACA,SAAgB,oBAAhB,CAAqC,MAArC,EAAuD;AACrD,SAAO,MAAM,CAAC,GAAP,CAAY,GAAD,IAAQ;AACxB,QAAI,CAAC,KAAK,CAAC,OAAN,CAAc,GAAd,CAAL,EAAyB;AACvB,MAAA,GAAG,GAAG,CAAC,GAAD,CAAN;AACD;;AACD,UAAM,KAAK,GAAG,cAAc,CAAC,GAAD,CAA5B;;AACA,QAAI,GAAG,CAAC,MAAJ,GAAa,CAAjB,EAAoB;AAClB,aAAO,CAAC,KAAK,CAAC,IAAP,EAAa,OAAO,CAAC,QAAR,CAAiB,KAAK,CAAC,IAAvB,EAA6B,GAAG,CAAC,CAAD,CAAhC,CAAb,CAAP;AACD;;AACD,WAAO,CAAC,KAAK,CAAC,IAAP,CAAP;AACD,GATM,CAAP;AAUD;;AAXD,OAAA,CAAA,oBAAA,GAAA,oBAAA,C,CAaA;;AACA,SAAgB,oBAAhB,CAAqC,MAArC,EAAoD;AAClD,SAAO,MAAM,CAAC,GAAP,CAAY,GAAD,IAAQ;AACxB,UAAM,KAAK,GAAG,cAAc,CAAC,GAAD,CAA5B;;AACA,QAAI,GAAG,CAAC,MAAJ,GAAa,CAAjB,EAAoB;AAClB,aAAO,CAAC,KAAK,CAAC,IAAP,EAAa,OAAO,CAAC,QAAR,CAAiB,KAAK,CAAC,IAAvB,EAA6B,GAAG,CAAC,CAAD,CAAhC,CAAb,CAAP;AACD;;AACD,WAAO,CAAC,KAAK,CAAC,IAAP,CAAP;AACD,GANM,CAAP;AAOD;;AARD,OAAA,CAAA,oBAAA,GAAA,oBAAA,C,CAUA;;AACA,SAAgB,cAAhB,CAA+B,MAA/B,EAA8C;AAC5C,SAAO,UAAU,CACf,MAAM,CAAC,MAAP,CACE,MAAM,CAAC,GAAP,CAAY,GAAD,IAAQ;AACjB,UAAM,KAAK,GAAG,cAAc,CAAC,GAAD,CAA5B;AACA,QAAI,GAAG,GAAG,MAAM,CAAC,IAAP,CAAY,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,KAAK,CAAC,IAApB,CAAZ,CAAV;;AAEA,QAAI,GAAG,CAAC,MAAJ,GAAa,CAAjB,EAAoB;AAClB,MAAA,GAAG,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,GAAD,EAAM,GAAG,CAAC,CAAD,CAAT,CAAd,CAAN,CADkB,CACiB;AACpC;;AAED,WAAO,GAAP;AACD,GATD,CADF,CADe,CAAjB;AAcD;;AAfD,OAAA,CAAA,cAAA,GAAA,cAAA;;AAiBA,SAAgB,WAAhB,CAA4B,CAA5B,EAAyC,IAAzC,EAAgE;AAC9D,MAAI,CAAC,CAAC,IAAF,GAAS,CAAb,EAAgB;AACd,WAAO,CAAC,CAAC,IAAF,GAAS,CAAhB;AACD,GAFD,MAEO,IAAI,CAAC,CAAC,IAAF,KAAW,CAAf,EAAkB;AACvB,WAAO,CAAP;AACD,GAFM,MAEA;AACL,UAAM,IAAI,GAAG,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,IAAd,CAAb;AACA,WAAO,IAAI,GAAG,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,KAA5B;AACD;AACF;;AATD,OAAA,CAAA,WAAA,GAAA,WAAA,C,CAWA;;AACA,SAAgB,cAAhB,CAA+B,GAA/B,EAA0C;AACxC,QAAM,MAAM,GAAG,EAAf;AACA,MAAI,CAAC,GAAG,CAAR;;AACA,SAAO,CAAC,GAAG,GAAG,CAAC,MAAf,EAAuB;AACrB,UAAM,IAAI,GAAG,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,GAAd,EAAmB,CAAnB,CAAb;AACA,UAAM,CAAC,GAAG,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,KAAxB;AAEA,UAAM,CAAC,GAAG,WAAA,CAAA,SAAA,CAAU,IAAV,CAAV;AAEA,UAAM,IAAI,GAAG,WAAW,CAAC,CAAD,EAAI,GAAG,CAAC,KAAJ,CAAU,CAAC,GAAG,CAAd,CAAJ,CAAxB;;AAEA,QAAI,IAAI,KAAK,CAAb,EAAgB;AACd,MAAA,MAAM,CAAC,IAAP,CAAY,CAAC,IAAD,CAAZ;AACA,MAAA,CAAC,IAAI,CAAL;AACA;AACD;;AAED,UAAM,IAAI,GAAG,GAAG,CAAC,KAAJ,CAAU,CAAC,GAAG,CAAd,EAAiB,CAAC,GAAG,CAAJ,GAAQ,IAAzB,CAAb;AAEA,IAAA,CAAC,IAAI,IAAI,GAAG,CAAZ;;AAEA,QAAI,CAAC,GAAG,GAAG,CAAC,MAAZ,EAAoB;AAClB;AACA,YAAM,UAAU,CAAC,6BAA6B,GAAG,CAAC,QAAJ,CAAa,KAAb,CAA9B,CAAhB;AACD,KArBoB,CAuBrB;;;AACA,IAAA,MAAM,CAAC,IAAP,CAAY,CAAC,IAAD,EAAO,IAAP,CAAZ;AACD;;AAED,SAAO,MAAP;AACD;;AA/BD,OAAA,CAAA,cAAA,GAAA,cAAA,C,CAiCA;;AACA,SAAgB,cAAhB,CAA+B,GAA/B,EAA0C;AACxC,QAAM,CAAC,GAAG,cAAc,CAAC,GAAD,CAAxB;AACA,QAAM,CAAC,GAAG,oBAAoB,CAAC,CAAD,CAA9B;AACA,SAAO,oBAAoB,CAAC,CAAD,CAA3B;AACD;;AAJD,OAAA,CAAA,cAAA,GAAA,cAAA,C,CAMA;;AACA,SAAgB,cAAhB,CAA+B,GAA/B,EAA0C;AACxC,EAAA,GAAG,GAAG,SAAS,CAAC,GAAD,CAAf;AACA,QAAM,CAAC,GAAG,oBAAoB,CAAC,GAAD,CAA9B;AACA,QAAM,CAAC,GAAG,oBAAoB,CAAC,CAAD,CAA9B;AAEA,SAAO,cAAc,CAAC,CAAD,CAArB;AACD;;AAND,OAAA,CAAA,cAAA,GAAA,cAAA,C,CAQA;;AACA,SAAgB,UAAhB,CAA2B,GAA3B,EAAsC;AACpC,SAAO,cAAc,CAAC,GAAD,CAArB;AACD;;AAFD,OAAA,CAAA,UAAA,GAAA,UAAA,C,CAIA;;AACA,SAAgB,UAAhB,CAA2B,GAA3B,EAAsC;AACpC,QAAM,GAAG,GAAG,cAAc,CAAC,GAAD,CAA1B;AACA,MAAI,GAAJ,EAAS,MAAM,GAAN;AACT,SAAO,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAP,CAHoC,CAGZ;AACzB;;AAJD,OAAA,CAAA,UAAA,GAAA,UAAA;;AAMA,SAAS,cAAT,CAAwB,GAAxB,EAAmC;AACjC,MAAI;AACF,IAAA,cAAc,CAAC,GAAD,CAAd,CADE,CACkB;AACrB,GAFD,CAEE,OAAO,GAAP,EAAY;AACZ,WAAO,GAAP;AACD;AACF;;AAED,SAAgB,aAAhB,CAA8B,GAA9B,EAAyC;AACvC,SAAO,cAAc,CAAC,GAAD,CAAd,KAAwB,SAA/B;AACD;;AAFD,OAAA,CAAA,aAAA,GAAA,aAAA;;AAIA,SAAgB,SAAhB,CAA0B,GAA1B,EAAqC;AACnC,SACE,MACA,GAAG,CACA,IADH,GAEG,KAFH,CAES,GAFT,EAGG,MAHH,CAGW,CAAD,IAAO,CAHjB,EAIG,IAJH,CAIQ,GAJR,CAFF;AAQD;;AATD,OAAA,CAAA,SAAA,GAAA,SAAA;;AAWA,SAAgB,UAAhB,CAA2B,GAA3B,EAAsC;AACpC,SAAO,IAAI,KAAJ,CAAU,4BAA4B,GAAtC,CAAP;AACD;;AAFD,OAAA,CAAA,UAAA,GAAA,UAAA;;AAIA,SAAgB,cAAhB,CAA+B,GAA/B,EAAyC;AACvC,QAAM,KAAK,GAAG,WAAA,CAAA,SAAA,CAAU,GAAG,CAAC,CAAD,CAAb,CAAd;AACA,SAAO,KAAP;AACD;;AAHD,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport varint from \"varint\"\nimport * as convert from \"./convert\"\nimport { Protocol, protocols } from \"./protocols\"\n\n// string -> [[str name, str addr]... ]\nexport function stringToStringTuples(str: string): string[][] {\n  const tuples = []\n  const parts = str.split(\"/\").slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === \"\") {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = protocols(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError(\"invalid address: \" + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path) {\n      tuples.push([\n        part,\n        // TODO: should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join(\"/\")),\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n// [[str name, str addr]... ] -> string\nexport function stringTuplesToString(tuples: string[][]): string {\n  const parts: string[] = []\n  tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1) {\n      parts.push(tup[1])\n    }\n  })\n\n  return cleanPath(parts.join(\"/\"))\n}\n\n// [[str name, str addr]... ] -> [[int code, Buffer]... ]\nexport function stringTuplesToTuples(tuples: string[][]): any[][] {\n  return tuples.map((tup) => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toBuffer(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Buffer]... ] -> [[str name, str addr]... ]\nexport function tuplesToStringTuples(tuples: any[][]): any[][] {\n  return tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Buffer ]... ] -> Buffer\nexport function tuplesToBuffer(tuples: any[][]): Buffer {\n  return fromBuffer(\n    Buffer.concat(\n      tuples.map((tup) => {\n        const proto = protoFromTuple(tup)\n        let buf = Buffer.from(varint.encode(proto.code))\n\n        if (tup.length > 1) {\n          buf = Buffer.concat([buf, tup[1]]) // add address buffer\n        }\n\n        return buf\n      })\n    )\n  )\n}\n\nexport function sizeForAddr(p: Protocol, addr: number[] | Buffer): number {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + varint.decode.bytes\n  }\n}\n\n// Buffer -> [[int code, Buffer ]... ]\nexport function bufferToTuples(buf: Buffer): (number | Buffer)[][] {\n  const tuples = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = protocols(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += size + n\n\n    if (i > buf.length) {\n      // did not end _exactly_ at buffer.length\n      throw ParseError(\"Invalid address buffer: \" + buf.toString(\"hex\"))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n// Buffer -> String\nexport function bufferToString(buf: Buffer): string {\n  const a = bufferToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n// String -> Buffer\nexport function stringToBuffer(str: string): Buffer {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBuffer(b)\n}\n\n// String -> Buffer\nexport function fromString(str: string): Buffer {\n  return stringToBuffer(str)\n}\n\n// Buffer -> Buffer\nexport function fromBuffer(buf: Buffer): Buffer {\n  const err = validateBuffer(buf)\n  if (err) throw err\n  return Buffer.from(buf) // copy\n}\n\nfunction validateBuffer(buf: Buffer): any {\n  try {\n    bufferToTuples(buf) // try to parse. will throw if breaks\n  } catch (err) {\n    return err\n  }\n}\n\nexport function isValidBuffer(buf: Buffer): boolean {\n  return validateBuffer(buf) === undefined\n}\n\nexport function cleanPath(str: string): string {\n  return (\n    \"/\" +\n    str\n      .trim()\n      .split(\"/\")\n      .filter((a) => a)\n      .join(\"/\")\n  )\n}\n\nexport function ParseError(str: string): Error {\n  return new Error(\"Error parsing address: \" + str)\n}\n\nexport function protoFromTuple(tup: any[]): Protocol {\n  const proto = protocols(tup[0])\n  return proto\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}