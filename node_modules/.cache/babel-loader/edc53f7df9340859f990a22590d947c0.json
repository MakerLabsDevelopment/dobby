{"ast":null,"code":"import { set, updateAll } from 'shades';\nimport { cache } from 'utils';\nimport { PrivateKey, Client } from '@textile/hub';\nexport default {\n  name: 'auth',\n  getReducer: () => {\n    const keyInfo = {\n      key: 'bs3g66aciasarrm46kosxap74te'\n    };\n    const initialData = {\n      client: null,\n      error: null,\n      loading: false,\n      keyInfo\n    };\n    return (state = initialData, {\n      type,\n      payload,\n      err\n    }) => {\n      if (type.startsWith('AUTH_') && type.endsWith('_START')) {\n        return set('loading')(true)(state);\n      }\n\n      if (type === 'AUTH_SIGN_OUT') {\n        localStorage.removeItem('identity');\n        return set('token')(null)(state);\n      }\n\n      if (type === 'AUTH_SIGN_IN_SUCCESS') {\n        return updateAll(set('error')(null), set('loading')(false), set('identity')(payload.identity), set('client')(payload.client))(state);\n      }\n\n      if (type === 'AUTH_SIGN_IN_ERROR') {\n        return updateAll(set('error')(err.message), set('loading')(false))(state);\n      }\n\n      return state;\n    };\n  },\n  doAuthSignIn: values => {\n    return async ({\n      state,\n      dispatch\n    }) => {\n      dispatch({\n        type: 'AUTH_SIGN_IN_START'\n      });\n      let storedIdent = localStorage.getItem('identity');\n\n      if (storedIdent === null) {\n        try {\n          const identity = PrivateKey.fromRandom();\n          const identityString = identity.toString();\n          localStorage.setItem('identity', identityString);\n          const client = await Client.withKeyInfo(state.keyInfo);\n          await client.getToken(identity);\n          return dispatch({\n            type: 'AUTH_SIGN_IN_SUCCESS',\n            payload: {\n              identity,\n              client\n            }\n          });\n        } catch (err) {\n          return dispatch({\n            type: 'AUTH_SIGN_IN_ERROR',\n            err\n          });\n        }\n      }\n\n      const identity = PrivateKey.fromString(storedIdent);\n      const client = await Client.withKeyInfo(state.keyInfo);\n      await client.getToken(identity);\n      return dispatch({\n        type: 'AUTH_SIGN_IN_SUCCESS',\n        payload: {\n          identity,\n          client\n        }\n      });\n    };\n  },\n  doAuthSignOut: () => {\n    return async ({\n      dispatch,\n      store\n    }) => {\n      await cache.clear('dbdb');\n      return store.doUpdateUrl('/');\n    };\n  },\n  selectAuthLoading: state => state.auth.loading,\n  selectAuthSignedIn: state => Boolean(state.auth.token),\n  selectAuthToken: state => state.auth.token,\n  selectAuthClient: state => state.auth.client,\n  persistActions: ['AUTH_SIGN_OUT']\n};","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/sushitable/src/bundles/auth.js"],"names":["set","updateAll","cache","PrivateKey","Client","name","getReducer","keyInfo","key","initialData","client","error","loading","state","type","payload","err","startsWith","endsWith","localStorage","removeItem","identity","message","doAuthSignIn","values","dispatch","storedIdent","getItem","fromRandom","identityString","toString","setItem","withKeyInfo","getToken","fromString","doAuthSignOut","store","clear","doUpdateUrl","selectAuthLoading","auth","selectAuthSignedIn","Boolean","token","selectAuthToken","selectAuthClient","persistActions"],"mappings":"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","sourcesContent":["import { set, updateAll } from 'shades'\nimport { cache } from 'utils'\nimport { PrivateKey, Client } from '@textile/hub'\n\nexport default {\n  name: 'auth',\n  getReducer: () => {\n    const keyInfo = { key: 'bs3g66aciasarrm46kosxap74te' }\n    const initialData = {\n      client: null,\n      error: null,\n      loading: false,\n      keyInfo,\n    }\n    return (state = initialData, { type, payload, err }) => {\n      if (type.startsWith('AUTH_') && type.endsWith('_START')) {\n        return set('loading')(true)(state)\n      }\n\n      if (type === 'AUTH_SIGN_OUT') {\n        localStorage.removeItem('identity')\n        return set('token')(null)(state)\n      }\n\n      if (type === 'AUTH_SIGN_IN_SUCCESS') {\n        return updateAll(\n          set('error')(null),\n          set('loading')(false),\n          set('identity')(payload.identity),\n          set('client')(payload.client)\n        )(state)\n      }\n\n      if (type === 'AUTH_SIGN_IN_ERROR') {\n        return updateAll(\n          set('error')(err.message),\n          set('loading')(false)\n        )(state)\n      }\n\n      return state\n    }\n  },\n  doAuthSignIn: (values) => {\n    return async ({ state, dispatch }) => {\n      dispatch({ type: 'AUTH_SIGN_IN_START' })\n      let storedIdent = localStorage.getItem('identity')\n      if (storedIdent === null) {\n        try {\n          const identity = PrivateKey.fromRandom()\n          const identityString = identity.toString()\n          localStorage.setItem('identity', identityString)\n\n          const client = await Client.withKeyInfo(state.keyInfo)\n          await client.getToken(identity)\n          return dispatch({ type: 'AUTH_SIGN_IN_SUCCESS', payload: { identity, client } })\n        } catch (err) {\n          return dispatch({ type: 'AUTH_SIGN_IN_ERROR', err })\n        }\n      }\n      const identity = PrivateKey.fromString(storedIdent)\n      const client = await Client.withKeyInfo(state.keyInfo)\n      await client.getToken(identity)\n      return dispatch({ type: 'AUTH_SIGN_IN_SUCCESS', payload: { identity, client } })\n    }\n  },\n  doAuthSignOut: () => {\n    return async ({ dispatch, store }) => {\n      await cache.clear('dbdb')\n      return store.doUpdateUrl('/')\n    }\n  },\n  selectAuthLoading: (state) => state.auth.loading,\n  selectAuthSignedIn: (state) => Boolean(state.auth.token),\n  selectAuthToken: (state) => state.auth.token,\n  selectAuthClient: (state) => state.auth.client,\n  persistActions: [\n    'AUTH_SIGN_OUT',\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}