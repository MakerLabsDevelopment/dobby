{"ast":null,"code":"import { set, updateAll } from 'shades';\nconst schema = {\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  title: null,\n  type: 'object',\n  properties: {\n    _id: {\n      type: 'string'\n    },\n    name: {\n      type: 'string'\n    },\n    missions: {\n      type: 'number',\n      minimum: 0\n    }\n  }\n};\nexport default {\n  name: 'collections',\n  getReducer: () => {\n    const initialData = {\n      active: null,\n      loading: false,\n      data: null\n    };\n    return (state = initialData, {\n      type,\n      payload,\n      err\n    }) => {\n      if (type.startsWith('COLLECTIONS') && type.endsWith('_START')) {\n        return set('loading')(true)(state);\n      }\n\n      if (type === 'COLLECTIONS_RESET') {\n        return initialData;\n      }\n\n      if (type === 'COLLECTIONS_FETCH_DATA_SUCCESS') {\n        console.log('ssd', payload);\n        return updateAll(set('data')(payload.results), set('loading')(false))(state);\n      }\n\n      if (type === 'COLLECTIONS_FETCH_DATA_FAILED') {\n        return updateAll(set('data')(null), set('loading')(false))(state);\n      }\n\n      return state;\n    };\n  },\n  // doCollectionsFetch: () => {\n  //   return async ({ apiGet, dispatch, store }) => {\n  //     dispatch({ type: 'COLLECTIONS_FETCH_START' })\n  //     const { authClient: client } = store.select(['selectAuthClient'])\n  //     const { threadId } = store.select(['selectThreadsActive'])\n  //     return await client.listCollections(threadId).then((payload) => {\n  //       return dispatch({ type: 'COLLECTIONS_FETCH_SUCCESS', payload })\n  //     }).catch((err) => {\n  //       return dispatch({ type: 'COLLECTIONS_FETCH_FAILED', err })\n  //     })\n  //   }\n  // },\n  // doCollectionsFetchActive: (name) => {\n  //   return async ({ apiGet, dispatch, store }) => {\n  //     dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_START' })\n  //     const { authClient: client } = store.select(['selectAuthClient'])\n  //     const { threadId } = store.select(['selectThreadsActive'])\n  //     return await client.getCollectionInfo(threadId, name).then((payload) => {\n  //       return dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_SUCCESS', payload })\n  //     }).catch((err) => {\n  //       return dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_FAILED', err })\n  //     })\n  //   }\n  // },\n  doCollectionsFetchData: name => {\n    return async ({\n      apiGet,\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_FETCH_DATA_START'\n      });\n      const {\n        authClient: client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadId\n      } = store.select(['selectThreadsActive']);\n      console.log('o', client, threadId);\n      const list = await client.find(threadId, name, {});\n      console.log('list', list);\n      return await client.find(threadId, name, {}).then(payload => {\n        console.log('uuu', payload);\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_DATA_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_DATA_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsCreate: name => {\n    return async ({\n      dispatch,\n      apiPost,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_ADD_START'\n      });\n      const {\n        authClient: client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadId\n      } = store.select(['selectThreadsActive']);\n      const namedSchema = schema.title = name;\n      await client.newCollection(threadId, name, namedSchema);\n      const data = {\n        _id: Math.random().toString(36),\n        name: \"\",\n        count: 0\n      };\n      return await client.create(threadId, name, data).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsUpdate: (name, data) => {\n    return ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_UPDATE_START'\n      });\n      const {\n        client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadId\n      } = store.select(['selectThreadsActive']);\n      return client.save(threadId, name, data).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_UPDATE_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_UPDATE_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsAddRow: (name, emptyRowObject) => {\n    return ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_ADD_ROW_START'\n      });\n      const {\n        authClient: client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadId\n      } = store.select(['selectThreadsActive']);\n      return client.create(threadId, name, [emptyRowObject]).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_ROW_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_ROW_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsDeleteRow: (name, instanceId) => {\n    return ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_ADD_ROW_START'\n      });\n      const {\n        authClient: client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadId\n      } = store.select(['selectThreadsActive']);\n      return client.delete(threadId, name, [instanceId]).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_ROW_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_ROW_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsAddColumn: (name, schema) => {\n    return ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_ADD_COLUMN_START'\n      });\n      const {\n        authClient: client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadId\n      } = store.select(['selectThreadsActive']);\n      return client.updateCollection(threadId, name, schema).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_COLUMN_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_COLUMN_FAILED',\n          err\n        });\n      });\n    };\n  },\n  selectCollectionsLoading: state => state.collections.loading,\n  selectCollectionsData: state => state.collections.data,\n  selectCollectionsActive: state => state.collections.active\n};","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/dobby/src/bundles/collections.js"],"names":["set","updateAll","schema","$schema","title","type","properties","_id","name","missions","minimum","getReducer","initialData","active","loading","data","state","payload","err","startsWith","endsWith","console","log","results","doCollectionsFetchData","apiGet","dispatch","store","authClient","client","select","threadId","list","find","then","catch","doCollectionsCreate","apiPost","namedSchema","newCollection","Math","random","toString","count","create","doCollectionsUpdate","save","doCollectionsAddRow","emptyRowObject","doCollectionsDeleteRow","instanceId","delete","doCollectionsAddColumn","updateCollection","selectCollectionsLoading","collections","selectCollectionsData","selectCollectionsActive"],"mappings":"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","sourcesContent":["import { set, updateAll } from 'shades'\n\nconst schema = {\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  title: null,\n  type: 'object',\n  properties: {\n    _id: { type: 'string' },\n    name: { type: 'string' },\n    missions: {\n      type: 'number',\n      minimum: 0,\n    },\n  },\n}\n\nexport default {\n  name: 'collections',\n  getReducer: () => {\n    const initialData = {\n      active: null,\n      loading: false,\n      data: null\n    }\n    return (state = initialData, { type, payload, err }) => {\n      if (type.startsWith('COLLECTIONS') && type.endsWith('_START')) {\n        return set('loading')(true)(state)\n      }\n\n      if (type === 'COLLECTIONS_RESET') {\n        return initialData\n      }\n\n      if (type === 'COLLECTIONS_FETCH_DATA_SUCCESS') {\n        console.log('ssd', payload)\n        return updateAll(\n          set('data')(payload.results),\n          set('loading')(false)\n        )(state)\n      }\n\n      if (type === 'COLLECTIONS_FETCH_DATA_FAILED') {\n        return updateAll(\n          set('data')(null),\n          set('loading')(false)\n        )(state)\n      }\n\n      return state\n    }\n  },\n  // doCollectionsFetch: () => {\n  //   return async ({ apiGet, dispatch, store }) => {\n  //     dispatch({ type: 'COLLECTIONS_FETCH_START' })\n  //     const { authClient: client } = store.select(['selectAuthClient'])\n  //     const { threadId } = store.select(['selectThreadsActive'])\n  //     return await client.listCollections(threadId).then((payload) => {\n  //       return dispatch({ type: 'COLLECTIONS_FETCH_SUCCESS', payload })\n  //     }).catch((err) => {\n  //       return dispatch({ type: 'COLLECTIONS_FETCH_FAILED', err })\n  //     })\n  //   }\n  // },\n  // doCollectionsFetchActive: (name) => {\n  //   return async ({ apiGet, dispatch, store }) => {\n  //     dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_START' })\n  //     const { authClient: client } = store.select(['selectAuthClient'])\n  //     const { threadId } = store.select(['selectThreadsActive'])\n  //     return await client.getCollectionInfo(threadId, name).then((payload) => {\n  //       return dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_SUCCESS', payload })\n  //     }).catch((err) => {\n  //       return dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_FAILED', err })\n  //     })\n  //   }\n  // },\n  doCollectionsFetchData: (name) => {\n    return async ({ apiGet, dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_FETCH_DATA_START' })\n      const { authClient: client } = store.select(['selectAuthClient'])\n      const { threadId } = store.select(['selectThreadsActive'])\n      console.log('o', client, threadId)\n      const list = await client.find(threadId, name, {})\n      console.log('list', list)\n      return await client.find(threadId, name, {}).then((payload) => {\n        console.log('uuu', payload)\n        return dispatch({ type: 'COLLECTIONS_FETCH_DATA_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_DATA_FAILED', err })\n      })\n    }\n  },\n  doCollectionsCreate: (name) => {\n    return async ({ dispatch, apiPost, store }) => {\n      dispatch({ type: 'COLLECTIONS_ADD_START' })\n      const { authClient: client } = store.select(['selectAuthClient'])\n      const { threadId } = store.select(['selectThreadsActive'])\n      const namedSchema = schema.title = name\n      await client.newCollection(threadId, name, namedSchema)\n      const data = { _id: Math.random().toString(36), name: \"\", count: 0 }\n      return await client.create(threadId, name, data).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_FAILED', err })\n      })\n    }\n  },\n  doCollectionsUpdate: (name, data) => {\n    return ({ dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_UPDATE_START' })\n      const { client } = store.select(['selectAuthClient'])\n      const { threadId } = store.select(['selectThreadsActive'])\n      return client.save(threadId, name, data).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_UPDATE_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_UPDATE_FAILED', err })\n      })\n    }\n  },\n  doCollectionsAddRow: (name, emptyRowObject) => {\n    return ({ dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_ADD_ROW_START' })\n      const { authClient: client } = store.select(['selectAuthClient'])\n      const { threadId } = store.select(['selectThreadsActive'])\n      return client.create(threadId, name, [emptyRowObject]).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_ROW_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_ROW_FAILED', err })\n      })\n    }\n  },\n  doCollectionsDeleteRow: (name, instanceId) => {\n    return ({ dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_ADD_ROW_START' })\n      const { authClient: client } = store.select(['selectAuthClient'])\n      const { threadId } = store.select(['selectThreadsActive'])\n      return client.delete(threadId, name, [instanceId]).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_ROW_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_ROW_FAILED', err })\n      })\n    }\n  },\n  doCollectionsAddColumn: (name, schema) => {\n    return ({ dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_ADD_COLUMN_START' })\n      const { authClient: client } = store.select(['selectAuthClient'])\n      const { threadId } = store.select(['selectThreadsActive'])\n      return client.updateCollection(threadId, name, schema).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_COLUMN_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_COLUMN_FAILED', err })\n      })\n    }\n  },\n  selectCollectionsLoading: state => state.collections.loading,\n  selectCollectionsData: state => state.collections.data,\n  selectCollectionsActive: state => state.collections.active,\n}\n"]},"metadata":{},"sourceType":"module"}