{"ast":null,"code":"var _jsxFileName = \"/Users/nassarhayat/apps/textiletable/sushitable/src/App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport Table from './Table';\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Buckets, PrivateKey, Client, ThreadID } from '@textile/hub';\nimport { Header, Segment } from \"semantic-ui-react\";\nimport './App.css';\n\nconst App = () => {\n  const [keyInfo] = useState({\n    key: 'bs3g66aciasarrm46kosxap74te'\n  });\n  const [identity, setIdentity] = useState();\n  const [buckets, setBuckets] = useState();\n  const [bucketKey, setBucketKey] = useState();\n  const [client, setClient] = useState();\n  const [threadId, setThreadId] = useState();\n  const [links, setLinks] = useState();\n  useEffect(() => {\n    const setup = async () => {\n      const newIdentity = await getIdentity();\n      setIdentity(newIdentity);\n      const {\n        bucketKey,\n        buckets\n      } = await getBucketKey();\n      await getBucketLinks();\n      setBuckets(buckets);\n      setBucketKey(bucketKey);\n      const client = await getClientInfo();\n      const threadId = await ThreadID.fromRandom();\n      await client.newDB(threadId);\n      setClient(client);\n      setThreadId(threadId);\n    };\n\n    setup();\n  });\n\n  const getIdentity = async () => {\n    try {\n      var storedIdent = localStorage.getItem(\"identity\");\n\n      if (storedIdent === null) {\n        throw new Error('No identity');\n      }\n\n      const restored = PrivateKey.fromString(storedIdent);\n      return restored;\n    } catch (e) {\n      try {\n        const identity = await PrivateKey.fromRandom();\n        const identityString = identity.toString();\n        localStorage.setItem(\"identity\", identityString);\n        return identity;\n      } catch (err) {\n        return err.message;\n      }\n    }\n  };\n\n  const getBucketKey = async () => {\n    if (!identity) {\n      throw new Error('Identity not set');\n    }\n\n    const buckets = await Buckets.withKeyInfo(keyInfo);\n    await buckets.getToken(identity);\n    const buck = await buckets.getOrCreate('io.textile.dropzone');\n\n    if (!buck.root) {\n      throw new Error('Failed to open bucket');\n    }\n\n    return {\n      buckets: buckets,\n      bucketKey: buck.root.key\n    };\n  };\n\n  const getClientInfo = async () => {\n    if (!identity) {\n      throw new Error('Identity not set');\n    }\n\n    const client = await Client.withKeyInfo(keyInfo);\n    await client.getToken(identity);\n    return client;\n  };\n\n  const getBucketLinks = async () => {\n    if (!buckets || !bucketKey) {\n      console.error('No bucket client or root key');\n      return;\n    }\n\n    const linksList = await buckets.links(bucketKey);\n    console.log(linksList, 'LINKS'); // setLinks(linksList)\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Segment.Group, {\n    style: {\n      height: \"100%\",\n      border: 0,\n      boxShadow: \"0px 0px 0px\",\n      borderRadius: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Segment, {\n    clearing: true,\n    className: \"nav\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    className: \"avatar\",\n    as: \"h2\",\n    floated: \"left\",\n    title: identity ? identity.toString() : 'identity',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, identity && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 26\n    }\n  }, \"|\", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 51\n    }\n  }, \"\\uD83C\\uDF63\"), \"|\", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 78\n    }\n  }, \"\\uD83C\\uDF63\"), \"|\"))), threadId && client && /*#__PURE__*/React.createElement(Table, {\n    threadId: threadId,\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/sushitable/src/App.tsx"],"names":["React","useState","useEffect","Table","Buckets","PrivateKey","Client","ThreadID","Header","Segment","App","keyInfo","key","identity","setIdentity","buckets","setBuckets","bucketKey","setBucketKey","client","setClient","threadId","setThreadId","links","setLinks","setup","newIdentity","getIdentity","getBucketKey","getBucketLinks","getClientInfo","fromRandom","newDB","storedIdent","localStorage","getItem","Error","restored","fromString","e","identityString","toString","setItem","err","message","withKeyInfo","getToken","buck","getOrCreate","root","console","error","linksList","log","height","border","boxShadow","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Table from './Table'\n\nimport \"semantic-ui-css/semantic.min.css\"\nimport { Buckets, KeyInfo, PrivateKey, Client, ThreadID, Identity } from '@textile/hub'\nimport { Button, Header, Segment } from \"semantic-ui-react\"\nimport './App.css'\n\nconst App = () => {\n  const [keyInfo] = useState({\n    key: 'bs3g66aciasarrm46kosxap74te',\n  })\n  const [identity, setIdentity] = useState<PrivateKey>()\n  const [buckets, setBuckets] = useState<Buckets>()\n  const [bucketKey, setBucketKey] = useState<string>()\n  const [client, setClient] = useState<Client>()\n  const [threadId, setThreadId] = useState<ThreadID>()\n  const [links, setLinks] = useState<[]>()\n\n  useEffect(() => {\n    const setup = async () => {\n      const newIdentity = await getIdentity()\n      setIdentity(newIdentity)\n\n      const {bucketKey, buckets} = await getBucketKey()\n      await getBucketLinks()\n      setBuckets(buckets)\n      setBucketKey(bucketKey)\n\n      const client = await getClientInfo()\n      const threadId = await ThreadID.fromRandom()\n      await client.newDB(threadId)\n      setClient(client)\n      setThreadId(threadId)\n    }\n    setup()\n  })\n\n  const getIdentity = async (): Promise<PrivateKey> => {\n    try {\n      var storedIdent = localStorage.getItem(\"identity\")\n      if (storedIdent === null) {\n        throw new Error('No identity')\n      }\n      const restored = PrivateKey.fromString(storedIdent)\n      return restored\n    }\n    catch (e) {\n      try {\n        const identity = await PrivateKey.fromRandom()\n        const identityString = identity.toString()\n        localStorage.setItem(\"identity\", identityString)\n        return identity\n      } catch (err) {\n        return err.message\n      }\n    }\n  }\n\n  const getBucketKey = async () => {\n    if (!identity) {\n      throw new Error('Identity not set')\n    }\n    const buckets = await Buckets.withKeyInfo(keyInfo)\n    await buckets.getToken(identity)\n    const buck = await buckets.getOrCreate('io.textile.dropzone')\n    if (!buck.root) {\n      throw new Error('Failed to open bucket')\n    }\n    return {buckets: buckets, bucketKey: buck.root.key}\n  }\n\n  const getClientInfo = async () => {\n    if (!identity) {\n      throw new Error('Identity not set')\n    }\n    const client = await Client.withKeyInfo(keyInfo)\n    await client.getToken(identity)\n    return client\n  }\n\n  const getBucketLinks = async () => {\n    if (!buckets || !bucketKey) {\n      console.error('No bucket client or root key')\n      return\n    }\n    const linksList = await buckets.links(bucketKey)\n    console.log(linksList, 'LINKS')\n    // setLinks(linksList)\n  }\n\n  return (\n    <div className=\"App\">\n      <Segment.Group style={{ height: \"100%\", border: 0, boxShadow: \"0px 0px 0px\", borderRadius: 0 }}>\n        <Segment clearing className=\"nav\">\n          <Header className=\"avatar\" as=\"h2\" floated=\"left\" title={identity ? identity.toString() : 'identity'}>\n            {identity && <div className=\"avatar\">|<span role=\"img\">🍣</span>|<span role=\"img\">🍣</span>|</div>}\n          </Header>\n          \n        </Segment>\n        {threadId && client && (\n          <Table\n            threadId={threadId}\n            client={client}\n          />\n        )}\n      </Segment.Group>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}