{"ast":null,"code":"const BufferList = require('bl/BufferList');\n\nmodule.exports = (size, options) => {\n  if (typeof size === 'object') {\n    options = size;\n    size = options.size;\n  } else {\n    options = options || {};\n  }\n\n  if (!size) throw new Error('block size is required');\n  return source => {\n    return async function* () {\n      let buffer = new BufferList();\n      let started = false;\n\n      for await (const chunk of source) {\n        started = true;\n        buffer = buffer.append(chunk);\n\n        while (buffer.length >= size) {\n          if (buffer.length === size) {\n            yield buffer;\n            buffer = new BufferList();\n            break;\n          }\n\n          yield buffer.shallowSlice(0, size);\n          buffer = buffer.shallowSlice(size);\n        }\n      }\n\n      if (started && buffer.length) {\n        if (options.noPad) {\n          yield buffer;\n        } else {\n          yield buffer.append(Buffer.alloc(size - buffer.length));\n        }\n      }\n    }();\n  };\n};","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/sushitable/node_modules/it-block/index.js"],"names":["BufferList","require","module","exports","size","options","Error","source","buffer","started","chunk","append","length","shallowSlice","noPad","Buffer","alloc"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,IAAD,EAAOC,OAAP,KAAmB;AAClC,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5BC,IAAAA,OAAO,GAAGD,IAAV;AACAA,IAAAA,IAAI,GAAGC,OAAO,CAACD,IAAf;AACD,GAHD,MAGO;AACLC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACD;;AAED,MAAI,CAACD,IAAL,EAAW,MAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;AAEX,SAAOC,MAAM,IAAI;AACf,WAAQ,mBAAoB;AAC1B,UAAIC,MAAM,GAAG,IAAIR,UAAJ,EAAb;AACA,UAAIS,OAAO,GAAG,KAAd;;AAEA,iBAAW,MAAMC,KAAjB,IAA0BH,MAA1B,EAAkC;AAChCE,QAAAA,OAAO,GAAG,IAAV;AACAD,QAAAA,MAAM,GAAGA,MAAM,CAACG,MAAP,CAAcD,KAAd,CAAT;;AAEA,eAAOF,MAAM,CAACI,MAAP,IAAiBR,IAAxB,EAA8B;AAC5B,cAAII,MAAM,CAACI,MAAP,KAAkBR,IAAtB,EAA4B;AAC1B,kBAAMI,MAAN;AACAA,YAAAA,MAAM,GAAG,IAAIR,UAAJ,EAAT;AACA;AACD;;AAED,gBAAMQ,MAAM,CAACK,YAAP,CAAoB,CAApB,EAAuBT,IAAvB,CAAN;AACAI,UAAAA,MAAM,GAAGA,MAAM,CAACK,YAAP,CAAoBT,IAApB,CAAT;AACD;AACF;;AAED,UAAIK,OAAO,IAAID,MAAM,CAACI,MAAtB,EAA8B;AAC5B,YAAIP,OAAO,CAACS,KAAZ,EAAmB;AACjB,gBAAMN,MAAN;AACD,SAFD,MAEO;AACL,gBAAMA,MAAM,CAACG,MAAP,CAAcI,MAAM,CAACC,KAAP,CAAaZ,IAAI,GAAGI,MAAM,CAACI,MAA3B,CAAd,CAAN;AACD;AACF;AACF,KA3BM,EAAP;AA4BD,GA7BD;AA8BD,CAxCD","sourcesContent":["const BufferList = require('bl/BufferList')\n\nmodule.exports = (size, options) => {\n  if (typeof size === 'object') {\n    options = size\n    size = options.size\n  } else {\n    options = options || {}\n  }\n\n  if (!size) throw new Error('block size is required')\n\n  return source => {\n    return (async function * () {\n      let buffer = new BufferList()\n      let started = false\n\n      for await (const chunk of source) {\n        started = true\n        buffer = buffer.append(chunk)\n\n        while (buffer.length >= size) {\n          if (buffer.length === size) {\n            yield buffer\n            buffer = new BufferList()\n            break\n          }\n\n          yield buffer.shallowSlice(0, size)\n          buffer = buffer.shallowSlice(size)\n        }\n      }\n\n      if (started && buffer.length) {\n        if (options.noPad) {\n          yield buffer\n        } else {\n          yield buffer.append(Buffer.alloc(size - buffer.length))\n        }\n      }\n    })()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}