{"ast":null,"code":"var _jsxFileName = \"/Users/nassarhayat/apps/textiletable/sushitable/src/Table.tsx\";\n// @ts-nocheck\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport './Table.css';\n\nconst Table = ({\n  threadId,\n  client\n}) => {\n  const [schema, setSchema] = useState({\n    $schema: 'http://json-schema.org/draft-07/schema#',\n    title: 'Astronaut',\n    type: 'object',\n    properties: {\n      _id: {\n        type: 'string'\n      },\n      name: {\n        type: 'string'\n      },\n      missions: {\n        type: 'number',\n        minimum: 0\n      }\n    }\n  });\n  const [columns, setColumns] = useState([{\n    Header: 'Astronauts',\n    columns: [{\n      Header: 'Name',\n      accessor: 'name'\n    }, {\n      Header: 'Missions',\n      accessor: 'missions'\n    }]\n  }]);\n  const emptyRowObject = {\n    _id: Math.random().toString(36),\n    name: \"\",\n    missions: 0\n  };\n  const [data, setData] = useState([emptyRowObject]); // const [activeCollection, setActiveCollection] = useState(false)\n\n  const [skipPageReset, setSkipPageReset] = useState(false);\n  useEffect(() => {\n    const existingCollection = async () => {\n      await client.getCollectionInfo(threadId, 'Astronaut'); // await client.create(threadId, 'Astronaut', data)\n\n      const list = await client.find(threadId, 'Astronaut', {});\n      setData(list.instancesList);\n      console.log('list2', list);\n    };\n\n    existingCollection(); // const createCollection = async () => {\n    //   await client.newCollection(threadId, 'Astronaut', schema)\n    //   await client.create(threadId, 'Astronaut', data)\n    // }\n    // if (!existingCollection) {\n    //   createCollection()\n    // }\n  }, [client, threadId]);\n  useEffect(() => {\n    if (data.length > 1) {\n      saveCollectionUpdates();\n    }\n  }, [data, saveCollectionUpdates]);\n\n  const updateMyData = async (rowIndex, columnId, value) => {\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return { ...old[rowIndex],\n          [columnId]: value\n        };\n      }\n\n      return row;\n    }));\n  };\n\n  const saveCollectionUpdates = async () => {\n    console.log('newDATA', data);\n    await client.save(threadId, 'Astronaut', data);\n  };\n\n  const addRow = () => {\n    setData([...data, emptyRowObject]);\n    client.create(threadId, 'Astronaut', [emptyRowObject]);\n  };\n\n  const addColumn = async () => {\n    const newColData = {\n      Header: 'Cost',\n      accessor: 'cost'\n    };\n    setColumns(old => old.map(row => {\n      return {\n        Header: 'Flying',\n        columns: [...row.columns, newColData]\n      };\n    }));\n    schema.properties.cost = {\n      type: 'number'\n    };\n    setSchema(schema); // await client.create(threadId, 'Astronaut', [rowObject])\n  }; // console.log('OCL', columns, schema)\n\n\n  const EditableCell = ({\n    value: initialValue,\n    row: {\n      index\n    },\n    column: {\n      id\n    },\n    updateMyData\n  }) => {\n    const [value, setValue] = React.useState(initialValue);\n\n    const onChange = e => {\n      setValue(e.target.value);\n    };\n\n    const onBlur = () => {\n      updateMyData(index, id, value);\n    };\n\n    useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n    return /*#__PURE__*/React.createElement(\"input\", {\n      value: value,\n      onChange: onChange,\n      onBlur: onBlur,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    });\n  };\n\n  const defaultColumn = {\n    Cell: EditableCell\n  };\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    autoResetPage: !skipPageReset,\n    updateMyData\n  }, usePagination);\n  useEffect(() => {\n    setSkipPageReset(false);\n  }, [data]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }), column.render('Header')))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }), page.map((row, i) => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 15\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 26\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, \"add row\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addColumn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, \"add column\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => gotoPage(0),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, '<<'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => previousPage(),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, '<'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => nextPage(),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, '>'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => gotoPage(pageCount - 1),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, '>>'), ' ', /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, \"Page\", ' ', /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 11\n    }\n  }, pageIndex + 1, \" of \", pageOptions.length), ' '), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }, \"| Go to page:\", ' ', /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: e => {\n      const page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  })), ' ', /*#__PURE__*/React.createElement(\"select\", {\n    value: pageSize,\n    onChange: e => {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }\n  }, [10, 20, 30, 40, 50].map(pageSize => /*#__PURE__*/React.createElement(\"option\", {\n    key: pageSize,\n    value: pageSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, \"Show \", pageSize)))));\n};\n\nexport default Table;","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/sushitable/src/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","Table","threadId","client","schema","setSchema","$schema","title","type","properties","_id","name","missions","minimum","columns","setColumns","Header","accessor","emptyRowObject","Math","random","toString","data","setData","skipPageReset","setSkipPageReset","existingCollection","getCollectionInfo","list","find","instancesList","console","log","length","saveCollectionUpdates","updateMyData","rowIndex","columnId","value","old","map","row","index","save","addRow","create","addColumn","newColData","cost","EditableCell","initialValue","column","id","setValue","onChange","e","target","onBlur","defaultColumn","Cell","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","autoResetPage","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","Number","width"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,aAAxC;AACA,OAAO,aAAP;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA0B;AACtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC;AACnCQ,IAAAA,OAAO,EAAE,yCAD0B;AAEnCC,IAAAA,KAAK,EAAE,WAF4B;AAGnCC,IAAAA,IAAI,EAAE,QAH6B;AAInCC,IAAAA,UAAU,EAAE;AACVC,MAAAA,GAAG,EAAE;AAAEF,QAAAA,IAAI,EAAE;AAAR,OADK;AAEVG,MAAAA,IAAI,EAAE;AAAEH,QAAAA,IAAI,EAAE;AAAR,OAFI;AAGVI,MAAAA,QAAQ,EAAE;AACRJ,QAAAA,IAAI,EAAE,QADE;AAERK,QAAAA,OAAO,EAAE;AAFD;AAHA;AAJuB,GAAD,CAApC;AAcA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,CACnC;AACEkB,IAAAA,MAAM,EAAE,YADV;AAEEF,IAAAA,OAAO,EAAE,CACP;AACEE,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KADO,EAKP;AACED,MAAAA,MAAM,EAAE,UADV;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KALO;AAFX,GADmC,CAAD,CAAtC;AAgBA,QAAMC,cAAc,GAAG;AAAER,IAAAA,GAAG,EAAES,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,CAAP;AAAmCV,IAAAA,IAAI,EAAE,EAAzC;AAA6CC,IAAAA,QAAQ,EAAE;AAAvD,GAAvB;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBzB,QAAQ,CAAC,CAACoB,cAAD,CAAD,CAAhC,CAhCsC,CAiCtC;;AACA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoC3B,QAAQ,CAAC,KAAD,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6B,kBAAkB,GAAG,YAAY;AACrC,YAAMvB,MAAM,CAACwB,iBAAP,CAAyBzB,QAAzB,EAAmC,WAAnC,CAAN,CADqC,CAErC;;AACA,YAAM0B,IAAI,GAAG,MAAMzB,MAAM,CAAC0B,IAAP,CAAY3B,QAAZ,EAAsB,WAAtB,EAAmC,EAAnC,CAAnB;AACAqB,MAAAA,OAAO,CAACK,IAAI,CAACE,aAAN,CAAP;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,IAArB;AACD,KAND;;AAOAF,IAAAA,kBAAkB,GARJ,CASd;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAhBQ,EAgBN,CAACvB,MAAD,EAASD,QAAT,CAhBM,CAAT;AAkBAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyB,IAAI,CAACW,MAAL,GAAc,CAAlB,EAAqB;AACnBC,MAAAA,qBAAqB;AACtB;AACF,GAJQ,EAIN,CAACZ,IAAD,EAAOY,qBAAP,CAJM,CAAT;;AAMA,QAAMC,YAAY,GAAG,OAAOC,QAAP,EAAyBC,QAAzB,EAA2CC,KAA3C,KAA0D;AAC7Eb,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAF,IAAAA,OAAO,CAACgB,GAAG,IACTA,GAAG,CAACC,GAAJ,CAAQ,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACtB,UAAIA,KAAK,KAAKN,QAAd,EAAwB;AACtB,eAAO,EACL,GAAGG,GAAG,CAACH,QAAD,CADD;AAEL,WAACC,QAAD,GAAYC;AAFP,SAAP;AAID;;AACD,aAAOG,GAAP;AACD,KARD,CADK,CAAP;AAWD,GAbD;;AAeA,QAAMP,qBAAqB,GAAG,YAAY;AACxCH,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBV,IAAvB;AACA,UAAMnB,MAAM,CAACwC,IAAP,CAAYzC,QAAZ,EAAsB,WAAtB,EAAmCoB,IAAnC,CAAN;AACD,GAHD;;AAKA,QAAMsB,MAAM,GAAG,MAAM;AACnBrB,IAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUJ,cAAV,CAAD,CAAP;AACAf,IAAAA,MAAM,CAAC0C,MAAP,CAAc3C,QAAd,EAAwB,WAAxB,EAAqC,CAACgB,cAAD,CAArC;AACD,GAHD;;AAKA,QAAM4B,SAAS,GAAG,YAAY;AAC5B,UAAMC,UAAU,GAAG;AAAE/B,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,QAAQ,EAAE;AAA5B,KAAnB;AACAF,IAAAA,UAAU,CAACwB,GAAG,IACZA,GAAG,CAACC,GAAJ,CAASC,GAAD,IAAS;AACf,aAAO;AACLzB,QAAAA,MAAM,EAAE,QADH;AAELF,QAAAA,OAAO,EAAE,CAAC,GAAG2B,GAAG,CAAC3B,OAAR,EAAiBiC,UAAjB;AAFJ,OAAP;AAID,KALD,CADQ,CAAV;AAQA3C,IAAAA,MAAM,CAACK,UAAP,CAAkBuC,IAAlB,GAAyB;AAAExC,MAAAA,IAAI,EAAE;AAAR,KAAzB;AACAH,IAAAA,SAAS,CAACD,MAAD,CAAT,CAX4B,CAY5B;AACD,GAbD,CArFsC,CAmGtC;;;AAEA,QAAM6C,YAAY,GAAG,CAAC;AACpBX,IAAAA,KAAK,EAAEY,YADa;AAEpBT,IAAAA,GAAG,EAAE;AAAEC,MAAAA;AAAF,KAFe;AAGpBS,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF,KAHY;AAIpBjB,IAAAA;AAJoB,GAAD,KAKf;AACJ,UAAM,CAACG,KAAD,EAAQe,QAAR,IAAoBzD,KAAK,CAACE,QAAN,CAAeoD,YAAf,CAA1B;;AAEA,UAAMI,QAAQ,GAAGC,CAAC,IAAI;AACpBF,MAAAA,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASlB,KAAV,CAAR;AACD,KAFD;;AAIA,UAAMmB,MAAM,GAAG,MAAM;AACnBtB,MAAAA,YAAY,CAACO,KAAD,EAAQU,EAAR,EAAYd,KAAZ,CAAZ;AACD,KAFD;;AAIAzC,IAAAA,SAAS,CAAC,MAAM;AACdwD,MAAAA,QAAQ,CAACH,YAAD,CAAR;AACD,KAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;AAIA,wBAAQ;AAAO,MAAA,KAAK,EAAEZ,KAAd;AAAqB,MAAA,QAAQ,EAAEgB,QAA/B;AAAyC,MAAA,MAAM,EAAEG,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACD,GArBD;;AAuBA,QAAMC,aAAa,GAAG;AACpBC,IAAAA,IAAI,EAAEV;AADc,GAAtB;AAIA,QAAM;AACJW,IAAAA,aADI;AAEJC,IAAAA,iBAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA,IALI;AAMJC,IAAAA,eANI;AAOJC,IAAAA,WAPI;AAQJC,IAAAA,WARI;AASJC,IAAAA,SATI;AAUJC,IAAAA,QAVI;AAWJC,IAAAA,QAXI;AAYJC,IAAAA,YAZI;AAaJC,IAAAA,WAbI;AAcJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb;AAdH,MAeF5E,QAAQ,CACV;AACEe,IAAAA,OADF;AAEEQ,IAAAA,IAFF;AAGEoC,IAAAA,aAHF;AAIEkB,IAAAA,aAAa,EAAE,CAACpD,aAJlB;AAKEW,IAAAA;AALF,GADU,EAQVnC,aARU,CAfZ;AA0BAH,EAAAA,SAAS,CAAC,MAAM;AACd4B,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,GAFQ,EAEN,CAACH,IAAD,CAFM,CAAT;AAIA,sBACE,uDACE,+CAAWsC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,YAAY,CAACtB,GAAb,CAAiBqC,WAAW,iBAC3B,4CAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,WAAW,CAACE,OAAZ,CAAoBvC,GAApB,CAAwBW,MAAM,iBAC7B,4CAAQA,MAAM,CAAC6B,cAAP,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkC7B,MAAM,CAAC8B,MAAP,CAAc,QAAd,CAAlC,CADD,CADH,CADD,CADH,CADF,eAUE,+CAAWpB,iBAAiB,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGG,IAAI,CAACxB,GAAL,CAAS,CAACC,GAAD,EAAMyC,CAAN,KAAY;AACpBnB,IAAAA,UAAU,CAACtB,GAAD,CAAV;AACA,wBACE,4CAAQA,GAAG,CAAC0C,WAAJ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACG1C,GAAG,CAAC2C,KAAJ,CAAU5C,GAAV,CAAc6C,IAAI,IAAI;AACrB,0BAAO,4CAAQA,IAAI,CAACC,YAAL,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA8BD,IAAI,CAACJ,MAAL,CAAY,MAAZ,CAA9B,CAAP;AACD,KAFA,CADH,CADF;AAOD,GATA,CADH,CAVF,CADF,eAwBE;AAAQ,IAAA,OAAO,EAAErC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAxBF,eA2BE;AAAQ,IAAA,OAAO,EAAEE,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA3BF,eA8BE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAE,MAAMuB,QAAQ,CAAC,CAAD,CAA/B;AAAoC,IAAA,QAAQ,EAAE,CAACJ,eAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,IADH,CADF,EAGY,GAHZ,eAIE;AAAQ,IAAA,OAAO,EAAE,MAAMM,YAAY,EAAnC;AAAuC,IAAA,QAAQ,EAAE,CAACN,eAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,CAJF,EAMY,GANZ,eAOE;AAAQ,IAAA,OAAO,EAAE,MAAMK,QAAQ,EAA/B;AAAmC,IAAA,QAAQ,EAAE,CAACJ,WAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,CAPF,EASY,GATZ,eAUE;AAAQ,IAAA,OAAO,EAAE,MAAMG,QAAQ,CAACD,SAAS,GAAG,CAAb,CAA/B;AAAgD,IAAA,QAAQ,EAAE,CAACF,WAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,IADH,CAVF,EAYY,GAZZ,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACO,GADP,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGQ,SAAS,GAAG,CADf,UACsBP,WAAW,CAAClC,MADlC,CAFF,EAIY,GAJZ,CAbF,eAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACgB,GADhB,eAEE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,YAAY,EAAEyC,SAAS,GAAG,CAF5B;AAGE,IAAA,QAAQ,EAAEnB,CAAC,IAAI;AACb,YAAMS,IAAI,GAAGT,CAAC,CAACC,MAAF,CAASlB,KAAT,GAAiBiD,MAAM,CAAChC,CAAC,CAACC,MAAF,CAASlB,KAAV,CAAN,GAAyB,CAA1C,GAA8C,CAA3D;AACA+B,MAAAA,QAAQ,CAACL,IAAD,CAAR;AACD,KANH;AAOE,IAAA,KAAK,EAAE;AAAEwB,MAAAA,KAAK,EAAE;AAAT,KAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAnBF,EA8BU,GA9BV,eA+BE;AACE,IAAA,KAAK,EAAEb,QADT;AAEE,IAAA,QAAQ,EAAEpB,CAAC,IAAI;AACbiB,MAAAA,WAAW,CAACe,MAAM,CAAChC,CAAC,CAACC,MAAF,CAASlB,KAAV,CAAP,CAAX;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqBE,GAArB,CAAyBmC,QAAQ,iBAChC;AAAQ,IAAA,GAAG,EAAEA,QAAb;AAAuB,IAAA,KAAK,EAAEA,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACQA,QADR,CADD,CANH,CA/BF,CA9BF,CADF;AA6ED,CA3OD;;AA6OA,eAAe1E,KAAf","sourcesContent":["// @ts-nocheck\nimport React, { useEffect, useState } from 'react'\nimport { useTable, usePagination } from 'react-table'\nimport './Table.css'\n\nconst Table = ({ threadId, client }) => {\n  const [schema, setSchema] = useState({\n    $schema: 'http://json-schema.org/draft-07/schema#',\n    title: 'Astronaut',\n    type: 'object',\n    properties: {\n      _id: { type: 'string' },\n      name: { type: 'string' },\n      missions: {\n        type: 'number',\n        minimum: 0,\n      },\n    },\n  })\n\n  const [columns, setColumns] = useState([\n      {\n        Header: 'Astronauts',\n        columns: [\n          {\n            Header: 'Name',\n            accessor: 'name',\n          },\n          {\n            Header: 'Missions',\n            accessor: 'missions',\n          },\n        ],\n      },\n    ],\n  )\n  const emptyRowObject = { _id: Math.random().toString(36), name: \"\", missions: 0 }\n  const [data, setData] = useState([emptyRowObject])\n  // const [activeCollection, setActiveCollection] = useState(false)\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  useEffect(() => {\n    const existingCollection = async () => {\n      await client.getCollectionInfo(threadId, 'Astronaut')\n      // await client.create(threadId, 'Astronaut', data)\n      const list = await client.find(threadId, 'Astronaut', {})\n      setData(list.instancesList)\n      console.log('list2', list)\n    }\n    existingCollection()\n    // const createCollection = async () => {\n    //   await client.newCollection(threadId, 'Astronaut', schema)\n    //   await client.create(threadId, 'Astronaut', data)\n    // }\n    // if (!existingCollection) {\n    //   createCollection()\n    // }\n  }, [client, threadId])\n\n  useEffect(() => {\n    if (data.length > 1) {\n      saveCollectionUpdates()\n    }\n  }, [data, saveCollectionUpdates])\n\n  const updateMyData = async (rowIndex: number, columnId: string, value: any) => {\n    setSkipPageReset(true)\n    setData(old =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  const saveCollectionUpdates = async () => {\n    console.log('newDATA', data)\n    await client.save(threadId, 'Astronaut', data)\n  }\n\n  const addRow = () => {\n    setData([...data, emptyRowObject])\n    client.create(threadId, 'Astronaut', [emptyRowObject])\n  }\n\n  const addColumn = async () => {\n    const newColData = { Header: 'Cost', accessor: 'cost' }\n    setColumns(old =>\n      old.map((row) => {\n        return {\n          Header: 'Flying',\n          columns: [...row.columns, newColData]\n        }\n      })\n    )\n    schema.properties.cost = { type: 'number' }\n    setSchema(schema)\n    // await client.create(threadId, 'Astronaut', [rowObject])\n  }\n  // console.log('OCL', columns, schema)\n\n  const EditableCell = ({\n    value: initialValue,\n    row: { index },\n    column: { id },\n    updateMyData,\n  }) => {\n    const [value, setValue] = React.useState(initialValue)\n\n    const onChange = e => {\n      setValue(e.target.value)\n    }\n\n    const onBlur = () => {\n      updateMyData(index, id, value)\n    }\n\n    useEffect(() => {\n      setValue(initialValue)\n    }, [initialValue])\n\n    return (<input value={value} onChange={onChange} onBlur={onBlur} />)\n  }\n\n  const defaultColumn = {\n    Cell: EditableCell,\n  }\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      autoResetPage: !skipPageReset,\n      updateMyData,\n    },\n    usePagination\n  )\n\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <button onClick={addRow}>\n        add row\n      </button>\n      <button onClick={addColumn}>\n        add column\n      </button>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  )\n}\n\nexport default Table\n"]},"metadata":{},"sourceType":"module"}