{"ast":null,"code":"import { set, updateAll } from 'shades';\nexport default {\n  name: 'threads',\n  getReducer: () => {\n    const initialData = {\n      loading: false,\n      data: null\n    };\n    return (state = initialData, {\n      type,\n      payload,\n      err\n    }) => {\n      if (type.startsWith('THREADS') && type.endsWith('_START')) {\n        return set('loading')(true)(state);\n      }\n\n      if (type === 'THREADS_RESET') {\n        return initialData;\n      }\n\n      if (type === 'THREADS_FETCH_SUCCESS') {\n        return updateAll(set('data')(payload.results), set('loading')(false))(state);\n      }\n\n      if (type === 'THREADS_FETCH_FAILED') {\n        return updateAll(set('data')(null), set('loading')(false))(state);\n      }\n\n      return state;\n    };\n  },\n  doThreadsFetch: () => {\n    return ({\n      dispatch,\n      apiGet,\n      store\n    }) => {\n      dispatch({\n        type: 'THREADS_FETCH_START'\n      });\n      return apiGet(`v1/skills/`).then(payload => {\n        return dispatch({\n          type: 'THREADS_FETCH_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'THREADS_FETCH_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doThreadsCreate: () => {\n    return ({\n      dispatch,\n      apiPost,\n      store\n    }) => {\n      dispatch({\n        type: 'THREADS_ADD_START'\n      });\n      return apiPost('v1/skills/').then(payload => {\n        return dispatch({\n          type: 'THREADS_ADD_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'THREADS_ADD_FAILED',\n          err\n        });\n      });\n    };\n  },\n  selectThreadsLoading: state => state.threads.loading,\n  selectThreadsData: state => state.threads.data\n};","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/sushitable/src/bundles/threads.js"],"names":["set","updateAll","name","getReducer","initialData","loading","data","state","type","payload","err","startsWith","endsWith","results","doThreadsFetch","dispatch","apiGet","store","then","catch","doThreadsCreate","apiPost","selectThreadsLoading","threads","selectThreadsData"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,QAA+B,QAA/B;AAEA,eAAe;AACbC,EAAAA,IAAI,EAAE,SADO;AAEbC,EAAAA,UAAU,EAAE,MAAM;AAChB,UAAMC,WAAW,GAAG;AAClBC,MAAAA,OAAO,EAAE,KADS;AAElBC,MAAAA,IAAI,EAAE;AAFY,KAApB;AAIA,WAAO,CAACC,KAAK,GAAGH,WAAT,EAAsB;AAAEI,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,KAAtB,KAAiD;AACtD,UAAIF,IAAI,CAACG,UAAL,CAAgB,SAAhB,KAA8BH,IAAI,CAACI,QAAL,CAAc,QAAd,CAAlC,EAA2D;AACzD,eAAOZ,GAAG,CAAC,SAAD,CAAH,CAAe,IAAf,EAAqBO,KAArB,CAAP;AACD;;AAED,UAAIC,IAAI,KAAK,eAAb,EAA8B;AAC5B,eAAOJ,WAAP;AACD;;AAED,UAAII,IAAI,KAAK,uBAAb,EAAsC;AACpC,eAAOP,SAAS,CACdD,GAAG,CAAC,MAAD,CAAH,CAAYS,OAAO,CAACI,OAApB,CADc,EAEdb,GAAG,CAAC,SAAD,CAAH,CAAe,KAAf,CAFc,CAAT,CAGLO,KAHK,CAAP;AAID;;AAED,UAAIC,IAAI,KAAK,sBAAb,EAAqC;AACnC,eAAOP,SAAS,CACdD,GAAG,CAAC,MAAD,CAAH,CAAY,IAAZ,CADc,EAEdA,GAAG,CAAC,SAAD,CAAH,CAAe,KAAf,CAFc,CAAT,CAGLO,KAHK,CAAP;AAID;;AAED,aAAOA,KAAP;AACD,KAxBD;AAyBD,GAhCY;AAiCbO,EAAAA,cAAc,EAAE,MAAM;AACpB,WAAO,CAAC;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,MAAZ;AAAoBC,MAAAA;AAApB,KAAD,KAAiC;AACtCF,MAAAA,QAAQ,CAAC;AAAEP,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACA,aAAOQ,MAAM,CAAE,YAAF,CAAN,CAAqBE,IAArB,CAA2BT,OAAD,IAAa;AAC5C,eAAOM,QAAQ,CAAC;AAAEP,UAAAA,IAAI,EAAE,uBAAR;AAAiCC,UAAAA;AAAjC,SAAD,CAAf;AACD,OAFM,EAEJU,KAFI,CAEGT,GAAD,IAAS;AAChB,eAAOK,QAAQ,CAAC;AAAEP,UAAAA,IAAI,EAAE,sBAAR;AAAgCE,UAAAA;AAAhC,SAAD,CAAf;AACD,OAJM,CAAP;AAKD,KAPD;AAQD,GA1CY;AA2CbU,EAAAA,eAAe,EAAE,MAAM;AACrB,WAAO,CAAC;AAAEL,MAAAA,QAAF;AAAYM,MAAAA,OAAZ;AAAqBJ,MAAAA;AAArB,KAAD,KAAkC;AACvCF,MAAAA,QAAQ,CAAC;AAAEP,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACA,aAAOa,OAAO,CAAC,YAAD,CAAP,CAAsBH,IAAtB,CAA4BT,OAAD,IAAa;AAC7C,eAAOM,QAAQ,CAAC;AAAEP,UAAAA,IAAI,EAAE,qBAAR;AAA+BC,UAAAA;AAA/B,SAAD,CAAf;AACD,OAFM,EAEJU,KAFI,CAEGT,GAAD,IAAS;AAChB,eAAOK,QAAQ,CAAC;AAAEP,UAAAA,IAAI,EAAE,oBAAR;AAA8BE,UAAAA;AAA9B,SAAD,CAAf;AACD,OAJM,CAAP;AAKD,KAPD;AAQD,GApDY;AAqDbY,EAAAA,oBAAoB,EAAEf,KAAK,IAAIA,KAAK,CAACgB,OAAN,CAAclB,OArDhC;AAsDbmB,EAAAA,iBAAiB,EAAEjB,KAAK,IAAIA,KAAK,CAACgB,OAAN,CAAcjB;AAtD7B,CAAf","sourcesContent":["import { set, updateAll } from 'shades'\n\nexport default {\n  name: 'threads',\n  getReducer: () => {\n    const initialData = {\n      loading: false,\n      data: null\n    }\n    return (state = initialData, { type, payload, err }) => {\n      if (type.startsWith('THREADS') && type.endsWith('_START')) {\n        return set('loading')(true)(state)\n      }\n\n      if (type === 'THREADS_RESET') {\n        return initialData\n      }\n\n      if (type === 'THREADS_FETCH_SUCCESS') {\n        return updateAll(\n          set('data')(payload.results),\n          set('loading')(false)\n        )(state)\n      }\n\n      if (type === 'THREADS_FETCH_FAILED') {\n        return updateAll(\n          set('data')(null),\n          set('loading')(false)\n        )(state)\n      }\n\n      return state\n    }\n  },\n  doThreadsFetch: () => {\n    return ({ dispatch, apiGet, store }) => {\n      dispatch({ type: 'THREADS_FETCH_START' })\n      return apiGet(`v1/skills/`).then((payload) => {\n        return dispatch({ type: 'THREADS_FETCH_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'THREADS_FETCH_FAILED', err })\n      })\n    }\n  },\n  doThreadsCreate: () => {\n    return ({ dispatch, apiPost, store }) => {\n      dispatch({ type: 'THREADS_ADD_START' })\n      return apiPost('v1/skills/').then((payload) => {\n        return dispatch({ type: 'THREADS_ADD_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'THREADS_ADD_FAILED', err })\n      })\n    }\n  },\n  selectThreadsLoading: state => state.threads.loading,\n  selectThreadsData: state => state.threads.data,\n}\n"]},"metadata":{},"sourceType":"module"}