{"ast":null,"code":"var _jsxFileName = \"/Users/nassarhayat/apps/textiletable/dobby/src/components/table/Table.tsx\";\n// @ts-nocheck\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'redux-bundler-react';\nimport { useTable, usePagination } from 'react-table';\nimport Pagination from './Pagination';\nimport EditableCell from './EditableCell';\nimport './Table.css';\n\nconst Table = ({\n  collectionsActive,\n  collectionsData,\n  doCollectionsFetchData,\n  routeParams\n}) => {\n  const name = routeParams.collectionName;\n  const [columns, setColumns] = useState([{\n    Header: name || 'table',\n    columns: [{\n      Header: 'Name',\n      accessor: 'name'\n    }, {\n      Header: 'Missions',\n      accessor: 'missions'\n    }]\n  }]);\n  const [data, setData] = useState([]);\n  const [skipPageReset, setSkipPageReset] = useState(false);\n  useEffect(() => {\n    // collectionsActive && setSchema(collectionsActive.schema)\n    if (collectionsData) {\n      setData(collectionsData);\n    } else {\n      doCollectionsFetchData(name);\n    }\n  }, [name, collectionsActive, collectionsData]); // useEffect(() => {\n  //   if (data.length > 1) {\n  //     doCollectionsUpdate(name, data)\n  //   }\n  // }, [data])\n\n  const updateMyData = async (rowIndex, columnId, value) => {\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return { ...old[rowIndex],\n          [columnId]: value\n        };\n      }\n\n      return row;\n    }));\n  };\n\n  const addRow = () => {\n    const emptyRowObject = {\n      _id: Math.random().toString(36),\n      name: \"\",\n      count: 0\n    };\n    setData([...data, emptyRowObject]);\n    doCollectionsAddRow(name, emptyRowObject);\n  }; // const removeRow = async (instanceId: string) => {\n  //   doCollectionsDeleteRow(name, instanceId)\n  // }\n\n\n  const addColumn = async () => {\n    const newColData = {\n      Header: 'Field',\n      accessor: 'field'\n    };\n    setColumns(old => old.map(row => {\n      return {\n        Header: name,\n        columns: [...row.columns, newColData]\n      };\n    })); // @ts-ignore\n\n    schema.properties.field = {\n      type: 'string'\n    };\n    doCollectionsAddColumn(name, schema);\n  };\n\n  const defaultColumn = {\n    Cell: EditableCell\n  };\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    autoResetPage: !skipPageReset,\n    updateMyData\n  }, usePagination);\n  console.log(columns, 'ooo');\n  useEffect(() => {\n    setSkipPageReset(false);\n  }, [data]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map(column => {\n    console.log(column, 'DFDDF');\n    return /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 24\n      }\n    }), column.render('Header'));\n  })))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }), page.map(row => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 15\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 26\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, \"add row\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addColumn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, \"add column\"), /*#__PURE__*/React.createElement(Pagination, {\n    canPreviousPage: canPreviousPage,\n    canNextPage: canNextPage,\n    pageOptions: pageOptions,\n    pageCount: pageCount,\n    gotoPage: gotoPage,\n    previousPage: previousPage,\n    nextPage: nextPage,\n    gotoPage: gotoPage,\n    setPageSize: setPageSize,\n    pageIndex: pageIndex,\n    pageSize: pageSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default connect('doCollectionsFetchData', 'selectCollectionsActive', 'selectCollectionsData', 'selectRouteParams', Table);","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/dobby/src/components/table/Table.tsx"],"names":["React","useEffect","useState","connect","useTable","usePagination","Pagination","EditableCell","Table","collectionsActive","collectionsData","doCollectionsFetchData","routeParams","name","collectionName","columns","setColumns","Header","accessor","data","setData","skipPageReset","setSkipPageReset","updateMyData","rowIndex","columnId","value","old","map","row","index","addRow","emptyRowObject","_id","Math","random","toString","count","doCollectionsAddRow","addColumn","newColData","schema","properties","field","type","doCollectionsAddColumn","defaultColumn","Cell","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","autoResetPage","console","log","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport React, { useEffect, useState } from 'react'\nimport { connect } from 'redux-bundler-react'\nimport { useTable, usePagination, TableInstance } from 'react-table'\nimport Pagination from './Pagination'\nimport EditableCell from './EditableCell'\nimport './Table.css'\n\ntype TableProps = {\n  collectionsActive: any\n  collectionsData: any\n  doCollectionsFetchData: (name: string) => any\n  routeParams: any\n}\n\ntype Data = object\n\nconst Table = ({\n  collectionsActive,\n  collectionsData,\n  doCollectionsFetchData,\n  routeParams\n}: TableProps) => {\n  const name = routeParams.collectionName\n  const [columns, setColumns] = useState([\n      {\n        Header: name || 'table',\n        columns: [\n          {\n            Header: 'Name',\n            accessor: 'name',\n          },\n          {\n            Header: 'Missions',\n            accessor: 'missions',\n          },\n        ],\n      },\n    ],\n  )\n  const [data, setData] = useState([])\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  useEffect(() => {\n    // collectionsActive && setSchema(collectionsActive.schema)\n    if (collectionsData) {\n      setData(collectionsData)\n    } else {\n      doCollectionsFetchData(name)\n    }\n  }, [name, collectionsActive, collectionsData])\n\n  // useEffect(() => {\n  //   if (data.length > 1) {\n  //     doCollectionsUpdate(name, data)\n  //   }\n  // }, [data])\n\n  const updateMyData = async (rowIndex: number, columnId: string, value: any) => {\n    setSkipPageReset(true)\n    setData(old =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  const addRow = () => {\n    const emptyRowObject = { _id: Math.random().toString(36), name: \"\", count: 0 }\n    setData([...data, emptyRowObject])\n    doCollectionsAddRow(name, emptyRowObject)\n  }\n\n  // const removeRow = async (instanceId: string) => {\n  //   doCollectionsDeleteRow(name, instanceId)\n  // }\n\n  const addColumn = async () => {\n    const newColData = { Header: 'Field', accessor: 'field' }\n    setColumns(old =>\n      old.map((row) => {\n        return {\n          Header: name,\n          columns: [...row.columns, newColData]\n        }\n      })\n    )\n    // @ts-ignore\n    schema.properties.field = { type: 'string' }\n    doCollectionsAddColumn(name, schema)\n  }\n\n\n\n  const defaultColumn = {\n    Cell: EditableCell,\n  }\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable<Data>(\n    {\n      columns,\n      data,\n      defaultColumn,\n      autoResetPage: !skipPageReset,\n      updateMyData,\n    },\n    usePagination\n  ) as TableInstance<object>\n  console.log(columns, 'ooo')\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup: any) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column: any) => {\n                console.log(column, 'DFDDF')\n                return <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row: any) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell: any) => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <button onClick={addRow}>add row</button>\n      <button onClick={addColumn}>add column</button>\n      <Pagination\n        canPreviousPage={canPreviousPage}\n        canNextPage={canNextPage}\n        pageOptions={pageOptions}\n        pageCount={pageCount}\n        gotoPage={gotoPage}\n        previousPage={previousPage}\n        nextPage={nextPage}\n        gotoPage={gotoPage}\n        setPageSize={setPageSize}\n        pageIndex={pageIndex}\n        pageSize={pageSize}\n      />\n    </>\n  )\n}\n\nexport default connect(\n  'doCollectionsFetchData',\n  'selectCollectionsActive',\n  'selectCollectionsData',\n  'selectRouteParams',\n  Table\n)\n"]},"metadata":{},"sourceType":"module"}