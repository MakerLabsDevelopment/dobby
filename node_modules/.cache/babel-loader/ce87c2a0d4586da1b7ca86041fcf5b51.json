{"ast":null,"code":"'use strict'; // content of this file is extracted from jsonschema source\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar types = {\n  string: function testString(instance) {\n    return typeof instance === 'string';\n  },\n  number: function testNumber(instance) {\n    // isFinite returns false for NaN, Infinity, and -Infinity\n    return typeof instance === 'number' && isFinite(instance); // eslint-disable-line no-restricted-globals\n  },\n  integer: function testInteger(instance) {\n    return typeof instance === 'number' && instance % 1 === 0;\n  },\n  \"boolean\": function testBoolean(instance) {\n    return typeof instance === 'boolean';\n  },\n  array: function testArray(instance) {\n    return instance instanceof Array;\n  },\n  \"null\": function testNull(instance) {\n    return instance === null;\n  },\n  date: function testDate(instance) {\n    return instance instanceof Date;\n  },\n  any:\n  /* istanbul ignore next: not using this but keeping it here for sake of completeness */\n  function testAny(instance) {\n    // eslint-disable-line no-unused-vars\n    return true;\n  },\n  object: function testObject(instance) {\n    return instance && _typeof(instance) === 'object' && !(instance instanceof Array) && !(instance instanceof Date);\n  }\n};\nvar FORMAT_REGEXPS = {\n  'date-time': /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\\.\\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,\n  date: /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,\n  time: /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,\n  email: /^(?:[\\w!#$%&'*+-/=?^`{|}~]+\\.)*[\\w!#$%&'*+-/=?^`{|}~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/,\n  'ip-address': /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n  ipv6: /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n  uri: /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\\s]*$/,\n  color: /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/,\n  // hostname regex from: http://stackoverflow.com/a/1420225/5628\n  hostname: /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n  'host-name': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n  alpha: /^[a-zA-Z]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/,\n  'utc-millisec': function utcMillisec(input) {\n    return typeof input === 'string' && parseFloat(input) === parseInt(input, 10) && !isNaN(input);\n  },\n  // eslint-disable-line no-restricted-globals\n  regex\n  /* istanbul ignore next: not supporting regex right now */\n  : function regex(input) {\n    // eslint-disable-line space-before-function-paren\n    var result = true;\n\n    try {\n      new RegExp(input); // eslint-disable-line no-new\n    } catch (e) {\n      result = false;\n    }\n\n    return result;\n  },\n  style: /\\s*(.+?):\\s*([^;]+);?/g,\n  phone: /^\\+(?:[0-9] ?){6,14}[0-9]$/\n};\nFORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS['ip-address'];\n\nvar isFormat = function isFormat(input, format) {\n  if (typeof input === 'string' && FORMAT_REGEXPS[format] !== undefined) {\n    if (FORMAT_REGEXPS[format] instanceof RegExp) {\n      return FORMAT_REGEXPS[format].test(input);\n    }\n\n    if (typeof FORMAT_REGEXPS[format] === 'function') {\n      return FORMAT_REGEXPS[format](input);\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = {\n  types: types,\n  isFormat: isFormat,\n  FORMAT_REGEXPS: FORMAT_REGEXPS\n};","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/sushitable/node_modules/to-json-schema/lib/jsonSchemaHelpers.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","types","string","testString","instance","number","testNumber","isFinite","integer","testInteger","testBoolean","array","testArray","Array","testNull","date","testDate","Date","any","testAny","object","testObject","FORMAT_REGEXPS","time","email","ipv6","uri","color","hostname","alpha","alphanumeric","utcMillisec","input","parseFloat","parseInt","isNaN","regex","result","RegExp","e","style","phone","regexp","pattern","ipv4","isFormat","format","undefined","test","module","exports"],"mappings":"AAAA,a,CAAc;;AAEd,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAE1X,IAAIK,KAAK,GAAG;AACVC,EAAAA,MAAM,EAAE,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AACpC,WAAO,OAAOA,QAAP,KAAoB,QAA3B;AACD,GAHS;AAIVC,EAAAA,MAAM,EAAE,SAASC,UAAT,CAAoBF,QAApB,EAA8B;AACpC;AACA,WAAO,OAAOA,QAAP,KAAoB,QAApB,IAAgCG,QAAQ,CAACH,QAAD,CAA/C,CAFoC,CAEuB;AAC5D,GAPS;AAQVI,EAAAA,OAAO,EAAE,SAASC,WAAT,CAAqBL,QAArB,EAA+B;AACtC,WAAO,OAAOA,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,GAAG,CAAX,KAAiB,CAAxD;AACD,GAVS;AAWV,aAAW,SAASM,WAAT,CAAqBN,QAArB,EAA+B;AACxC,WAAO,OAAOA,QAAP,KAAoB,SAA3B;AACD,GAbS;AAcVO,EAAAA,KAAK,EAAE,SAASC,SAAT,CAAmBR,QAAnB,EAA6B;AAClC,WAAOA,QAAQ,YAAYS,KAA3B;AACD,GAhBS;AAiBV,UAAQ,SAASC,QAAT,CAAkBV,QAAlB,EAA4B;AAClC,WAAOA,QAAQ,KAAK,IAApB;AACD,GAnBS;AAoBVW,EAAAA,IAAI,EAAE,SAASC,QAAT,CAAkBZ,QAAlB,EAA4B;AAChC,WAAOA,QAAQ,YAAYa,IAA3B;AACD,GAtBS;AAuBVC,EAAAA,GAAG;AACH;AACA,WAASC,OAAT,CAAiBf,QAAjB,EAA2B;AACzB;AACA,WAAO,IAAP;AACD,GA5BS;AA6BVgB,EAAAA,MAAM,EAAE,SAASC,UAAT,CAAoBjB,QAApB,EAA8B;AACpC,WAAOA,QAAQ,IAAIT,OAAO,CAACS,QAAD,CAAP,KAAsB,QAAlC,IAA8C,EAAEA,QAAQ,YAAYS,KAAtB,CAA9C,IAA8E,EAAET,QAAQ,YAAYa,IAAtB,CAArF;AACD;AA/BS,CAAZ;AAiCA,IAAIK,cAAc,GAAG;AACnB,eAAa,6JADM;AAEnBP,EAAAA,IAAI,EAAE,0DAFa;AAGnBQ,EAAAA,IAAI,EAAE,mDAHa;AAInBC,EAAAA,KAAK,EAAE,kQAJY;AAKnB,gBAAc,6FALK;AAMnBC,EAAAA,IAAI,EAAE,yjCANa;AAOnBC,EAAAA,GAAG,EAAE,kCAPc;AAQnBC,EAAAA,KAAK,EAAE,4YARY;AASnB;AACAC,EAAAA,QAAQ,EAAE,+HAVS;AAWnB,eAAa,+HAXM;AAYnBC,EAAAA,KAAK,EAAE,aAZY;AAanBC,EAAAA,YAAY,EAAE,gBAbK;AAcnB,kBAAgB,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1C,WAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BC,UAAU,CAACD,KAAD,CAAV,KAAsBE,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAA3D,IAA0E,CAACG,KAAK,CAACH,KAAD,CAAvF;AACD,GAhBkB;AAiBnB;AACAI,EAAAA;AACA;AADK,IAEH,SAASA,KAAT,CAAeJ,KAAf,EAAsB;AACtB;AACA,QAAIK,MAAM,GAAG,IAAb;;AAEA,QAAI;AACF,UAAIC,MAAJ,CAAWN,KAAX,EADE,CACiB;AACpB,KAFD,CAEE,OAAOO,CAAP,EAAU;AACVF,MAAAA,MAAM,GAAG,KAAT;AACD;;AAED,WAAOA,MAAP;AACD,GA/BkB;AAgCnBG,EAAAA,KAAK,EAAE,wBAhCY;AAiCnBC,EAAAA,KAAK,EAAE;AAjCY,CAArB;AAmCAnB,cAAc,CAACoB,MAAf,GAAwBpB,cAAc,CAACc,KAAvC;AACAd,cAAc,CAACqB,OAAf,GAAyBrB,cAAc,CAACc,KAAxC;AACAd,cAAc,CAACsB,IAAf,GAAsBtB,cAAc,CAAC,YAAD,CAApC;;AAEA,IAAIuB,QAAQ,GAAG,SAASA,QAAT,CAAkBb,KAAlB,EAAyBc,MAAzB,EAAiC;AAC9C,MAAI,OAAOd,KAAP,KAAiB,QAAjB,IAA6BV,cAAc,CAACwB,MAAD,CAAd,KAA2BC,SAA5D,EAAuE;AACrE,QAAIzB,cAAc,CAACwB,MAAD,CAAd,YAAkCR,MAAtC,EAA8C;AAC5C,aAAOhB,cAAc,CAACwB,MAAD,CAAd,CAAuBE,IAAvB,CAA4BhB,KAA5B,CAAP;AACD;;AAED,QAAI,OAAOV,cAAc,CAACwB,MAAD,CAArB,KAAkC,UAAtC,EAAkD;AAChD,aAAOxB,cAAc,CAACwB,MAAD,CAAd,CAAuBd,KAAvB,CAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD,CAZD;;AAcAiB,MAAM,CAACC,OAAP,GAAiB;AACfjD,EAAAA,KAAK,EAAEA,KADQ;AAEf4C,EAAAA,QAAQ,EAAEA,QAFK;AAGfvB,EAAAA,cAAc,EAAEA;AAHD,CAAjB","sourcesContent":["'use strict'; // content of this file is extracted from jsonschema source\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar types = {\n  string: function testString(instance) {\n    return typeof instance === 'string';\n  },\n  number: function testNumber(instance) {\n    // isFinite returns false for NaN, Infinity, and -Infinity\n    return typeof instance === 'number' && isFinite(instance); // eslint-disable-line no-restricted-globals\n  },\n  integer: function testInteger(instance) {\n    return typeof instance === 'number' && instance % 1 === 0;\n  },\n  \"boolean\": function testBoolean(instance) {\n    return typeof instance === 'boolean';\n  },\n  array: function testArray(instance) {\n    return instance instanceof Array;\n  },\n  \"null\": function testNull(instance) {\n    return instance === null;\n  },\n  date: function testDate(instance) {\n    return instance instanceof Date;\n  },\n  any:\n  /* istanbul ignore next: not using this but keeping it here for sake of completeness */\n  function testAny(instance) {\n    // eslint-disable-line no-unused-vars\n    return true;\n  },\n  object: function testObject(instance) {\n    return instance && _typeof(instance) === 'object' && !(instance instanceof Array) && !(instance instanceof Date);\n  }\n};\nvar FORMAT_REGEXPS = {\n  'date-time': /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\\.\\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,\n  date: /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,\n  time: /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,\n  email: /^(?:[\\w!#$%&'*+-/=?^`{|}~]+\\.)*[\\w!#$%&'*+-/=?^`{|}~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/,\n  'ip-address': /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n  ipv6: /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n  uri: /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\\s]*$/,\n  color: /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/,\n  // hostname regex from: http://stackoverflow.com/a/1420225/5628\n  hostname: /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n  'host-name': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n  alpha: /^[a-zA-Z]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/,\n  'utc-millisec': function utcMillisec(input) {\n    return typeof input === 'string' && parseFloat(input) === parseInt(input, 10) && !isNaN(input);\n  },\n  // eslint-disable-line no-restricted-globals\n  regex\n  /* istanbul ignore next: not supporting regex right now */\n  : function regex(input) {\n    // eslint-disable-line space-before-function-paren\n    var result = true;\n\n    try {\n      new RegExp(input); // eslint-disable-line no-new\n    } catch (e) {\n      result = false;\n    }\n\n    return result;\n  },\n  style: /\\s*(.+?):\\s*([^;]+);?/g,\n  phone: /^\\+(?:[0-9] ?){6,14}[0-9]$/\n};\nFORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS['ip-address'];\n\nvar isFormat = function isFormat(input, format) {\n  if (typeof input === 'string' && FORMAT_REGEXPS[format] !== undefined) {\n    if (FORMAT_REGEXPS[format] instanceof RegExp) {\n      return FORMAT_REGEXPS[format].test(input);\n    }\n\n    if (typeof FORMAT_REGEXPS[format] === 'function') {\n      return FORMAT_REGEXPS[format](input);\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = {\n  types: types,\n  isFormat: isFormat,\n  FORMAT_REGEXPS: FORMAT_REGEXPS\n};"]},"metadata":{},"sourceType":"script"}