{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Users = void 0;\n\nconst loglevel_1 = __importDefault(require(\"loglevel\"));\n\nconst grpc_authentication_1 = require(\"@textile/grpc-authentication\");\n\nconst crypto_1 = require(\"@textile/crypto\");\n\nconst context_1 = require(\"@textile/context\");\n\nconst api_1 = require(\"./api\");\n\nconst logger = loglevel_1.default.getLogger('users');\n/**\n * Users provides a web-gRPC wrapper client for communicating with the Textile\n * Hub's web-gRPC enabled Users API.\n *\n * This API has the ability to:\n *\n *   - Register new users with a User Group key and obtain a new API Token\n *\n *   - Get and List all Threads created for/by the user in your app.\n *\n *   - Create an inbox for the user or send message to another user's inbox.\n *\n *   - Check, read, and delete messages in a user's inbox.\n *\n * @example\n * Initialize a the User API and list their threads.\n * ```typescript\n * import { Users, UserAuth } from '@textile/hub'\n *\n * const example = async (auth: UserAuth) => {\n *   const api = Users.withUserAuth(auth)\n *   const list = api.listThreads()\n *   return list\n * }\n * ```\n *\n * @example\n * Create a new inbox for the user\n * ```typescript\n * import { Users } from '@textile/hub'\n *\n * // This method requires you already authenticate the Users object.\n * async function setupMailbox (users: Users) {\n *   await users.setupMailbox()\n * }\n * ```\n *\n * @example\n * Send a message to a public key\n * ```typescript\n * import { Users, Identity, PublicKey  } from \"@textile/hub\"\n *\n * // This method requires you already authenticate the Users object.\n *\n * async function example(users: Users, from: Identity, to: PublicKey, message: string) {\n *   const encoder = new TextEncoder()\n *   const body = encoder.encode(message)\n *   return await users.sendMessage(from, to, body)\n * }\n * ```\n */\n\nclass Users extends grpc_authentication_1.GrpcAuthentication {\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.copyAuth}\n   *\n   * @example\n   * Copy an authenticated Users api instance to Buckets.\n   * ```tyepscript\n   * import { Buckets, Users } from '@textile/hub'\n   *\n   * const usersToBuckets = async (user: Users) => {\n   *   const buckets = Buckets.copyAuth(user)\n   *   return buckets\n   * }\n   * ```\n   *\n   * @example\n   * Copy an authenticated Buckets api instance to Users.\n   * ```tyepscript\n   * import { Buckets, Users } from '@textile/hub'\n   *\n   * const bucketsToUsers = async (buckets: Buckets) => {\n   *   const user = Users.copyAuth(buckets)\n   *   return user\n   * }\n   * ```\n   */\n  static copyAuth(auth, debug = false) {\n    return new Users(auth.context, debug);\n  }\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.withUserAuth}\n   *\n   * @example\n   * ```@typescript\n   * import { Users, UserAuth } from '@textile/hub'\n   *\n   * async function example (userAuth: UserAuth) {\n   *   const users = await Users.withUserAuth(userAuth)\n   * }\n   * ```\n   */\n\n\n  static withUserAuth(auth, host = context_1.defaultHost, debug = false) {\n    const res = super.withUserAuth(auth, host, debug);\n    return this.copyAuth(res, debug);\n  }\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.withKeyInfo}\n   *\n   * @example\n   * ```@typescript\n   * import { Users, KeyInfo } from '@textile/hub'\n   *\n   * async function start () {\n   *   const keyInfo: KeyInfo = {\n   *     key: '<api key>',\n   *     secret: '<api secret>'\n   *   }\n   *   const users = await Users.withKeyInfo(keyInfo)\n   * }\n   * ```\n   */\n\n\n  static withKeyInfo(key, host = context_1.defaultHost, debug = false) {\n    const _super = Object.create(null, {\n      withKeyInfo: {\n        get: () => super.withKeyInfo\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const auth = yield _super.withKeyInfo.call(this, key, host, debug);\n      return this.copyAuth(auth, debug);\n    });\n  }\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.withThread}\n   *\n   * @example\n   * ```@typescript\n   * import { Client, ThreadID } from '@textile/hub'\n   *\n   * async function example (threadID: ThreadID) {\n   *   const users = await Users.withThread(threadID)\n   * }\n   * ```\n   */\n\n\n  withThread(threadID) {\n    return super.withThread(threadID);\n  }\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.getToken}\n   *\n   * @example\n   * ```@typescript\n   * import { Users, PrivateKey } from '@textile/hub'\n   *\n   * async function example (users: Users, identity: PrivateKey) {\n   *   const token = await users.getToken(identity)\n   *   return token // already added to `users` scope\n   * }\n   * ```\n   */\n\n\n  getToken(identity) {\n    const _super = Object.create(null, {\n      getToken: {\n        get: () => super.getToken\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      return _super.getToken.call(this, identity);\n    });\n  }\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.getTokenChallenge}\n   *\n   * @example\n   * ```typescript\n   * import { Users, PrivateKey } from '@textile/hub'\n   *\n   * async function example (users: Users, identity: PrivateKey) {\n   *   const token = await users.getTokenChallenge(\n   *     identity.public.toString(),\n   *     (challenge: Uint8Array) => {\n   *       return new Promise((resolve, reject) => {\n   *         // This is where you should program PrivateKey to respond to challenge\n   *         // Read more here: https://docs.textile.io/tutorials/hub/production-auth/\n   *       })\n   *     }\n   *   )\n   *   return token\n   * }\n   * ```\n   */\n\n\n  getTokenChallenge(publicKey, callback) {\n    const _super = Object.create(null, {\n      getTokenChallenge: {\n        get: () => super.getTokenChallenge\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      return _super.getTokenChallenge.call(this, publicKey, callback);\n    });\n  }\n  /**\n   * Lists a users existing threads. This method\n   * requires a valid user, token, and session.\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    const list = await users.listThreads()\n   * }\n   * ```\n   */\n\n\n  listThreads() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.listThreads(this);\n    });\n  }\n  /**\n   * Gets a users existing thread by name.\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    const thread = await users.getThread('thread-name')\n   *    return thread\n   * }\n   * ```\n   */\n\n\n  getThread(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.getThread(this, name);\n    });\n  }\n  /**\n   * Setup a user's inbox. This is required for each new user.\n   * An inbox must be setup by the inbox owner (keys) before\n   * messages can be sent to it.\n   *\n   * @returns mailboxID\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    return await users.setupMailbox()\n   * }\n   * ```\n   */\n\n\n  setupMailbox() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.setupMailbox(this);\n    });\n  }\n  /**\n   * Returns the mailboxID of the current user if it exists.\n   *\n   * @returns {string} mailboxID\n   */\n\n\n  getMailboxID() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.getMailboxID(this);\n    });\n  }\n  /**\n   * A local user can author messages to remote user through their public-key\n   *\n   * @param from defines the local, sending, user. Any object that conforms to the Identity interface.\n   * @param to defines the remote, receiving user. Any object that conforms to the Public interface.\n   * @param body is the message body bytes in UInt8Array format.\n   *\n   * @example\n   * ```typescript\n   * import { Users, Identity, PublicKey  } from \"@textile/hub\"\n   *\n   * async function example(users: Users, from: Identity, to: PublicKey, message: string) {\n   *   const encoder = new TextEncoder()\n   *   const body = encoder.encode(message)\n   *   return await users.sendMessage(from, to, body)\n   * }\n   * ```\n   */\n\n\n  sendMessage(from, to, body) {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.debug('send message using keys');\n      const toBytes = crypto_1.extractPublicKeyBytes(to);\n      const fromBytes = crypto_1.extractPublicKeyBytes(from.public);\n      const fromBody = yield crypto_1.encrypt(body, fromBytes);\n      const fromSig = yield from.sign(fromBody);\n      const toBody = yield crypto_1.encrypt(body, toBytes);\n      const toSig = yield from.sign(toBody);\n      return api_1.sendMessage(this, from.public.toString(), to.toString(), toBody, toSig, fromBody, fromSig);\n    });\n  }\n  /**\n   * List the inbox of the local user\n   *\n   * @example\n   * ```typescript\n   * import { Users, Status } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    return await users.listInboxMessages({\n   *      limit: 5,\n   *      ascending: true,\n   *      status: Status.UNREAD,\n   *    })\n   * }\n   * ```\n   */\n\n\n  listInboxMessages(opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.listInboxMessages(this, opts);\n    });\n  }\n  /**\n   * List the sent messages of the local user\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    return await users.listSentboxMessages({\n   *      limit: 5,\n   *      ascending: true,\n   *    })\n   * }\n   * ```\n   */\n\n\n  listSentboxMessages(opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.listSentboxMessages(this, opts);\n    });\n  }\n  /**\n   * Mark a message as read\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    const res = await users.listInboxMessages({\n   *      limit: 1,\n   *      ascending: true,\n   *    })\n   *    if (res.length === 1) users.readInboxMessage(res[0].id)\n   * }\n   * ```\n   */\n\n\n  readInboxMessage(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.readInboxMessage(this, id);\n    });\n  }\n  /**\n   * Mark a message as read\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    const res = await users.listInboxMessages({\n   *      limit: 1,\n   *      ascending: true,\n   *    })\n   *    if (res.length === 1) users.deleteInboxMessage(res[0].id)\n   * }\n   * ```\n   */\n\n\n  deleteInboxMessage(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.deleteInboxMessage(this, id);\n    });\n  }\n  /**\n   * Mark a message as read\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    const res = await users.listSentboxMessages({\n   *      limit: 1,\n   *      ascending: true,\n   *    })\n   *    if (res.length === 1) users.deleteInboxMessage(res[0].id)\n   * }\n   * ```\n   */\n\n\n  deleteSentboxMessage(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return api_1.deleteSentboxMessage(this, id);\n    });\n  }\n  /**\n   * watchInbox watches the inbox for new mailbox events.\n   * Returns a listener of watch connectivity states.\n   * @returns listener. listener.close will stop watching.\n   * @param id the mailbox id\n   * @param callback handles each new mailbox event\n   *\n   * @example\n   * Listen and log all new inbox events\n   *\n   * ```typescript\n   * import { Users, MailboxEvent } from '@textile/hub'\n   *\n   * const callback = async (reply?: MailboxEvent, err?: Error) => {\n   *   if (!reply || !reply.message) return console.log('no message')\n   *   console.log(reply.type)\n   * }\n   *\n   * async function example (users: Users) {\n   *   const mailboxID = await users.getMailboxID()\n   *   const closer = await users.watchInbox(mailboxID, callback)\n   *   return closer\n   * }\n   * ```\n   *\n   * @example\n   * Decrypt a new message in local user's inbox sent by listener callback\n   *\n   * ```typescript\n   * import { Users, MailboxEvent, PrivateKey } from '@textile/hub'\n   *\n   * const userID = PrivateKey.fromRandom()\n   *\n   * const callback = async (reply?: MailboxEvent, err?: Error) => {\n   *   if (!reply || !reply.message) return console.log('no message')\n   *   const bodyBytes = await userID.decrypt(reply.message.body)\n   *\n   *   const decoder = new TextDecoder()\n   *   const body = decoder.decode(bodyBytes)\n   *\n   *   console.log(body)\n   * }\n   *\n   * // Requires userID already be authenticated to the Users API\n   * async function startListener(users: Users) {\n   *   const mailboxID = await users.getMailboxID()\n   *   const closer = await users.watchInbox(mailboxID, callback)\n   * }\n   * ```\n   */\n\n\n  watchInbox(id, callback) {\n    return api_1.watchMailbox(this, id, 'inbox', callback);\n  }\n  /**\n   * watchSentbox watches the sentbox for new mailbox events.\n   * Returns a listener of watch connectivity states.\n   * @returns listener. listener.close will stop watching.\n   * @param id the mailbox id\n   * @param callback handles each new mailbox event.\n   *\n   * @example\n   * The local user's own sentbox can be decrypted with their private key\n   *\n   * ```typescript\n   * import { Users, MailboxEvent, PrivateKey } from '@textile/hub'\n   *\n   * const userID = PrivateKey.fromRandom()\n   *\n   * const callback = async (reply?: MailboxEvent, err?: Error) => {\n   *   if (!reply || !reply.message) return console.log('no message')\n   *   const bodyBytes = await userID.decrypt(reply.message.body)\n   *\n   *   const decoder = new TextDecoder()\n   *   const body = decoder.decode(bodyBytes)\n   *\n   *   console.log(body)\n   * }\n   *\n   * // Requires userID already be authenticated to the Users API\n   * async function startListener(users: Users) {\n   *   const mailboxID = await users.getMailboxID()\n   *   const closer = await users.watchInbox(mailboxID, callback)\n   * }\n   * ```\n   */\n\n\n  watchSentbox(id, callback) {\n    return api_1.watchMailbox(this, id, 'sentbox', callback);\n  }\n\n}\n\nexports.Users = Users;","map":{"version":3,"sources":["../src/users.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AAEA,MAAA,qBAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,MAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAmBA,MAAM,MAAM,GAAG,UAAA,CAAA,OAAA,CAAI,SAAJ,CAAc,OAAd,CAAf;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,MAAa,KAAb,SAA2B,qBAAA,CAAA,kBAA3B,CAA6C;AAC3C;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAAO,QAAP,CAAgB,IAAhB,EAA0C,KAAK,GAAG,KAAlD,EAAuD;AACrD,WAAO,IAAI,KAAJ,CAAU,IAAI,CAAC,OAAf,EAAwB,KAAxB,CAAP;AACD;AACD;;;;;;;;;;;;;;AAYA,SAAO,YAAP,CAAoB,IAApB,EAAgE,IAAI,GAAG,SAAA,CAAA,WAAvE,EAAoF,KAAK,GAAG,KAA5F,EAAiG;AAC/F,UAAM,GAAG,GAAG,MAAM,YAAN,CAAmB,IAAnB,EAAyB,IAAzB,EAA+B,KAA/B,CAAZ;AACA,WAAO,KAAK,QAAL,CAAc,GAAd,EAAmB,KAAnB,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;AAgBA,SAAa,WAAb,CAAyB,GAAzB,EAAuC,IAAI,GAAG,SAAA,CAAA,WAA9C,EAA2D,KAAK,GAAG,KAAnE,EAAwE;;;;;;;;AACtE,YAAM,IAAI,GAAG,MAAM,MAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,EAAkB,GAAlB,EAAuB,IAAvB,EAA6B,KAA7B,CAAnB;AACA,aAAO,KAAK,QAAL,CAAc,IAAd,EAAoB,KAApB,CAAP;AACD,K;AAAA;AAED;;;;;;;;;;;;;;AAYA,EAAA,UAAU,CAAC,QAAD,EAAkB;AAC1B,WAAO,MAAM,UAAN,CAAiB,QAAjB,CAAP;AACD;AAED;;;;;;;;;;;;;;;AAaM,EAAA,QAAQ,CAAC,QAAD,EAAmB;;;;;;;;AAC/B,aAAO,MAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd,EAAe,QAAf,CAAP;AACD,K;AAAA;AAED;;;;;;;;;;;;;;;;;;;;;;;AAqBM,EAAA,iBAAiB,CACrB,SADqB,EAErB,QAFqB,EAEgD;;;;;;;;AAErE,aAAO,MAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,EAAwB,SAAxB,EAAmC,QAAnC,CAAP;AACD,K;AAAA;AAED;;;;;;;;;;;;;;;AAaM,EAAA,WAAW,GAAA;;AACf,aAAO,KAAA,CAAA,WAAA,CAAY,IAAZ,CAAP;AACD,K;AAAA;AAED;;;;;;;;;;;;;;;AAaM,EAAA,SAAS,CAAC,IAAD,EAAa;;AAC1B,aAAO,KAAA,CAAA,SAAA,CAAU,IAAV,EAAgB,IAAhB,CAAP;AACD,K;AAAA;AAED;;;;;;;;;;;;;;;;;;AAgBM,EAAA,YAAY,GAAA;;AAChB,aAAO,KAAA,CAAA,YAAA,CAAa,IAAb,CAAP;AACD,K;AAAA;AAED;;;;;;;AAKM,EAAA,YAAY,GAAA;;AAChB,aAAO,KAAA,CAAA,YAAA,CAAa,IAAb,CAAP;AACD,K;AAAA;AAED;;;;;;;;;;;;;;;;;;;;AAkBM,EAAA,WAAW,CAAC,IAAD,EAAiB,EAAjB,EAA6B,IAA7B,EAA6C;;AAC5D,MAAA,MAAM,CAAC,KAAP,CAAa,yBAAb;AACA,YAAM,OAAO,GAAG,QAAA,CAAA,qBAAA,CAAsB,EAAtB,CAAhB;AACA,YAAM,SAAS,GAAG,QAAA,CAAA,qBAAA,CAAsB,IAAI,CAAC,MAA3B,CAAlB;AACA,YAAM,QAAQ,GAAG,MAAM,QAAA,CAAA,OAAA,CAAQ,IAAR,EAAc,SAAd,CAAvB;AACA,YAAM,OAAO,GAAG,MAAM,IAAI,CAAC,IAAL,CAAU,QAAV,CAAtB;AACA,YAAM,MAAM,GAAG,MAAM,QAAA,CAAA,OAAA,CAAQ,IAAR,EAAc,OAAd,CAArB;AACA,YAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAL,CAAU,MAAV,CAApB;AACA,aAAO,KAAA,CAAA,WAAA,CAAY,IAAZ,EAAkB,IAAI,CAAC,MAAL,CAAY,QAAZ,EAAlB,EAA0C,EAAE,CAAC,QAAH,EAA1C,EAAyD,MAAzD,EAAiE,KAAjE,EAAwE,QAAxE,EAAkF,OAAlF,CAAP;AACD,K;AAAA;AAED;;;;;;;;;;;;;;;;;;AAgBM,EAAA,iBAAiB,CAAC,IAAD,EAAwB;;AAC7C,aAAO,KAAA,CAAA,iBAAA,CAAkB,IAAlB,EAAwB,IAAxB,CAAP;AACD,K;AAAA;AAED;;;;;;;;;;;;;;;;;AAeM,EAAA,mBAAmB,CAAC,IAAD,EAA0B;;AACjD,aAAO,KAAA,CAAA,mBAAA,CAAoB,IAApB,EAA0B,IAA1B,CAAP;AACD,K;AAAA;AAED;;;;;;;;;;;;;;;;;;AAgBM,EAAA,gBAAgB,CAAC,EAAD,EAAW;;AAC/B,aAAO,KAAA,CAAA,gBAAA,CAAiB,IAAjB,EAAuB,EAAvB,CAAP;AACD,K;AAAA;AAED;;;;;;;;;;;;;;;;;;AAgBM,EAAA,kBAAkB,CAAC,EAAD,EAAW;;AACjC,aAAO,KAAA,CAAA,kBAAA,CAAmB,IAAnB,EAAyB,EAAzB,CAAP;AACD,K;AAAA;AAED;;;;;;;;;;;;;;;;;;AAgBM,EAAA,oBAAoB,CAAC,EAAD,EAAW;;AACnC,aAAO,KAAA,CAAA,oBAAA,CAAqB,IAArB,EAA2B,EAA3B,CAAP;AACD,K;AAAA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,EAAA,UAAU,CAAC,EAAD,EAAa,QAAb,EAAkE;AAC1E,WAAO,KAAA,CAAA,YAAA,CAAa,IAAb,EAAmB,EAAnB,EAAuB,OAAvB,EAAgC,QAAhC,CAAP;AACD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,EAAA,YAAY,CAAC,EAAD,EAAa,QAAb,EAAkE;AAC5E,WAAO,KAAA,CAAA,YAAA,CAAa,IAAb,EAAmB,EAAnB,EAAuB,SAAvB,EAAkC,QAAlC,CAAP;AACD;;AAvZ0C;;AAA7C,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Users = void 0;\nconst loglevel_1 = __importDefault(require(\"loglevel\"));\nconst grpc_authentication_1 = require(\"@textile/grpc-authentication\");\nconst crypto_1 = require(\"@textile/crypto\");\nconst context_1 = require(\"@textile/context\");\nconst api_1 = require(\"./api\");\nconst logger = loglevel_1.default.getLogger('users');\n/**\n * Users provides a web-gRPC wrapper client for communicating with the Textile\n * Hub's web-gRPC enabled Users API.\n *\n * This API has the ability to:\n *\n *   - Register new users with a User Group key and obtain a new API Token\n *\n *   - Get and List all Threads created for/by the user in your app.\n *\n *   - Create an inbox for the user or send message to another user's inbox.\n *\n *   - Check, read, and delete messages in a user's inbox.\n *\n * @example\n * Initialize a the User API and list their threads.\n * ```typescript\n * import { Users, UserAuth } from '@textile/hub'\n *\n * const example = async (auth: UserAuth) => {\n *   const api = Users.withUserAuth(auth)\n *   const list = api.listThreads()\n *   return list\n * }\n * ```\n *\n * @example\n * Create a new inbox for the user\n * ```typescript\n * import { Users } from '@textile/hub'\n *\n * // This method requires you already authenticate the Users object.\n * async function setupMailbox (users: Users) {\n *   await users.setupMailbox()\n * }\n * ```\n *\n * @example\n * Send a message to a public key\n * ```typescript\n * import { Users, Identity, PublicKey  } from \"@textile/hub\"\n *\n * // This method requires you already authenticate the Users object.\n *\n * async function example(users: Users, from: Identity, to: PublicKey, message: string) {\n *   const encoder = new TextEncoder()\n *   const body = encoder.encode(message)\n *   return await users.sendMessage(from, to, body)\n * }\n * ```\n */\nclass Users extends grpc_authentication_1.GrpcAuthentication {\n    /**\n     * {@inheritDoc @textile/hub#GrpcAuthentication.copyAuth}\n     *\n     * @example\n     * Copy an authenticated Users api instance to Buckets.\n     * ```tyepscript\n     * import { Buckets, Users } from '@textile/hub'\n     *\n     * const usersToBuckets = async (user: Users) => {\n     *   const buckets = Buckets.copyAuth(user)\n     *   return buckets\n     * }\n     * ```\n     *\n     * @example\n     * Copy an authenticated Buckets api instance to Users.\n     * ```tyepscript\n     * import { Buckets, Users } from '@textile/hub'\n     *\n     * const bucketsToUsers = async (buckets: Buckets) => {\n     *   const user = Users.copyAuth(buckets)\n     *   return user\n     * }\n     * ```\n     */\n    static copyAuth(auth, debug = false) {\n        return new Users(auth.context, debug);\n    }\n    /**\n     * {@inheritDoc @textile/hub#GrpcAuthentication.withUserAuth}\n     *\n     * @example\n     * ```@typescript\n     * import { Users, UserAuth } from '@textile/hub'\n     *\n     * async function example (userAuth: UserAuth) {\n     *   const users = await Users.withUserAuth(userAuth)\n     * }\n     * ```\n     */\n    static withUserAuth(auth, host = context_1.defaultHost, debug = false) {\n        const res = super.withUserAuth(auth, host, debug);\n        return this.copyAuth(res, debug);\n    }\n    /**\n     * {@inheritDoc @textile/hub#GrpcAuthentication.withKeyInfo}\n     *\n     * @example\n     * ```@typescript\n     * import { Users, KeyInfo } from '@textile/hub'\n     *\n     * async function start () {\n     *   const keyInfo: KeyInfo = {\n     *     key: '<api key>',\n     *     secret: '<api secret>'\n     *   }\n     *   const users = await Users.withKeyInfo(keyInfo)\n     * }\n     * ```\n     */\n    static withKeyInfo(key, host = context_1.defaultHost, debug = false) {\n        const _super = Object.create(null, {\n            withKeyInfo: { get: () => super.withKeyInfo }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            const auth = yield _super.withKeyInfo.call(this, key, host, debug);\n            return this.copyAuth(auth, debug);\n        });\n    }\n    /**\n     * {@inheritDoc @textile/hub#GrpcAuthentication.withThread}\n     *\n     * @example\n     * ```@typescript\n     * import { Client, ThreadID } from '@textile/hub'\n     *\n     * async function example (threadID: ThreadID) {\n     *   const users = await Users.withThread(threadID)\n     * }\n     * ```\n     */\n    withThread(threadID) {\n        return super.withThread(threadID);\n    }\n    /**\n     * {@inheritDoc @textile/hub#GrpcAuthentication.getToken}\n     *\n     * @example\n     * ```@typescript\n     * import { Users, PrivateKey } from '@textile/hub'\n     *\n     * async function example (users: Users, identity: PrivateKey) {\n     *   const token = await users.getToken(identity)\n     *   return token // already added to `users` scope\n     * }\n     * ```\n     */\n    getToken(identity) {\n        const _super = Object.create(null, {\n            getToken: { get: () => super.getToken }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            return _super.getToken.call(this, identity);\n        });\n    }\n    /**\n     * {@inheritDoc @textile/hub#GrpcAuthentication.getTokenChallenge}\n     *\n     * @example\n     * ```typescript\n     * import { Users, PrivateKey } from '@textile/hub'\n     *\n     * async function example (users: Users, identity: PrivateKey) {\n     *   const token = await users.getTokenChallenge(\n     *     identity.public.toString(),\n     *     (challenge: Uint8Array) => {\n     *       return new Promise((resolve, reject) => {\n     *         // This is where you should program PrivateKey to respond to challenge\n     *         // Read more here: https://docs.textile.io/tutorials/hub/production-auth/\n     *       })\n     *     }\n     *   )\n     *   return token\n     * }\n     * ```\n     */\n    getTokenChallenge(publicKey, callback) {\n        const _super = Object.create(null, {\n            getTokenChallenge: { get: () => super.getTokenChallenge }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            return _super.getTokenChallenge.call(this, publicKey, callback);\n        });\n    }\n    /**\n     * Lists a users existing threads. This method\n     * requires a valid user, token, and session.\n     *\n     * @example\n     * ```typescript\n     * import { Users } from \"@textile/hub\"\n     *\n     * async function example(users: Users) {\n     *    const list = await users.listThreads()\n     * }\n     * ```\n     */\n    listThreads() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.listThreads(this);\n        });\n    }\n    /**\n     * Gets a users existing thread by name.\n     *\n     * @example\n     * ```typescript\n     * import { Users } from \"@textile/hub\"\n     *\n     * async function example(users: Users) {\n     *    const thread = await users.getThread('thread-name')\n     *    return thread\n     * }\n     * ```\n     */\n    getThread(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.getThread(this, name);\n        });\n    }\n    /**\n     * Setup a user's inbox. This is required for each new user.\n     * An inbox must be setup by the inbox owner (keys) before\n     * messages can be sent to it.\n     *\n     * @returns mailboxID\n     *\n     * @example\n     * ```typescript\n     * import { Users } from \"@textile/hub\"\n     *\n     * async function example(users: Users) {\n     *    return await users.setupMailbox()\n     * }\n     * ```\n     */\n    setupMailbox() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.setupMailbox(this);\n        });\n    }\n    /**\n     * Returns the mailboxID of the current user if it exists.\n     *\n     * @returns {string} mailboxID\n     */\n    getMailboxID() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.getMailboxID(this);\n        });\n    }\n    /**\n     * A local user can author messages to remote user through their public-key\n     *\n     * @param from defines the local, sending, user. Any object that conforms to the Identity interface.\n     * @param to defines the remote, receiving user. Any object that conforms to the Public interface.\n     * @param body is the message body bytes in UInt8Array format.\n     *\n     * @example\n     * ```typescript\n     * import { Users, Identity, PublicKey  } from \"@textile/hub\"\n     *\n     * async function example(users: Users, from: Identity, to: PublicKey, message: string) {\n     *   const encoder = new TextEncoder()\n     *   const body = encoder.encode(message)\n     *   return await users.sendMessage(from, to, body)\n     * }\n     * ```\n     */\n    sendMessage(from, to, body) {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger.debug('send message using keys');\n            const toBytes = crypto_1.extractPublicKeyBytes(to);\n            const fromBytes = crypto_1.extractPublicKeyBytes(from.public);\n            const fromBody = yield crypto_1.encrypt(body, fromBytes);\n            const fromSig = yield from.sign(fromBody);\n            const toBody = yield crypto_1.encrypt(body, toBytes);\n            const toSig = yield from.sign(toBody);\n            return api_1.sendMessage(this, from.public.toString(), to.toString(), toBody, toSig, fromBody, fromSig);\n        });\n    }\n    /**\n     * List the inbox of the local user\n     *\n     * @example\n     * ```typescript\n     * import { Users, Status } from \"@textile/hub\"\n     *\n     * async function example(users: Users) {\n     *    return await users.listInboxMessages({\n     *      limit: 5,\n     *      ascending: true,\n     *      status: Status.UNREAD,\n     *    })\n     * }\n     * ```\n     */\n    listInboxMessages(opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.listInboxMessages(this, opts);\n        });\n    }\n    /**\n     * List the sent messages of the local user\n     *\n     * @example\n     * ```typescript\n     * import { Users } from \"@textile/hub\"\n     *\n     * async function example(users: Users) {\n     *    return await users.listSentboxMessages({\n     *      limit: 5,\n     *      ascending: true,\n     *    })\n     * }\n     * ```\n     */\n    listSentboxMessages(opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.listSentboxMessages(this, opts);\n        });\n    }\n    /**\n     * Mark a message as read\n     *\n     * @example\n     * ```typescript\n     * import { Users } from \"@textile/hub\"\n     *\n     * async function example(users: Users) {\n     *    const res = await users.listInboxMessages({\n     *      limit: 1,\n     *      ascending: true,\n     *    })\n     *    if (res.length === 1) users.readInboxMessage(res[0].id)\n     * }\n     * ```\n     */\n    readInboxMessage(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.readInboxMessage(this, id);\n        });\n    }\n    /**\n     * Mark a message as read\n     *\n     * @example\n     * ```typescript\n     * import { Users } from \"@textile/hub\"\n     *\n     * async function example(users: Users) {\n     *    const res = await users.listInboxMessages({\n     *      limit: 1,\n     *      ascending: true,\n     *    })\n     *    if (res.length === 1) users.deleteInboxMessage(res[0].id)\n     * }\n     * ```\n     */\n    deleteInboxMessage(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.deleteInboxMessage(this, id);\n        });\n    }\n    /**\n     * Mark a message as read\n     *\n     * @example\n     * ```typescript\n     * import { Users } from \"@textile/hub\"\n     *\n     * async function example(users: Users) {\n     *    const res = await users.listSentboxMessages({\n     *      limit: 1,\n     *      ascending: true,\n     *    })\n     *    if (res.length === 1) users.deleteInboxMessage(res[0].id)\n     * }\n     * ```\n     */\n    deleteSentboxMessage(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return api_1.deleteSentboxMessage(this, id);\n        });\n    }\n    /**\n     * watchInbox watches the inbox for new mailbox events.\n     * Returns a listener of watch connectivity states.\n     * @returns listener. listener.close will stop watching.\n     * @param id the mailbox id\n     * @param callback handles each new mailbox event\n     *\n     * @example\n     * Listen and log all new inbox events\n     *\n     * ```typescript\n     * import { Users, MailboxEvent } from '@textile/hub'\n     *\n     * const callback = async (reply?: MailboxEvent, err?: Error) => {\n     *   if (!reply || !reply.message) return console.log('no message')\n     *   console.log(reply.type)\n     * }\n     *\n     * async function example (users: Users) {\n     *   const mailboxID = await users.getMailboxID()\n     *   const closer = await users.watchInbox(mailboxID, callback)\n     *   return closer\n     * }\n     * ```\n     *\n     * @example\n     * Decrypt a new message in local user's inbox sent by listener callback\n     *\n     * ```typescript\n     * import { Users, MailboxEvent, PrivateKey } from '@textile/hub'\n     *\n     * const userID = PrivateKey.fromRandom()\n     *\n     * const callback = async (reply?: MailboxEvent, err?: Error) => {\n     *   if (!reply || !reply.message) return console.log('no message')\n     *   const bodyBytes = await userID.decrypt(reply.message.body)\n     *\n     *   const decoder = new TextDecoder()\n     *   const body = decoder.decode(bodyBytes)\n     *\n     *   console.log(body)\n     * }\n     *\n     * // Requires userID already be authenticated to the Users API\n     * async function startListener(users: Users) {\n     *   const mailboxID = await users.getMailboxID()\n     *   const closer = await users.watchInbox(mailboxID, callback)\n     * }\n     * ```\n     */\n    watchInbox(id, callback) {\n        return api_1.watchMailbox(this, id, 'inbox', callback);\n    }\n    /**\n     * watchSentbox watches the sentbox for new mailbox events.\n     * Returns a listener of watch connectivity states.\n     * @returns listener. listener.close will stop watching.\n     * @param id the mailbox id\n     * @param callback handles each new mailbox event.\n     *\n     * @example\n     * The local user's own sentbox can be decrypted with their private key\n     *\n     * ```typescript\n     * import { Users, MailboxEvent, PrivateKey } from '@textile/hub'\n     *\n     * const userID = PrivateKey.fromRandom()\n     *\n     * const callback = async (reply?: MailboxEvent, err?: Error) => {\n     *   if (!reply || !reply.message) return console.log('no message')\n     *   const bodyBytes = await userID.decrypt(reply.message.body)\n     *\n     *   const decoder = new TextDecoder()\n     *   const body = decoder.decode(bodyBytes)\n     *\n     *   console.log(body)\n     * }\n     *\n     * // Requires userID already be authenticated to the Users API\n     * async function startListener(users: Users) {\n     *   const mailboxID = await users.getMailboxID()\n     *   const closer = await users.watchInbox(mailboxID, callback)\n     * }\n     * ```\n     */\n    watchSentbox(id, callback) {\n        return api_1.watchMailbox(this, id, 'sentbox', callback);\n    }\n}\nexports.Users = Users;\n//# sourceMappingURL=users.js.map"]},"metadata":{},"sourceType":"script"}