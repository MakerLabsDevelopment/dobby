{"ast":null,"code":"var _jsxFileName = \"/Users/nassarhayat/apps/textiletable/js-examples/bucket-photo-gallery/src/Table.tsx\";\n// @ts-nocheck\nimport React, { useMemo, useState } from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport './Table.css';\nimport makeData from './MakeData';\n\nconst Table = ({\n  rows\n}) => {\n  const columns = useMemo(() => [{\n    Header: 'Name',\n    columns: [{\n      Header: 'First Name',\n      accessor: 'firstName'\n    }, {\n      Header: 'Last Name',\n      accessor: 'lastName'\n    }]\n  }], []);\n  console.log(rows, 'ROWS');\n  const [data, setData] = useState(() => makeData(20));\n  const [skipPageReset, setSkipPageReset] = useState(false); // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return { ...old[rowIndex],\n          [columnId]: value\n        };\n      }\n\n      return row;\n    }));\n  };\n\n  const EditableCell = ({\n    value: initialValue,\n    row: {\n      index\n    },\n    column: {\n      id\n    },\n    updateMyData // This is a custom function that we supplied to our table instance\n\n  }) => {\n    // We need to keep and update the state of the cell normally\n    const [value, setValue] = React.useState(initialValue);\n\n    const onChange = e => {\n      setValue(e.target.value);\n    }; // We'll only update the external data when the input is blurred\n\n\n    const onBlur = () => {\n      updateMyData(index, id, value);\n    }; // If the initialValue is changed external, sync it up with our state\n\n\n    React.useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n    return /*#__PURE__*/React.createElement(\"input\", {\n      value: value,\n      onChange: onChange,\n      onBlur: onBlur,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    });\n  }; // Set our editable cell renderer as the default Cell renderer\n\n\n  const defaultColumn = {\n    Cell: EditableCell\n  }; // For this example, we're using pagination to illustrate how to stop\n  // the current page from resetting when our data changes\n  // Otherwise, nothing is different here.\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    // updateMyData isn't part of the API, but\n    // anything we put into these options will\n    // automatically be available on the instance.\n    // That way we can call this function from our\n    // cell renderer!\n    updateMyData\n  }, usePagination); // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n  React.useEffect(() => {\n    setSkipPageReset(false);\n  }, [data]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }), column.render('Header')))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }), page.map((row, i) => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 26\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => gotoPage(0),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, '<<'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => previousPage(),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, '<'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => nextPage(),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, '>'), ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => gotoPage(pageCount - 1),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, '>>'), ' ', /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, \"Page\", ' ', /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, pageIndex + 1, \" of \", pageOptions.length), ' '), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, \"| Go to page:\", ' ', /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: e => {\n      const page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  })), ' ', /*#__PURE__*/React.createElement(\"select\", {\n    value: pageSize,\n    onChange: e => {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, [10, 20, 30, 40, 50].map(pageSize => /*#__PURE__*/React.createElement(\"option\", {\n    key: pageSize,\n    value: pageSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }, \"Show \", pageSize)))));\n};\n\nexport default Table;","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/js-examples/bucket-photo-gallery/src/Table.tsx"],"names":["React","useMemo","useState","useTable","usePagination","makeData","Table","rows","columns","Header","accessor","console","log","data","setData","skipPageReset","setSkipPageReset","updateMyData","rowIndex","columnId","value","old","map","row","index","EditableCell","initialValue","column","id","setValue","onChange","e","target","onBlur","useEffect","defaultColumn","Cell","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","autoResetPage","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","length","Number","width"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport React, { useMemo, useState } from 'react'\nimport { useTable, usePagination } from 'react-table'\nimport './Table.css';\nimport makeData from './MakeData'\n\ninterface Test {\n  col1: string\n  col2: string\n}\n\nconst Table = ({ rows }) => {\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Name',\n        columns: [\n          {\n            Header: 'First Name',\n            accessor: 'firstName',\n          },\n          {\n            Header: 'Last Name',\n            accessor: 'lastName',\n          },\n        ],\n      },\n    ],\n    []\n  )\n  console.log(rows, 'ROWS')\n  const [data, setData] = useState(() => makeData(20))\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData(old =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  const EditableCell = ({\n    value: initialValue,\n    row: { index },\n    column: { id },\n    updateMyData, // This is a custom function that we supplied to our table instance\n  }) => {\n    // We need to keep and update the state of the cell normally\n    const [value, setValue] = React.useState(initialValue)\n\n    const onChange = e => {\n      setValue(e.target.value)\n    }\n\n    // We'll only update the external data when the input is blurred\n    const onBlur = () => {\n      updateMyData(index, id, value)\n    }\n\n    // If the initialValue is changed external, sync it up with our state\n    React.useEffect(() => {\n      setValue(initialValue)\n    }, [initialValue])\n\n    return (<input value={value} onChange={onChange} onBlur={onBlur} />)\n  }\n\n  // Set our editable cell renderer as the default Cell renderer\n  const defaultColumn = {\n    Cell: EditableCell,\n  }\n\n  // For this example, we're using pagination to illustrate how to stop\n  // the current page from resetting when our data changes\n  // Otherwise, nothing is different here.\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      // updateMyData isn't part of the API, but\n      // anything we put into these options will\n      // automatically be available on the instance.\n      // That way we can call this function from our\n      // cell renderer!\n      updateMyData,\n    },\n    usePagination\n  )\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  React.useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  )\n}\n\nexport default Table\n"]},"metadata":{},"sourceType":"module"}