{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toBuffer = exports.toString = void 0;\n\nconst threads_id_1 = require(\"@textile/threads-id\");\n\nconst varint_1 = __importDefault(require(\"varint\"));\n\nconst protocols_1 = require(\"./protocols\"); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nconst Convert = require(\"multiaddr/src/convert\");\n\nfunction thread2buf(str) {\n  // const buf = Buffer.from(str)\n  const buf = threads_id_1.ThreadID.fromString(str).toBytes();\n  const size = Buffer.from(varint_1.default.encode(buf.length));\n  return Buffer.concat([size, buf]);\n}\n\nfunction buf2thread(buf) {\n  const size = varint_1.default.decode(buf);\n  buf = buf.slice(varint_1.default.decode.bytes);\n\n  if (buf.length !== size) {\n    throw new Error(\"inconsistent lengths\");\n  }\n\n  return threads_id_1.ThreadID.fromBytes(buf).toString();\n}\n\nfunction toString(prt, buf) {\n  const proto = protocols_1.protocols(prt);\n\n  switch (proto.code) {\n    case 406:\n      return buf2thread(buf);\n\n    default:\n      return Convert.toString(prt, buf);\n  }\n}\n\nexports.toString = toString;\n\nfunction toBuffer(prt, str) {\n  const proto = protocols_1.protocols(prt);\n\n  switch (proto.code) {\n    case 406:\n      return thread2buf(str);\n\n    default:\n      return Convert.toBuffer(prt, str);\n  }\n}\n\nexports.toBuffer = toBuffer;","map":{"version":3,"sources":["../src/convert.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,YAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,MAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA,C,CACA;;;AACA,MAAM,OAAO,GAAG,OAAO,CAAC,uBAAD,CAAvB;;AAEA,SAAS,UAAT,CAAoB,GAApB,EAA+B;AAC7B;AACA,QAAM,GAAG,GAAG,YAAA,CAAA,QAAA,CAAS,UAAT,CAAoB,GAApB,EAAyB,OAAzB,EAAZ;AACA,QAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,GAAG,CAAC,MAAlB,CAAZ,CAAb;AACA,SAAO,MAAM,CAAC,MAAP,CAAc,CAAC,IAAD,EAAO,GAAP,CAAd,CAAP;AACD;;AAED,SAAS,UAAT,CAAoB,GAApB,EAA+B;AAC7B,QAAM,IAAI,GAAG,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,GAAd,CAAb;AACA,EAAA,GAAG,GAAG,GAAG,CAAC,KAAJ,CAAU,QAAA,CAAA,OAAA,CAAO,MAAP,CAAc,KAAxB,CAAN;;AAEA,MAAI,GAAG,CAAC,MAAJ,KAAe,IAAnB,EAAyB;AACvB,UAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,SAAO,YAAA,CAAA,QAAA,CAAS,SAAT,CAAmB,GAAnB,EAAwB,QAAxB,EAAP;AACD;;AAED,SAAgB,QAAhB,CAAyB,GAAzB,EAA+C,GAA/C,EAA0D;AACxD,QAAM,KAAK,GAAG,WAAA,CAAA,SAAA,CAAU,GAAV,CAAd;;AACA,UAAQ,KAAK,CAAC,IAAd;AACE,SAAK,GAAL;AACE,aAAO,UAAU,CAAC,GAAD,CAAjB;;AACF;AACE,aAAO,OAAO,CAAC,QAAR,CAAiB,GAAjB,EAAsB,GAAtB,CAAP;AAJJ;AAMD;;AARD,OAAA,CAAA,QAAA,GAAA,QAAA;;AAUA,SAAgB,QAAhB,CAAyB,GAAzB,EAA+C,GAA/C,EAA0D;AACxD,QAAM,KAAK,GAAG,WAAA,CAAA,SAAA,CAAU,GAAV,CAAd;;AACA,UAAQ,KAAK,CAAC,IAAd;AACE,SAAK,GAAL;AACE,aAAO,UAAU,CAAC,GAAD,CAAjB;;AACF;AACE,aAAO,OAAO,CAAC,QAAR,CAAiB,GAAjB,EAAsB,GAAtB,CAAP;AAJJ;AAMD;;AARD,OAAA,CAAA,QAAA,GAAA,QAAA","sourcesContent":["import { ThreadID } from \"@textile/threads-id\"\nimport varint from \"varint\"\nimport { protocols } from \"./protocols\"\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst Convert = require(\"multiaddr/src/convert\")\n\nfunction thread2buf(str: string) {\n  // const buf = Buffer.from(str)\n  const buf = ThreadID.fromString(str).toBytes()\n  const size = Buffer.from(varint.encode(buf.length))\n  return Buffer.concat([size, buf])\n}\n\nfunction buf2thread(buf: Buffer) {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== size) {\n    throw new Error(\"inconsistent lengths\")\n  }\n\n  return ThreadID.fromBytes(buf).toString()\n}\n\nexport function toString(prt: string | number, buf: Buffer): string {\n  const proto = protocols(prt)\n  switch (proto.code) {\n    case 406:\n      return buf2thread(buf)\n    default:\n      return Convert.toString(prt, buf)\n  }\n}\n\nexport function toBuffer(prt: string | number, str: string): Buffer {\n  const proto = protocols(prt)\n  switch (proto.code) {\n    case 406:\n      return thread2buf(str)\n    default:\n      return Convert.toBuffer(prt, str)\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}