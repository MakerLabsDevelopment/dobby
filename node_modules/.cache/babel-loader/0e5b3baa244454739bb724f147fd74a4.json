{"ast":null,"code":"var _jsxFileName = \"/Users/nassarhayat/apps/textiletable/js-examples/bucket-photo-gallery/src/App.tsx\";\nimport React from 'react';\nimport Avatar from './Avatar';\nimport Table from './Table';\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Buckets, PrivateKey, Client, ThreadID, Where } from '@textile/hub';\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.keyInfo = {\n      key: 'bgdhubuxfallvfnvzeiaxip4kee'\n    };\n    this.state = {\n      rows: [],\n      isLoading: false\n    };\n\n    this.getIdentity = async () => {\n      try {\n        var storedIdent = localStorage.getItem(\"identity\");\n\n        if (storedIdent === null) {\n          throw new Error('No identity');\n        }\n\n        const restored = PrivateKey.fromString(storedIdent);\n        return restored;\n      } catch (e) {\n        /**\n         * If any error, create a new identity.\n         */\n        try {\n          const identity = await PrivateKey.fromRandom();\n          const identityString = identity.toString();\n          localStorage.setItem(\"identity\", identityString);\n          return identity;\n        } catch (err) {\n          return err.message;\n        }\n      }\n    };\n\n    this.getBucketKey = async () => {\n      if (!this.state.identity) {\n        throw new Error('Identity not set');\n      }\n\n      const buckets = await Buckets.withKeyInfo(this.keyInfo); // Authorize the user and your insecure keys with getToken\n\n      await buckets.getToken(this.state.identity); // console.log(buckets, this.state.identity)\n\n      const buck = await buckets.getOrCreate('io.textile.dropzone'); // console.log(buck.root, 'ROOT')\n\n      if (!buck.root) {\n        throw new Error('Failed to open bucket');\n      }\n\n      return {\n        buckets: buckets,\n        bucketKey: buck.root.key\n      };\n    };\n\n    this.getClientInfo = async () => {\n      if (!this.state.identity) {\n        throw new Error('Identity not set');\n      }\n\n      const client = await Client.withKeyInfo(this.keyInfo);\n      await client.getToken(this.state.identity);\n      return client;\n    };\n\n    this.createThread = async () => {\n      const threadId = ThreadID.fromRandom();\n      return threadId;\n    };\n\n    this.getDatabase = async (client, threadId) => {\n      await client.newDB(threadId);\n    };\n\n    this.createCollection = async () => {\n      if (!this.state.client || !this.state.threadId || !this.state.buckets) {\n        console.error('No client or threadId');\n        return;\n      }\n\n      const schema = {\n        $schema: 'http://json-schema.org/draft-07/schema#',\n        title: 'Astronaut',\n        type: 'object',\n        properties: {\n          _id: {\n            type: 'string'\n          },\n          name: {\n            type: 'string'\n          },\n          missions: {\n            type: 'number',\n            minimum: 0\n          }\n        }\n      };\n      await this.state.client.newCollection(this.state.threadId, 'Astronaut', schema);\n      const jsonDataArray = [{\n        \"_id\": \"1\",\n        \"name\": \"Nanssar\",\n        \"missions\": 6\n      }, {\n        \"_id\": \"2\",\n        \"name\": \"Fred\",\n        \"missions\": 6\n      }];\n      await this.state.client.create(this.state.threadId, 'Astronaut', jsonDataArray);\n      await this.state.client.save(this.state.threadId, 'Astronaut', jsonDataArray);\n      const query = new Where('missions').eq(6);\n      const list = await this.state.client.find(this.state.threadId, 'Astronaut', query);\n      this.setState({\n        rows: list.instancesList\n      });\n      console.log('list', list);\n      const instance = await this.state.client.findByID(this.state.threadId, 'Astronaut', '1');\n      console.log(instance, 'IIII');\n    };\n\n    this.getBucketLinks = async () => {\n      if (!this.state.buckets || !this.state.bucketKey) {\n        console.error('No bucket client or root key');\n        return;\n      }\n\n      const links = await this.state.buckets.links(this.state.bucketKey); // console.log(links, 'LOKN')\n\n      this.setState({ ...links\n      });\n    };\n  }\n\n  async componentDidMount() {\n    // Clear your user during development\n    // await localStorage.clear()\n    const identity = await this.getIdentity(); // you might want to do the I18N setup here\n\n    this.setState({\n      identity: identity\n    }); // get their photo bucket\n\n    const {\n      bucketKey,\n      buckets\n    } = await this.getBucketKey();\n    this.setState({\n      buckets: buckets,\n      bucketKey: bucketKey\n    });\n    await this.getBucketLinks();\n    const client = await this.getClientInfo();\n    const threadId = await this.createThread();\n    await this.getDatabase(client, threadId);\n    console.log('CLI', client);\n    this.setState({\n      client: client,\n      threadId: threadId\n    });\n  }\n  /**\n   * getIdentity uses a basic private key identity.\n   * The user's identity will be cached client side. This is long\n   * but ephemeral storage not sufficient for production apps.\n   *\n   * Read more here:\n   * https://docs.textile.io/tutorials/hub/libp2p-identities/\n   */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Segment.Group, {\n      style: {\n        height: \"100%\",\n        border: 0,\n        boxShadow: \"0px 0px 0px\",\n        borderRadius: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      clearing: true,\n      className: \"nav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      className: \"avatar\",\n      as: \"h2\",\n      floated: \"left\",\n      title: this.state.identity ? this.state.identity.toString() : 'identity',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, this.state.identity && /*#__PURE__*/React.createElement(Avatar, {\n      identity: this.state.identity.toString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 39\n      }\n    })), this.state.url && /*#__PURE__*/React.createElement(\"a\", {\n      href: this.state.url,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"link\",\n      floated: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, \"BUCKET\")), this.state.www && /*#__PURE__*/React.createElement(\"a\", {\n      href: this.state.www,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"link\",\n      floated: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }\n    }, \"WWW\")), this.state.ipns && /*#__PURE__*/React.createElement(\"a\", {\n      href: this.state.ipns,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"link\",\n      floated: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }\n    }, \"IPNS\")), this.state.client && this.state.threadId && /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.createCollection(),\n      floated: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 15\n      }\n    }, \"Create New Collection\")), /*#__PURE__*/React.createElement(Table, {\n      rows: this.state.rows,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/js-examples/bucket-photo-gallery/src/App.tsx"],"names":["React","Avatar","Table","Buckets","PrivateKey","Client","ThreadID","Where","Button","Header","Segment","App","Component","keyInfo","key","state","rows","isLoading","getIdentity","storedIdent","localStorage","getItem","Error","restored","fromString","e","identity","fromRandom","identityString","toString","setItem","err","message","getBucketKey","buckets","withKeyInfo","getToken","buck","getOrCreate","root","bucketKey","getClientInfo","client","createThread","threadId","getDatabase","newDB","createCollection","console","error","schema","$schema","title","type","properties","_id","name","missions","minimum","newCollection","jsonDataArray","create","save","query","eq","list","find","setState","instancesList","log","instance","findByID","getBucketLinks","links","componentDidMount","render","height","border","boxShadow","borderRadius","url","www","ipns"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Avatar from './Avatar'\nimport Table from './Table'\n\nimport \"semantic-ui-css/semantic.min.css\"\nimport { Buckets, KeyInfo, PrivateKey, Client, ThreadID, Where } from '@textile/hub'\nimport { Button, Header, Segment } from \"semantic-ui-react\"\n\nimport { AppState } from './Types'\nimport './App.css'\n\nclass App extends React.Component {\n  keyInfo: KeyInfo = {\n    key: 'bgdhubuxfallvfnvzeiaxip4kee',\n  }\n  state: AppState = {\n    rows: [],\n    isLoading: false,\n  }\n  async componentDidMount() {\n    // Clear your user during development\n    // await localStorage.clear()\n    const identity = await this.getIdentity()\n    // you might want to do the I18N setup here\n    this.setState({\n      identity: identity\n    })\n\n    // get their photo bucket\n    const {bucketKey, buckets} = await this.getBucketKey()\n    this.setState({\n      buckets: buckets,\n      bucketKey: bucketKey\n    })\n\n    await this.getBucketLinks()\n\n    const client = await this.getClientInfo()\n    const threadId = await this.createThread()\n    await this.getDatabase(client, threadId)\n    console.log('CLI', client)\n    this.setState({\n      client: client,\n      threadId: threadId\n    })\n  }\n\n  /**\n   * getIdentity uses a basic private key identity.\n   * The user's identity will be cached client side. This is long\n   * but ephemeral storage not sufficient for production apps.\n   *\n   * Read more here:\n   * https://docs.textile.io/tutorials/hub/libp2p-identities/\n   */\n  getIdentity = async (): Promise<PrivateKey> => {\n    try {\n      var storedIdent = localStorage.getItem(\"identity\")\n      if (storedIdent === null) {\n        throw new Error('No identity')\n      }\n      const restored = PrivateKey.fromString(storedIdent)\n      return restored\n    }\n    catch (e) {\n      /**\n       * If any error, create a new identity.\n       */\n      try {\n        const identity = await PrivateKey.fromRandom()\n        const identityString = identity.toString()\n        localStorage.setItem(\"identity\", identityString)\n        return identity\n      } catch (err) {\n        return err.message\n      }\n    }\n  }\n\n  /**\n   * getBucketKey will create a new Buckets client with the UserAuth\n   * and then open our custom bucket named, 'io.textile.dropzone'\n   */\n  getBucketKey = async () => {\n    if (!this.state.identity) {\n      throw new Error('Identity not set')\n    }\n    const buckets = await Buckets.withKeyInfo(this.keyInfo)\n    // Authorize the user and your insecure keys with getToken\n    await buckets.getToken(this.state.identity)\n    // console.log(buckets, this.state.identity)\n    const buck = await buckets.getOrCreate('io.textile.dropzone')\n    // console.log(buck.root, 'ROOT')\n    if (!buck.root) {\n      throw new Error('Failed to open bucket')\n    }\n    return {buckets: buckets, bucketKey: buck.root.key}\n  }\n\n  getClientInfo = async () => {\n    if (!this.state.identity) {\n      throw new Error('Identity not set')\n    }\n    const client = await Client.withKeyInfo(this.keyInfo)\n    await client.getToken(this.state.identity)\n    return client\n  }\n\n  createThread = async () => {\n    const threadId = ThreadID.fromRandom()\n    return threadId\n  }\n\n  getDatabase = async (client: Client, threadId: ThreadID) => {\n    await client.newDB(threadId)\n  }\n\n  createCollection = async () => {\n    if (!this.state.client || !this.state.threadId || !this.state.buckets) {\n      console.error('No client or threadId')\n      return\n    }\n    const schema = {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      title: 'Astronaut',\n      type: 'object',\n      properties: {\n        _id: { type: 'string' },\n        name: { type: 'string' },\n        missions: {\n          type: 'number',\n          minimum: 0,\n        },\n      },\n    }\n    await this.state.client.newCollection(this.state.threadId, 'Astronaut', schema)\n\n    const jsonDataArray = [\n      { \"_id\": \"1\", \"name\": \"Nanssar\", \"missions\": 6 },\n      { \"_id\": \"2\", \"name\": \"Fred\", \"missions\": 6 }\n    ]\n    await this.state.client.create(this.state.threadId, 'Astronaut', jsonDataArray)\n    await this.state.client.save(this.state.threadId, 'Astronaut', jsonDataArray)\n\n    const query = new Where('missions').eq(6)\n    const list = await this.state.client.find(this.state.threadId, 'Astronaut', query)\n    this.setState({\n      rows: list.instancesList,\n    })\n    console.log('list', list)\n    const instance = await this.state.client.findByID(this.state.threadId, 'Astronaut', '1')\n    console.log(instance, 'IIII')\n  }\n\n  /**\n   * getBucketLinks returns all the protocol endpoints for the bucket.\n   * Read more:\n   * https://docs.textile.io/hub/buckets/#bucket-protocols\n   */\n  getBucketLinks = async () => {\n    if (!this.state.buckets || !this.state.bucketKey) {\n      console.error('No bucket client or root key')\n      return\n    }\n    const links = await this.state.buckets.links(this.state.bucketKey)\n    // console.log(links, 'LOKN')\n    this.setState({\n      ...links\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <Segment.Group style={{ height: \"100%\", border: 0, boxShadow: \"0px 0px 0px\", borderRadius: 0 }}>\n          <Segment clearing className=\"nav\">\n            <Header className=\"avatar\" as=\"h2\" floated=\"left\" title={this.state.identity ? this.state.identity.toString() : 'identity'}>\n              {this.state.identity && <Avatar identity={this.state.identity.toString()}/>}\n            </Header>\n            {this.state.url &&\n              <a href={this.state.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Button\n                  className=\"link\"\n                  floated=\"right\"\n                >BUCKET</Button>\n              </a>\n            }\n            {this.state.www &&\n              <a href={this.state.www} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Button\n                  className=\"link\"\n                  floated=\"right\"\n                >WWW</Button>\n              </a>\n            }\n            {this.state.ipns &&\n              <a href={this.state.ipns} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Button\n                  className=\"link\"\n                  floated=\"right\"\n                >IPNS</Button>\n              </a>\n            }\n            {this.state.client && this.state.threadId &&\n              <Button onClick={() => this.createCollection()} floated=\"right\">Create New Collection</Button>\n            }\n          </Segment>\n          <Table rows={this.state.rows}/>\n        </Segment.Group>\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}