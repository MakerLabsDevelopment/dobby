{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Context = exports.defaultHost = void 0;\n\nconst grpc_web_1 = require(\"@improbable-eng/grpc-web\");\n\nconst security_1 = require(\"@textile/security\");\n\nexports.defaultHost = \"https://webapi.hub.textile.io\";\n/**\n * Context provides context management for gRPC credentials and config settings.\n * It is the default implementation for the ContextInterface interface.\n */\n\nclass Context {\n  /**\n   * Construct a new Context object.\n   * @param host The remote gRPC host. This input exists to comply with the Config interface.\n   */\n  constructor(host = exports.defaultHost) {\n    // Internal context variables\n    this._context = {};\n    this._context[\"host\"] = host;\n  }\n\n  static fromUserAuth(auth, host = exports.defaultHost) {\n    const ctx = new Context(host);\n\n    const {\n      key,\n      token\n    } = auth,\n          sig = __rest(auth, [\"key\", \"token\"]);\n\n    return ctx.withAPIKey(key).withAPISig(sig).withToken(token);\n  }\n\n  static fromUserAuthCallback(authCallback, host = exports.defaultHost) {\n    const ctx = new Context(host); // @todo: Should we now callback right away?\n\n    ctx.authCallback = authCallback;\n    return ctx;\n  }\n\n  get host() {\n    return this._context[\"host\"];\n  } // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\n  set(key, value) {\n    this._context[key] = value;\n    return this;\n  }\n\n  get(key) {\n    return this._context[key];\n  }\n\n  withSession(value) {\n    if (value === undefined) return this;\n    this._context[\"x-textile-session\"] = value;\n    return this;\n  }\n\n  withThread(value) {\n    if (value === undefined) return this;\n    this._context[\"x-textile-thread\"] = value.toString();\n    return this;\n  }\n\n  withThreadName(value) {\n    if (value === undefined) return this;\n    this._context[\"x-textile-thread-name\"] = value;\n    return this;\n  }\n\n  withOrg(value) {\n    if (value === undefined) return this;\n    this._context[\"x-textile-org\"] = value;\n    return this;\n  }\n\n  withToken(value) {\n    if (value === undefined) return this;\n    this._context[\"authorization\"] = `bearer ${value}`;\n    return this;\n  }\n\n  withAPIKey(value) {\n    if (value === undefined) return this;\n    this._context[\"x-textile-api-key\"] = value;\n    return this;\n  }\n\n  withAPISig(value) {\n    if (value === undefined) return this;\n    const {\n      sig,\n      msg\n    } = value;\n    this._context[\"x-textile-api-sig-msg\"] = msg;\n    this._context[\"x-textile-api-sig\"] = sig;\n    return this;\n  }\n\n  withKeyInfo(key, date) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (key === undefined) return this; // Enables the use of insecure / non-signing keys\n\n      if (!key.secret) return this.withAPIKey(key.key);\n      const sig = yield security_1.createAPISig(key.secret, date);\n      return this.withAPIKey(key.key).withAPISig(sig);\n    });\n  }\n\n  withContext(value) {\n    if (value === undefined) return this; // Spread to copy rather than reference\n\n    this._context = value.toJSON();\n    return this;\n  }\n  /**\n   * Returns true if this Context contains an api sig msg, and that msg has expired, or if\n   * it does _not_ have an api sig msg, but it _does_ have an auth callback.\n   */\n\n\n  get isExpired() {\n    const msg = this.get(\"x-textile-api-sig-msg\");\n    const notAuthed = msg === undefined && this.authCallback !== undefined;\n    const isExpired = msg !== undefined && new Date(msg) <= new Date();\n    return isExpired || notAuthed;\n  }\n  /**\n   * Refresh user auth with provided callback.\n   * If callback is not specified, attempts to use existing callback specified at initialization.\n   */\n\n\n  refreshUserAuth(authCallback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // If we have a new one, use it...\n      if (authCallback !== undefined) {\n        this.authCallback = authCallback;\n      } // If we still don't have a callback, throw...\n\n\n      if (this.authCallback === undefined) {\n        throw new Error(\"Missing authCallback. See Context.fromUserAuthCallback for details.\");\n      } // Now do the renewal and return self...\n\n\n      const _a = yield this.authCallback(),\n            {\n        key,\n        token\n      } = _a,\n            sig = __rest(_a, [\"key\", \"token\"]);\n\n      return this.withAPIKey(key).withAPISig(sig).withToken(token);\n    });\n  }\n  /**\n   * Convert Context to plain JSON object.\n   * @throws If this Context has expired.\n   * @see toMetadata for an alternative for gRPC clients that supports auto-renewal.\n   */\n\n\n  toJSON() {\n    const json = __rest(this._context // If we're expired, throw...\n    , []); // If we're expired, throw...\n\n\n    if (this.isExpired) {\n      throw security_1.expirationError;\n    }\n\n    return json;\n  }\n  /**\n   * Convert Context to grpc Metadata object.\n   * Will automatically call the auth callback if available.\n   * @param ctx Additional context object that will be merged with this prior to conversion.\n   * @see toJSON for an alternative that returns a plain object, and throws when expired.\n   */\n\n\n  toMetadata(ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const context = new Context();\n\n      if (this.isExpired && this.authCallback !== undefined) {\n        const _a = yield this.authCallback(),\n              {\n          key,\n          token\n        } = _a,\n              sig = __rest(_a, [\"key\", \"token\"]); // We do want to mutate this here because we want to update our auth sig\n\n\n        this.withAPIKey(key).withAPISig(sig).withToken(token);\n      } // We merge this context and ctx with the empty context so as to avoid mutating this with ctx\n\n\n      return new grpc_web_1.grpc.Metadata(context.withContext(this).withContext(ctx).toJSON());\n    });\n  }\n  /**\n   * Import various ContextInterface API properties from JSON.\n   * @param json The JSON object.\n   * @param host Optional host string.\n   */\n\n\n  static fromJSON(json, host = exports.defaultHost) {\n    const newContext = Object.assign({}, json);\n    newContext[\"host\"] = host;\n    const ctx = new Context();\n    ctx._context = newContext;\n    return ctx;\n  }\n\n}\n\nexports.Context = Context;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { grpc } from \"@improbable-eng/grpc-web\"\nimport {\n  createAPISig,\n  expirationError,\n  KeyInfo,\n  UserAuth,\n} from \"@textile/security\"\n\n/**\n * The set of host strings used by any gPRC clients.\n */\nexport type HostString =\n  | \"https://webapi.hub.textile.io\"\n  | \"http://127.0.0.1:3007\"\n  | string\nexport const defaultHost: HostString = \"https://webapi.hub.textile.io\"\n\n/**\n * Interface describing the set of default context keys.\n */\nexport interface ContextKeys {\n  /**\n   * Thread name. Specifies a mapping between human-readable name and a ThreadID.\n   */\n  [\"x-textile-thread-name\"]?: string\n  /**\n   * ThreadID as a string. Should be generated with `ThreadID.toString()` method.\n   */\n  [\"x-textile-thread\"]?: string\n  /**\n   * Session key. Used for various session contexts.\n   */\n  [\"x-textile-session\"]?: string\n\n  /**\n   * Org slug/name. Used for various org session operations.\n   */\n  [\"x-textile-org\"]?: string\n\n  /**\n   * API key. Used for user group/account authentication.\n   */\n  [\"x-textile-api-key\"]?: string\n\n  /**\n   * Authorization token for interacting with remote APIs.\n   */\n  authorization?: string\n\n  /**\n   * API signature used to authenticate with remote APIs.\n   */\n  [\"x-textile-api-sig\"]?: string\n\n  /**\n   * Raw message (date as ISO string) used to generate API signature.\n   */\n  [\"x-textile-api-sig-msg\"]?: string\n\n  /**\n   * The service host address/url. Defaults to https://webapi.hub.textile.io.\n   */\n  host?: HostString\n\n  /**\n   * ContextKeys may also contain any number of additional custom keys.\n   */\n  [key: string]: any\n}\n\n/**\n * Interface describing the required methods for a full ContextInterface.\n * Users of ContextInterface may only require a subset of these methods, in which case, they should\n * specify their own interface, ensuring that ContextInterface is able to satisfy it.\n */\nexport interface ContextInterface {\n  /**\n   * The service host address/url. Defaults to https://webapi.hub.textile.io.\n   */\n  host: HostString\n  /**\n   * Set the session key. Used for various session contexts.\n   */\n  withSession(value?: string): ContextInterface\n  /**\n   * Set the thread ID as a string. Should be generated with `ThreadID.toString()` method.\n   */\n  withThread(value?: string): ContextInterface\n  /**\n   * Set the thread name. Specifies a mapping between human-readable name and a ThreadID.\n   */\n  withThreadName(value?: string): ContextInterface\n  /**\n   * Set the org slug/name. Used for various org session operations.\n   */\n  withOrg(value?: string): ContextInterface\n  /**\n   * Set the authorization token for interacting with remote APIs.\n   */\n  withToken(value?: string): ContextInterface\n  /**\n   * Set the API key. Used for user group/account authentication.\n   */\n  withAPIKey(value?: string): ContextInterface\n  /**\n   * Set the API signature used to authenticate with remote APIs.\n   */\n  withAPISig(value?: { sig: string; msg: string }): ContextInterface\n  /**\n   * Compute the API signature and message.\n   * @param key User group/account key information.\n   * @param date Optional future Date for computing the authorization signature.\n   */\n  withKeyInfo(key?: KeyInfo, date?: Date): Promise<ContextInterface>\n  /**\n   * Merge another context with this one.\n   */\n  withContext(value?: ContextInterface): ContextInterface\n  /**\n   * Export this context to a JS Object useful for exporting to JSON.\n   */\n  toJSON(): any\n  /**\n   * Export this context as gRPC Metadata.\n   */\n  toMetadata(ctx?: ContextInterface): Promise<grpc.Metadata>\n  /**\n   * Set arbitrary key/value context pairs.\n   * @param key The key to set.\n   * @param value The value to specify under `key`.\n   */\n  set(key: keyof ContextKeys, value?: any): ContextInterface\n  /**\n   * Get arbitrary key/value context pairs.\n   * @param key The key to get.\n   */\n  get(key: keyof ContextKeys): any\n}\n\n/**\n * Context provides context management for gRPC credentials and config settings.\n * It is the default implementation for the ContextInterface interface.\n */\nexport class Context implements ContextInterface {\n  // Internal context variables\n  public _context: Partial<Record<keyof ContextKeys, any>> = {}\n  public authCallback?: () => Promise<UserAuth>\n\n  /**\n   * Construct a new Context object.\n   * @param host The remote gRPC host. This input exists to comply with the Config interface.\n   */\n  constructor(host: HostString = defaultHost) {\n    this._context[\"host\"] = host\n  }\n\n  static fromUserAuth(auth: UserAuth, host: HostString = defaultHost): Context {\n    const ctx = new Context(host)\n    const { key, token, ...sig } = auth\n    return ctx.withAPIKey(key).withAPISig(sig).withToken(token)\n  }\n\n  static fromUserAuthCallback(\n    authCallback: () => Promise<UserAuth>,\n    host: HostString = defaultHost\n  ): Context {\n    const ctx = new Context(host)\n    // @todo: Should we now callback right away?\n    ctx.authCallback = authCallback\n    return ctx\n  }\n\n  get host(): string {\n    return this._context[\"host\"]\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  set(key: keyof ContextKeys, value?: any): this {\n    this._context[key] = value\n    return this\n  }\n\n  get(key: keyof ContextKeys): any {\n    return this._context[key]\n  }\n\n  withSession(value?: string): this {\n    if (value === undefined) return this\n    this._context[\"x-textile-session\"] = value\n    return this\n  }\n\n  withThread(value?: string): this {\n    if (value === undefined) return this\n    this._context[\"x-textile-thread\"] = value.toString()\n    return this\n  }\n\n  withThreadName(value?: string): this {\n    if (value === undefined) return this\n    this._context[\"x-textile-thread-name\"] = value\n    return this\n  }\n\n  withOrg(value?: string): this {\n    if (value === undefined) return this\n    this._context[\"x-textile-org\"] = value\n    return this\n  }\n\n  withToken(value?: string): this {\n    if (value === undefined) return this\n    this._context[\"authorization\"] = `bearer ${value}`\n    return this\n  }\n\n  withAPIKey(value?: string): this {\n    if (value === undefined) return this\n    this._context[\"x-textile-api-key\"] = value\n    return this\n  }\n\n  withAPISig(value?: { sig: string; msg: string }): this {\n    if (value === undefined) return this\n    const { sig, msg } = value\n    this._context[\"x-textile-api-sig-msg\"] = msg\n    this._context[\"x-textile-api-sig\"] = sig\n    return this\n  }\n\n  async withKeyInfo(key?: KeyInfo, date?: Date): Promise<this> {\n    if (key === undefined) return this\n    // Enables the use of insecure / non-signing keys\n    if (!key.secret) return this.withAPIKey(key.key)\n    const sig = await createAPISig(key.secret, date)\n    return this.withAPIKey(key.key).withAPISig(sig)\n  }\n\n  withContext(value?: ContextInterface): this {\n    if (value === undefined) return this\n    // Spread to copy rather than reference\n    this._context = value.toJSON()\n    return this\n  }\n\n  /**\n   * Returns true if this Context contains an api sig msg, and that msg has expired, or if\n   * it does _not_ have an api sig msg, but it _does_ have an auth callback.\n   */\n  get isExpired(): boolean {\n    const msg = this.get(\"x-textile-api-sig-msg\")\n    const notAuthed = msg === undefined && this.authCallback !== undefined\n    const isExpired = msg !== undefined && new Date(msg) <= new Date()\n    return isExpired || notAuthed\n  }\n\n  /**\n   * Refresh user auth with provided callback.\n   * If callback is not specified, attempts to use existing callback specified at initialization.\n   */\n  async refreshUserAuth(authCallback?: () => Promise<UserAuth>): Promise<this> {\n    // If we have a new one, use it...\n    if (authCallback !== undefined) {\n      this.authCallback = authCallback\n    }\n    // If we still don't have a callback, throw...\n    if (this.authCallback === undefined) {\n      throw new Error(\n        \"Missing authCallback. See Context.fromUserAuthCallback for details.\"\n      )\n    }\n    // Now do the renewal and return self...\n    const { key, token, ...sig } = await this.authCallback()\n    return this.withAPIKey(key).withAPISig(sig).withToken(token)\n  }\n\n  /**\n   * Convert Context to plain JSON object.\n   * @throws If this Context has expired.\n   * @see toMetadata for an alternative for gRPC clients that supports auto-renewal.\n   */\n  toJSON(): Record<string | number, any> {\n    const { ...json } = this._context\n    // If we're expired, throw...\n    if (this.isExpired) {\n      throw expirationError\n    }\n    return json\n  }\n\n  /**\n   * Convert Context to grpc Metadata object.\n   * Will automatically call the auth callback if available.\n   * @param ctx Additional context object that will be merged with this prior to conversion.\n   * @see toJSON for an alternative that returns a plain object, and throws when expired.\n   */\n  async toMetadata(ctx?: Context): Promise<grpc.Metadata> {\n    const context = new Context()\n    if (this.isExpired && this.authCallback !== undefined) {\n      const { key, token, ...sig } = await this.authCallback()\n      // We do want to mutate this here because we want to update our auth sig\n      this.withAPIKey(key).withAPISig(sig).withToken(token)\n    }\n    // We merge this context and ctx with the empty context so as to avoid mutating this with ctx\n    return new grpc.Metadata(\n      context.withContext(this).withContext(ctx).toJSON()\n    )\n  }\n\n  /**\n   * Import various ContextInterface API properties from JSON.\n   * @param json The JSON object.\n   * @param host Optional host string.\n   */\n  static fromJSON(json: ContextKeys, host: HostString = defaultHost): Context {\n    const newContext = { ...json }\n    newContext[\"host\"] = host\n    const ctx = new Context()\n    ctx._context = newContext\n    return ctx\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}