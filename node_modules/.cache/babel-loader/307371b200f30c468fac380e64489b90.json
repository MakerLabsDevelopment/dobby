{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar merge = require('lodash.merge');\n\nvar isEqual = require('lodash.isequal');\n\nvar helpers = require('./helpers');\n\nvar defaultOptions = {\n  required: false,\n  postProcessFnc: null,\n  strings: {\n    detectFormat: true,\n    preProcessFnc: null\n  },\n  arrays: {\n    mode: 'all'\n  },\n  objects: {\n    preProcessFnc: null,\n    postProcessFnc: null,\n    additionalProperties: true\n  }\n};\nvar skipReverseFind = ['hostname', 'host-name', 'alpha', 'alphanumeric', 'regex', 'regexp', 'pattern'];\nvar filteredFormats = helpers.stringFormats.filter(function (item) {\n  return skipReverseFind.indexOf(item) < 0;\n});\n\nfunction getCommonTypeFromArrayOfTypes(arrOfTypes) {\n  var lastVal;\n\n  for (var i = 0, length = arrOfTypes.length; i < length; i++) {\n    var currentType = arrOfTypes[i];\n\n    if (i > 0) {\n      if (currentType === 'integer' && lastVal === 'number') {\n        currentType = 'number';\n      } else if (currentType === 'number' && lastVal === 'integer') {\n        lastVal = 'number';\n      }\n\n      if (lastVal !== currentType) return null;\n    }\n\n    lastVal = currentType;\n  }\n\n  return lastVal;\n}\n\nfunction getCommonArrayItemsType(arr) {\n  return getCommonTypeFromArrayOfTypes(arr.map(function (item) {\n    return helpers.getType(item);\n  }));\n}\n\nvar ToJsonSchema = /*#__PURE__*/function () {\n  function ToJsonSchema(options) {\n    _classCallCheck(this, ToJsonSchema);\n\n    this.options = merge({}, defaultOptions, options);\n    this.getObjectSchemaDefault = this.getObjectSchemaDefault.bind(this);\n    this.getStringSchemaDefault = this.getStringSchemaDefault.bind(this);\n    this.objectPostProcessDefault = this.objectPostProcessDefault.bind(this);\n    this.commmonPostProcessDefault = this.commmonPostProcessDefault.bind(this);\n    this.objectPostProcessDefault = this.objectPostProcessDefault.bind(this);\n  }\n  /**\n   * Tries to find the least common schema that would validate all items in the array. More details\n   * helpers.mergeSchemaObjs description\n   * @param {array} arr\n   * @returns {object|null}\n   */\n\n\n  _createClass(ToJsonSchema, [{\n    key: \"getCommonArrayItemSchema\",\n    value: function getCommonArrayItemSchema(arr) {\n      var _this = this;\n\n      var schemas = arr.map(function (item) {\n        return _this.getSchema(item);\n      }); // schemas.forEach(schema => console.log(JSON.stringify(schema, '\\t')))\n\n      return schemas.reduce(function (acc, current) {\n        return helpers.mergeSchemaObjs(acc, current);\n      }, schemas.pop());\n    }\n  }, {\n    key: \"getObjectSchemaDefault\",\n    value: function getObjectSchemaDefault(obj) {\n      var _this2 = this;\n\n      var schema = {\n        type: 'object'\n      };\n      var objKeys = Object.keys(obj);\n\n      if (objKeys.length > 0) {\n        schema.properties = objKeys.reduce(function (acc, propertyName) {\n          acc[propertyName] = _this2.getSchema(obj[propertyName]); // eslint-disable-line no-param-reassign\n\n          return acc;\n        }, {});\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"getObjectSchema\",\n    value: function getObjectSchema(obj) {\n      if (this.options.objects.preProcessFnc) {\n        return this.options.objects.preProcessFnc(obj, this.getObjectSchemaDefault);\n      }\n\n      return this.getObjectSchemaDefault(obj);\n    }\n  }, {\n    key: \"getArraySchemaMerging\",\n    value: function getArraySchemaMerging(arr) {\n      var schema = {\n        type: 'array'\n      };\n      var commonType = getCommonArrayItemsType(arr);\n\n      if (commonType) {\n        schema.items = {\n          type: commonType\n        };\n\n        if (commonType !== 'integer' && commonType !== 'number') {\n          var itemSchema = this.getCommonArrayItemSchema(arr);\n\n          if (itemSchema) {\n            schema.items = itemSchema;\n          }\n        } else if (this.options.required) {\n          schema.items.required = true;\n        }\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"getArraySchemaNoMerging\",\n    value: function getArraySchemaNoMerging(arr) {\n      var schema = {\n        type: 'array'\n      };\n\n      if (arr.length > 0) {\n        schema.items = this.getSchema(arr[0]);\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"getArraySchemaTuple\",\n    value: function getArraySchemaTuple(arr) {\n      var _this3 = this;\n\n      var schema = {\n        type: 'array'\n      };\n\n      if (arr.length > 0) {\n        schema.items = arr.map(function (item) {\n          return _this3.getSchema(item);\n        });\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"getArraySchemaUniform\",\n    value: function getArraySchemaUniform(arr) {\n      var schema = this.getArraySchemaNoMerging(arr);\n\n      if (arr.length > 1) {\n        for (var i = 1; i < arr.length; i++) {\n          if (!isEqual(schema.items, this.getSchema(arr[i]))) {\n            throw new Error('Invalid schema, incompatible array items');\n          }\n        }\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"getArraySchema\",\n    value: function getArraySchema(arr) {\n      if (arr.length === 0) {\n        return {\n          type: 'array'\n        };\n      }\n\n      switch (this.options.arrays.mode) {\n        case 'all':\n          return this.getArraySchemaMerging(arr);\n\n        case 'first':\n          return this.getArraySchemaNoMerging(arr);\n\n        case 'uniform':\n          return this.getArraySchemaUniform(arr);\n\n        case 'tuple':\n          return this.getArraySchemaTuple(arr);\n\n        default:\n          throw new Error(\"Unknown array mode option '\".concat(this.options.arrays.mode, \"'\"));\n      }\n    }\n  }, {\n    key: \"getStringSchemaDefault\",\n    value: function getStringSchemaDefault(value) {\n      var schema = {\n        type: 'string'\n      };\n\n      if (!this.options.strings.detectFormat) {\n        return schema;\n      }\n\n      var index = filteredFormats.findIndex(function (item) {\n        return helpers.isFormat(value, item);\n      });\n\n      if (index >= 0) {\n        schema.format = filteredFormats[index];\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"getStringSchema\",\n    value: function getStringSchema(value) {\n      if (this.options.strings.preProcessFnc) {\n        return this.options.strings.preProcessFnc(value, this.getStringSchemaDefault);\n      }\n\n      return this.getStringSchemaDefault(value);\n    }\n  }, {\n    key: \"commmonPostProcessDefault\",\n    value: function commmonPostProcessDefault(type, schema, value) {\n      // eslint-disable-line no-unused-vars\n      if (this.options.required) {\n        return merge({}, schema, {\n          required: true\n        });\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"objectPostProcessDefault\",\n    value: function objectPostProcessDefault(schema, obj) {\n      if (this.options.objects.additionalProperties === false && Object.getOwnPropertyNames(obj).length > 0) {\n        return merge({}, schema, {\n          additionalProperties: false\n        });\n      }\n\n      return schema;\n    }\n    /**\n     * Gets JSON schema for provided value\n     * @param value\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getSchema\",\n    value: function getSchema(value) {\n      var type = helpers.getType(value);\n\n      if (!type) {\n        throw new Error(\"Type of value couldn't be determined\");\n      }\n\n      var schema;\n\n      switch (type) {\n        case 'object':\n          schema = this.getObjectSchema(value);\n          break;\n\n        case 'array':\n          schema = this.getArraySchema(value);\n          break;\n\n        case 'string':\n          schema = this.getStringSchema(value);\n          break;\n\n        default:\n          schema = {\n            type: type\n          };\n      }\n\n      if (this.options.postProcessFnc) {\n        schema = this.options.postProcessFnc(type, schema, value, this.commmonPostProcessDefault);\n      } else {\n        schema = this.commmonPostProcessDefault(type, schema, value);\n      }\n\n      if (type === 'object') {\n        if (this.options.objects.postProcessFnc) {\n          schema = this.options.objects.postProcessFnc(schema, value, this.objectPostProcessDefault);\n        } else {\n          schema = this.objectPostProcessDefault(schema, value);\n        }\n      }\n\n      return schema;\n    }\n  }]);\n\n  return ToJsonSchema;\n}();\n\nfunction toJsonSchema(value, options) {\n  var tjs = new ToJsonSchema(options);\n  return tjs.getSchema(value);\n}\n\nmodule.exports = toJsonSchema;","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/dobby/node_modules/to-json-schema/lib/index.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","merge","require","isEqual","helpers","defaultOptions","required","postProcessFnc","strings","detectFormat","preProcessFnc","arrays","mode","objects","additionalProperties","skipReverseFind","filteredFormats","stringFormats","filter","item","indexOf","getCommonTypeFromArrayOfTypes","arrOfTypes","lastVal","currentType","getCommonArrayItemsType","arr","map","getType","ToJsonSchema","options","getObjectSchemaDefault","bind","getStringSchemaDefault","objectPostProcessDefault","commmonPostProcessDefault","value","getCommonArrayItemSchema","_this","schemas","getSchema","reduce","acc","current","mergeSchemaObjs","pop","obj","_this2","schema","type","objKeys","keys","properties","propertyName","getObjectSchema","getArraySchemaMerging","commonType","items","itemSchema","getArraySchemaNoMerging","getArraySchemaTuple","_this3","getArraySchemaUniform","Error","getArraySchema","concat","index","findIndex","isFormat","format","getStringSchema","getOwnPropertyNames","toJsonSchema","tjs","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar merge = require('lodash.merge');\n\nvar isEqual = require('lodash.isequal');\n\nvar helpers = require('./helpers');\n\nvar defaultOptions = {\n  required: false,\n  postProcessFnc: null,\n  strings: {\n    detectFormat: true,\n    preProcessFnc: null\n  },\n  arrays: {\n    mode: 'all'\n  },\n  objects: {\n    preProcessFnc: null,\n    postProcessFnc: null,\n    additionalProperties: true\n  }\n};\nvar skipReverseFind = ['hostname', 'host-name', 'alpha', 'alphanumeric', 'regex', 'regexp', 'pattern'];\nvar filteredFormats = helpers.stringFormats.filter(function (item) {\n  return skipReverseFind.indexOf(item) < 0;\n});\n\nfunction getCommonTypeFromArrayOfTypes(arrOfTypes) {\n  var lastVal;\n\n  for (var i = 0, length = arrOfTypes.length; i < length; i++) {\n    var currentType = arrOfTypes[i];\n\n    if (i > 0) {\n      if (currentType === 'integer' && lastVal === 'number') {\n        currentType = 'number';\n      } else if (currentType === 'number' && lastVal === 'integer') {\n        lastVal = 'number';\n      }\n\n      if (lastVal !== currentType) return null;\n    }\n\n    lastVal = currentType;\n  }\n\n  return lastVal;\n}\n\nfunction getCommonArrayItemsType(arr) {\n  return getCommonTypeFromArrayOfTypes(arr.map(function (item) {\n    return helpers.getType(item);\n  }));\n}\n\nvar ToJsonSchema = /*#__PURE__*/function () {\n  function ToJsonSchema(options) {\n    _classCallCheck(this, ToJsonSchema);\n\n    this.options = merge({}, defaultOptions, options);\n    this.getObjectSchemaDefault = this.getObjectSchemaDefault.bind(this);\n    this.getStringSchemaDefault = this.getStringSchemaDefault.bind(this);\n    this.objectPostProcessDefault = this.objectPostProcessDefault.bind(this);\n    this.commmonPostProcessDefault = this.commmonPostProcessDefault.bind(this);\n    this.objectPostProcessDefault = this.objectPostProcessDefault.bind(this);\n  }\n  /**\n   * Tries to find the least common schema that would validate all items in the array. More details\n   * helpers.mergeSchemaObjs description\n   * @param {array} arr\n   * @returns {object|null}\n   */\n\n\n  _createClass(ToJsonSchema, [{\n    key: \"getCommonArrayItemSchema\",\n    value: function getCommonArrayItemSchema(arr) {\n      var _this = this;\n\n      var schemas = arr.map(function (item) {\n        return _this.getSchema(item);\n      }); // schemas.forEach(schema => console.log(JSON.stringify(schema, '\\t')))\n\n      return schemas.reduce(function (acc, current) {\n        return helpers.mergeSchemaObjs(acc, current);\n      }, schemas.pop());\n    }\n  }, {\n    key: \"getObjectSchemaDefault\",\n    value: function getObjectSchemaDefault(obj) {\n      var _this2 = this;\n\n      var schema = {\n        type: 'object'\n      };\n      var objKeys = Object.keys(obj);\n\n      if (objKeys.length > 0) {\n        schema.properties = objKeys.reduce(function (acc, propertyName) {\n          acc[propertyName] = _this2.getSchema(obj[propertyName]); // eslint-disable-line no-param-reassign\n\n          return acc;\n        }, {});\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"getObjectSchema\",\n    value: function getObjectSchema(obj) {\n      if (this.options.objects.preProcessFnc) {\n        return this.options.objects.preProcessFnc(obj, this.getObjectSchemaDefault);\n      }\n\n      return this.getObjectSchemaDefault(obj);\n    }\n  }, {\n    key: \"getArraySchemaMerging\",\n    value: function getArraySchemaMerging(arr) {\n      var schema = {\n        type: 'array'\n      };\n      var commonType = getCommonArrayItemsType(arr);\n\n      if (commonType) {\n        schema.items = {\n          type: commonType\n        };\n\n        if (commonType !== 'integer' && commonType !== 'number') {\n          var itemSchema = this.getCommonArrayItemSchema(arr);\n\n          if (itemSchema) {\n            schema.items = itemSchema;\n          }\n        } else if (this.options.required) {\n          schema.items.required = true;\n        }\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"getArraySchemaNoMerging\",\n    value: function getArraySchemaNoMerging(arr) {\n      var schema = {\n        type: 'array'\n      };\n\n      if (arr.length > 0) {\n        schema.items = this.getSchema(arr[0]);\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"getArraySchemaTuple\",\n    value: function getArraySchemaTuple(arr) {\n      var _this3 = this;\n\n      var schema = {\n        type: 'array'\n      };\n\n      if (arr.length > 0) {\n        schema.items = arr.map(function (item) {\n          return _this3.getSchema(item);\n        });\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"getArraySchemaUniform\",\n    value: function getArraySchemaUniform(arr) {\n      var schema = this.getArraySchemaNoMerging(arr);\n\n      if (arr.length > 1) {\n        for (var i = 1; i < arr.length; i++) {\n          if (!isEqual(schema.items, this.getSchema(arr[i]))) {\n            throw new Error('Invalid schema, incompatible array items');\n          }\n        }\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"getArraySchema\",\n    value: function getArraySchema(arr) {\n      if (arr.length === 0) {\n        return {\n          type: 'array'\n        };\n      }\n\n      switch (this.options.arrays.mode) {\n        case 'all':\n          return this.getArraySchemaMerging(arr);\n\n        case 'first':\n          return this.getArraySchemaNoMerging(arr);\n\n        case 'uniform':\n          return this.getArraySchemaUniform(arr);\n\n        case 'tuple':\n          return this.getArraySchemaTuple(arr);\n\n        default:\n          throw new Error(\"Unknown array mode option '\".concat(this.options.arrays.mode, \"'\"));\n      }\n    }\n  }, {\n    key: \"getStringSchemaDefault\",\n    value: function getStringSchemaDefault(value) {\n      var schema = {\n        type: 'string'\n      };\n\n      if (!this.options.strings.detectFormat) {\n        return schema;\n      }\n\n      var index = filteredFormats.findIndex(function (item) {\n        return helpers.isFormat(value, item);\n      });\n\n      if (index >= 0) {\n        schema.format = filteredFormats[index];\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"getStringSchema\",\n    value: function getStringSchema(value) {\n      if (this.options.strings.preProcessFnc) {\n        return this.options.strings.preProcessFnc(value, this.getStringSchemaDefault);\n      }\n\n      return this.getStringSchemaDefault(value);\n    }\n  }, {\n    key: \"commmonPostProcessDefault\",\n    value: function commmonPostProcessDefault(type, schema, value) {\n      // eslint-disable-line no-unused-vars\n      if (this.options.required) {\n        return merge({}, schema, {\n          required: true\n        });\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"objectPostProcessDefault\",\n    value: function objectPostProcessDefault(schema, obj) {\n      if (this.options.objects.additionalProperties === false && Object.getOwnPropertyNames(obj).length > 0) {\n        return merge({}, schema, {\n          additionalProperties: false\n        });\n      }\n\n      return schema;\n    }\n    /**\n     * Gets JSON schema for provided value\n     * @param value\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getSchema\",\n    value: function getSchema(value) {\n      var type = helpers.getType(value);\n\n      if (!type) {\n        throw new Error(\"Type of value couldn't be determined\");\n      }\n\n      var schema;\n\n      switch (type) {\n        case 'object':\n          schema = this.getObjectSchema(value);\n          break;\n\n        case 'array':\n          schema = this.getArraySchema(value);\n          break;\n\n        case 'string':\n          schema = this.getStringSchema(value);\n          break;\n\n        default:\n          schema = {\n            type: type\n          };\n      }\n\n      if (this.options.postProcessFnc) {\n        schema = this.options.postProcessFnc(type, schema, value, this.commmonPostProcessDefault);\n      } else {\n        schema = this.commmonPostProcessDefault(type, schema, value);\n      }\n\n      if (type === 'object') {\n        if (this.options.objects.postProcessFnc) {\n          schema = this.options.objects.postProcessFnc(schema, value, this.objectPostProcessDefault);\n        } else {\n          schema = this.objectPostProcessDefault(schema, value);\n        }\n      }\n\n      return schema;\n    }\n  }]);\n\n  return ToJsonSchema;\n}();\n\nfunction toJsonSchema(value, options) {\n  var tjs = new ToJsonSchema(options);\n  return tjs.getSchema(value);\n}\n\nmodule.exports = toJsonSchema;"]},"metadata":{},"sourceType":"script"}