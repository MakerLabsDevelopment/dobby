{"ast":null,"code":"var _jsxFileName = \"/Users/nassarhayat/apps/textiletable/js-examples/bucket-photo-gallery/src/App.tsx\";\nimport React from 'react';\nimport Avatar from './Avatar';\nimport Table from './Table';\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Buckets, PrivateKey, Client, ThreadID } from '@textile/hub';\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.keyInfo = {\n      key: 'bgdhubuxfallvfnvzeiaxip4kee'\n    };\n    this.state = {\n      metadata: [],\n      photos: [],\n      isLoading: false,\n      isDragActive: false,\n      index: {\n        author: '',\n        date: 0,\n        paths: []\n      }\n    };\n\n    this.getIdentity = async () => {\n      try {\n        var storedIdent = localStorage.getItem(\"identity\");\n\n        if (storedIdent === null) {\n          throw new Error('No identity');\n        }\n\n        const restored = PrivateKey.fromString(storedIdent);\n        return restored;\n      } catch (e) {\n        /**\n         * If any error, create a new identity.\n         */\n        try {\n          const identity = await PrivateKey.fromRandom();\n          const identityString = identity.toString();\n          localStorage.setItem(\"identity\", identityString);\n          return identity;\n        } catch (err) {\n          return err.message;\n        }\n      }\n    };\n\n    this.getBucketKey = async () => {\n      if (!this.state.identity) {\n        throw new Error('Identity not set');\n      }\n\n      const buckets = await Buckets.withKeyInfo(this.keyInfo); // Authorize the user and your insecure keys with getToken\n\n      await buckets.getToken(this.state.identity); // console.log(buckets, this.state.identity)\n\n      const buck = await buckets.getOrCreate('io.textile.dropzone'); // console.log(buck.root, 'ROOT')\n\n      if (!buck.root) {\n        throw new Error('Failed to open bucket');\n      }\n\n      return {\n        buckets: buckets,\n        bucketKey: buck.root.key\n      };\n    };\n\n    this.getClientInfo = async () => {\n      if (!this.state.identity) {\n        throw new Error('Identity not set');\n      }\n\n      const client = await Client.withKeyInfo(this.keyInfo);\n      await client.getToken(this.state.identity);\n      return client;\n    };\n\n    this.createThread = async () => {\n      const thread = ThreadID.fromRandom();\n      return thread;\n    };\n\n    this.getDatabase = async (client, thread) => {\n      await client.newDB(thread);\n    };\n\n    this.getBucketLinks = async () => {\n      if (!this.state.buckets || !this.state.bucketKey) {\n        console.error('No bucket client or root key');\n        return;\n      }\n\n      const links = await this.state.buckets.links(this.state.bucketKey); // console.log(links, 'LOKN')\n\n      this.setState({ ...links\n      });\n    };\n  }\n\n  async componentDidMount() {\n    // Clear your user during development\n    // await localStorage.clear()\n    const identity = await this.getIdentity(); // you might want to do the I18N setup here\n\n    this.setState({\n      identity: identity\n    }); // get their photo bucket\n\n    const {\n      bucketKey,\n      buckets\n    } = await this.getBucketKey();\n    this.setState({\n      buckets: buckets,\n      bucketKey: bucketKey\n    });\n    await this.getBucketLinks();\n    const client = await this.getClientInfo();\n    const thread = await this.createThread();\n    await this.getDatabase(client, thread);\n    console.log('CLI', client);\n    this.setState({\n      client: client,\n      thread: thread\n    });\n  }\n  /**\n   * getIdentity uses a basic private key identity.\n   * The user's identity will be cached client side. This is long\n   * but ephemeral storage not sufficient for production apps.\n   *\n   * Read more here:\n   * https://docs.textile.io/tutorials/hub/libp2p-identities/\n   */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Segment.Group, {\n      style: {\n        height: \"100%\",\n        border: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      clearing: true,\n      className: \"nav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      className: \"avatar\",\n      as: \"h2\",\n      floated: \"left\",\n      title: this.state.identity ? this.state.identity.toString() : 'identity',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, this.state.identity && /*#__PURE__*/React.createElement(Avatar, {\n      identity: this.state.identity.toString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 39\n      }\n    })), this.state.url && /*#__PURE__*/React.createElement(\"a\", {\n      href: this.state.url,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"link\",\n      floated: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, \"BUCKET\")), this.state.www && /*#__PURE__*/React.createElement(\"a\", {\n      href: this.state.www,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"link\",\n      floated: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, \"WWW\")), this.state.ipns && /*#__PURE__*/React.createElement(\"a\", {\n      href: this.state.ipns,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"link\",\n      floated: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, \"IPNS\"))), /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/js-examples/bucket-photo-gallery/src/App.tsx"],"names":["React","Avatar","Table","Buckets","PrivateKey","Client","ThreadID","Button","Header","Segment","App","Component","keyInfo","key","state","metadata","photos","isLoading","isDragActive","index","author","date","paths","getIdentity","storedIdent","localStorage","getItem","Error","restored","fromString","e","identity","fromRandom","identityString","toString","setItem","err","message","getBucketKey","buckets","withKeyInfo","getToken","buck","getOrCreate","root","bucketKey","getClientInfo","client","createThread","thread","getDatabase","newDB","getBucketLinks","console","error","links","setState","componentDidMount","log","render","height","border","url","www","ipns"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Avatar from './Avatar';\nimport Table from './Table';\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Buckets, KeyInfo, PrivateKey, Client, ThreadID } from '@textile/hub'\nimport { Button, Header, Segment } from \"semantic-ui-react\";\n\nimport { AppState } from './Types'\nimport './App.css';\n\nclass App extends React.Component {\n  keyInfo: KeyInfo = {\n    key: 'bgdhubuxfallvfnvzeiaxip4kee',\n  }\n  state: AppState = {\n    metadata: [],\n    photos: [],\n    isLoading: false,\n    isDragActive: false,\n    index: {\n      author: '',\n      date: 0,\n      paths: []\n    }\n  }\n  async componentDidMount() {\n    // Clear your user during development\n    // await localStorage.clear()\n    const identity = await this.getIdentity()\n    // you might want to do the I18N setup here\n    this.setState({\n      identity: identity\n    })\n\n    // get their photo bucket\n    const {bucketKey, buckets} = await this.getBucketKey()\n    this.setState({\n      buckets: buckets,\n      bucketKey: bucketKey\n    })\n\n    await this.getBucketLinks()\n\n    const client = await this.getClientInfo()\n    const thread = await this.createThread()\n    await this.getDatabase(client, thread)\n    console.log('CLI', client)\n    this.setState({\n      client: client,\n      thread: thread\n    })\n  }\n\n  /**\n   * getIdentity uses a basic private key identity.\n   * The user's identity will be cached client side. This is long\n   * but ephemeral storage not sufficient for production apps.\n   *\n   * Read more here:\n   * https://docs.textile.io/tutorials/hub/libp2p-identities/\n   */\n  getIdentity = async (): Promise<PrivateKey> => {\n    try {\n      var storedIdent = localStorage.getItem(\"identity\")\n      if (storedIdent === null) {\n        throw new Error('No identity')\n      }\n      const restored = PrivateKey.fromString(storedIdent)\n      return restored\n    }\n    catch (e) {\n      /**\n       * If any error, create a new identity.\n       */\n      try {\n        const identity = await PrivateKey.fromRandom()\n        const identityString = identity.toString()\n        localStorage.setItem(\"identity\", identityString)\n        return identity\n      } catch (err) {\n        return err.message\n      }\n    }\n  }\n\n  /**\n   * getBucketKey will create a new Buckets client with the UserAuth\n   * and then open our custom bucket named, 'io.textile.dropzone'\n   */\n  getBucketKey = async () => {\n    if (!this.state.identity) {\n      throw new Error('Identity not set')\n    }\n    const buckets = await Buckets.withKeyInfo(this.keyInfo)\n    // Authorize the user and your insecure keys with getToken\n    await buckets.getToken(this.state.identity)\n    // console.log(buckets, this.state.identity)\n    const buck = await buckets.getOrCreate('io.textile.dropzone')\n    // console.log(buck.root, 'ROOT')\n    if (!buck.root) {\n      throw new Error('Failed to open bucket')\n    }\n    return {buckets: buckets, bucketKey: buck.root.key};\n  }\n\n  getClientInfo = async () => {\n    if (!this.state.identity) {\n      throw new Error('Identity not set')\n    }\n    const client = await Client.withKeyInfo(this.keyInfo)\n    await client.getToken(this.state.identity)\n    return client\n  }\n\n  createThread = async () => {\n    const thread = ThreadID.fromRandom()\n    return thread\n  }\n\n  getDatabase = async (client: Client, thread: ThreadID) => {\n    await client.newDB(thread)\n  }\n\n  /**\n   * getBucketLinks returns all the protocol endpoints for the bucket.\n   * Read more:\n   * https://docs.textile.io/hub/buckets/#bucket-protocols\n   */\n  getBucketLinks = async () => {\n    if (!this.state.buckets || !this.state.bucketKey) {\n      console.error('No bucket client or root key')\n      return\n    }\n    const links = await this.state.buckets.links(this.state.bucketKey)\n    // console.log(links, 'LOKN')\n    this.setState({\n      ...links\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <Segment.Group style={{ height: \"100%\", border: 0 }}>\n          <Segment clearing className=\"nav\">\n            <Header className=\"avatar\" as=\"h2\" floated=\"left\" title={this.state.identity ? this.state.identity.toString() : 'identity'}>\n              {this.state.identity && <Avatar identity={this.state.identity.toString()}/>}\n            </Header>\n            {this.state.url &&\n              <a href={this.state.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Button\n                  className=\"link\"\n                  floated=\"right\"\n                >BUCKET</Button>\n              </a>\n            }\n            {this.state.www &&\n              <a href={this.state.www} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Button\n                  className=\"link\"\n                  floated=\"right\"\n                >WWW</Button>\n              </a>\n            }\n            {this.state.ipns &&\n              <a href={this.state.ipns} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Button\n                  className=\"link\"\n                  floated=\"right\"\n                >IPNS</Button>\n              </a>\n            }\n          </Segment>\n          <Table />\n        </Segment.Group>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}