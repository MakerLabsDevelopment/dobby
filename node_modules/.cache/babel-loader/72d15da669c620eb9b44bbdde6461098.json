{"ast":null,"code":"var _jsxFileName = \"/Users/nassarhayat/apps/textiletable/sushitable/src/components/Home.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'redux-bundler-react';\nimport { ThreadID } from '@textile/hub';\nimport { Button } from 'semantic-ui-react';\nimport BaseScreen from './BaseScreen';\nimport Table from './Table';\nimport 'semantic-ui-css/semantic.min.css';\nimport './Home.css';\n\nconst Home = ({\n  authClient: client,\n  doAuthSignIn\n}) => {\n  const [threadId, setThreadId] = useState();\n  const [name, setName] = useState('');\n  const [collections, setCollections] = useState();\n  useEffect(() => {\n    if (client) {\n      const setup = async () => {\n        console.log('LLL', await client.listThreads());\n        const collections = await client.listCollections(ThreadID.fromString('bafkypcdo2yzg7ydabdfp5op364htx6oratoobmivkkql6z3ii4lqkry'));\n        setCollections(collections);\n        setName(collections[0].name); // const threadId = await client.newDB()\n\n        const threadId = ThreadID.fromString('bafkypcdo2yzg7ydabdfp5op364htx6oratoobmivkkql6z3ii4lqkry');\n        setThreadId(threadId);\n      };\n\n      setup();\n    } else {\n      doAuthSignIn();\n    }\n  }, [client]); // const getIdentity = async (): Promise<PrivateKey> => {\n  //   try {\n  //     var storedIdent = localStorage.getItem('identity')\n  //     if (storedIdent === null) {\n  //       throw new Error('No identity')\n  //     }\n  //     const restored = PrivateKey.fromString(storedIdent)\n  //     return restored\n  //   }\n  //   catch (e) {\n  //     try {\n  //       const identity = PrivateKey.fromRandom()\n  //       const identityString = identity.toString()\n  //       localStorage.setItem('identity', identityString)\n  //       return identity\n  //     } catch (err) {\n  //       return err.message\n  //     }\n  //   }\n  // }\n\n  const selectExisting = name => {\n    setName(name);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BaseScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"optionsRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, collections && collections.map((collection, index) => /*#__PURE__*/React.createElement(Button, {\n    key: index,\n    className: \"tableButton\",\n    onClick: () => selectExisting(collection.name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, collection.name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"nameInput\",\n    placeholder: \"table name\",\n    type: \"text\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"ui primary button\",\n    onClick: () => console.log('a'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, \"Create\"))), threadId && client && /*#__PURE__*/React.createElement(Table, {\n    threadId: threadId,\n    client: client,\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default connect('doAuthSignIn', 'selectAuthClient', Home);","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/sushitable/src/components/Home.tsx"],"names":["React","useState","useEffect","connect","ThreadID","Button","BaseScreen","Table","Home","authClient","client","doAuthSignIn","threadId","setThreadId","name","setName","collections","setCollections","setup","console","log","listThreads","listCollections","fromString","selectExisting","map","collection","index","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { connect } from 'redux-bundler-react'\nimport { Client, ThreadID } from '@textile/hub'\nimport { Button } from 'semantic-ui-react'\nimport BaseScreen from './BaseScreen'\nimport Table from './Table'\nimport 'semantic-ui-css/semantic.min.css'\nimport './Home.css'\n\ninterface IHome {\n  authClient: Client\n  doAuthSignIn: () => any\n}\n\nconst Home = ({ authClient: client, doAuthSignIn }: IHome): React.ReactElement<IHome> => {\n  const [threadId, setThreadId] = useState<ThreadID>()\n  const [name, setName] = useState<string>('')\n  const [collections, setCollections] = useState<Array<any>>()\n\n  useEffect(() => {\n    if (client) {\n      const setup = async () => {\n        console.log('LLL', await client.listThreads())\n        const collections = await client.listCollections(ThreadID.fromString('bafkypcdo2yzg7ydabdfp5op364htx6oratoobmivkkql6z3ii4lqkry'))\n        setCollections(collections)\n        setName(collections[0].name)\n        // const threadId = await client.newDB()\n        const threadId = ThreadID.fromString('bafkypcdo2yzg7ydabdfp5op364htx6oratoobmivkkql6z3ii4lqkry')\n        setThreadId(threadId)\n      }\n      setup()\n    } else {\n      doAuthSignIn()\n    }\n  }, [client])\n\n\n  // const getIdentity = async (): Promise<PrivateKey> => {\n  //   try {\n  //     var storedIdent = localStorage.getItem('identity')\n  //     if (storedIdent === null) {\n  //       throw new Error('No identity')\n  //     }\n  //     const restored = PrivateKey.fromString(storedIdent)\n  //     return restored\n  //   }\n  //   catch (e) {\n  //     try {\n  //       const identity = PrivateKey.fromRandom()\n  //       const identityString = identity.toString()\n  //       localStorage.setItem('identity', identityString)\n  //       return identity\n  //     } catch (err) {\n  //       return err.message\n  //     }\n  //   }\n  // }\n\n  const selectExisting = (name: string) => {\n    setName(name)\n  }\n\n  return (\n    <div className='Home'>\n      <BaseScreen>\n        <div className='optionsRow'>\n          {collections && collections.map((collection, index) => (\n            <Button\n              key={index}\n              className='tableButton'\n              onClick={() => selectExisting(collection.name)}\n            >\n              {collection.name}\n            </Button>\n          ))}\n          <div className=\"inputContainer\">\n            <input className='nameInput' placeholder='table name' type='text' value={name} onChange={e => setName(e.target.value)}/>\n            <Button className='ui primary button' onClick={() => console.log('a')}>Create</Button>\n          </div>\n        </div>\n        {threadId && client && (\n          <Table threadId={threadId} client={client} name={name}/>\n        )}\n      </BaseScreen>\n    </div>\n  )\n}\n\nexport default connect(\n  'doAuthSignIn',\n  'selectAuthClient',\n  Home\n)\n"]},"metadata":{},"sourceType":"module"}