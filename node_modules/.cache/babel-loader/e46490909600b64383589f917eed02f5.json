{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module @textile/threads-client/models\n */\n// import { QueryJSON, SortJSON, CriterionJSON, ComparisonJSON, ValueJSON, Value } from './models'\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Query = exports.Where = exports.Criterion = exports.ComparisonJSON = void 0;\n/**\n * JSONOperation defines the set of possible operations to be used in a Query.\n */\n\nvar ComparisonJSON;\n\n(function (ComparisonJSON) {\n  ComparisonJSON[ComparisonJSON[\"Eq\"] = 0] = \"Eq\";\n  ComparisonJSON[ComparisonJSON[\"Ne\"] = 1] = \"Ne\";\n  ComparisonJSON[ComparisonJSON[\"Gt\"] = 2] = \"Gt\";\n  ComparisonJSON[ComparisonJSON[\"Lt\"] = 3] = \"Lt\";\n  ComparisonJSON[ComparisonJSON[\"Ge\"] = 4] = \"Ge\";\n  ComparisonJSON[ComparisonJSON[\"Le\"] = 5] = \"Le\";\n})(ComparisonJSON = exports.ComparisonJSON || (exports.ComparisonJSON = {}));\n/**\n * @hidden\n */\n\n\nconst valueToJSONValue = value => {\n  switch (typeof value) {\n    case \"string\":\n      return {\n        string: value\n      };\n\n    case \"boolean\":\n      return {\n        bool: value\n      };\n\n    case \"number\":\n      return {\n        float: value\n      };\n\n    default:\n      throw new Error(\"unsupported JSON value type\");\n  }\n};\n/**\n * Criterion is a partial condition that can specify comparison operator for a field.\n */\n\n\nclass Criterion {\n  constructor(fieldPath, operation, value, query) {\n    this.fieldPath = fieldPath;\n    this.operation = operation;\n    this.value = value;\n    this.query = query;\n  }\n  /**\n   * eq is an equality operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n\n\n  eq(value) {\n    return this.create(ComparisonJSON.Eq, value);\n  }\n  /**\n   * ne is a not equal operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n\n\n  ne(value) {\n    return this.create(ComparisonJSON.Ne, value);\n  }\n  /**\n   * gt is a greater operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n\n\n  gt(value) {\n    return this.create(ComparisonJSON.Ne, value);\n  }\n  /** lt is a less operation against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n\n\n  lt(value) {\n    return this.create(ComparisonJSON.Lt, value);\n  }\n  /** ge is a greater or equal operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n\n\n  ge(value) {\n    return this.create(ComparisonJSON.Ge, value);\n  }\n  /** le is a less or equal operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n\n\n  le(value) {\n    return this.create(ComparisonJSON.Le, value);\n  }\n  /**\n   * create updates this Criterion with a new Operation and returns the corresponding query.\n   * @param op\n   * @param value\n   */\n\n\n  create(op, value) {\n    this.operation = op;\n    this.value = valueToJSONValue(value);\n\n    if (this.query === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      this.query = new Query();\n    }\n\n    this.query.ands.push(this);\n    return this.query;\n  }\n  /**\n   * toJSON converts the Criterion to JSONCriterion, dropping circular references to internal Queries.\n   */\n\n\n  toJSON() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = this,\n          {\n      query\n    } = _a,\n          rest = __rest(_a, [\"query\"]);\n\n    return rest;\n  }\n\n}\n\nexports.Criterion = Criterion;\n/**\n * Alias Criterion to Where for a slightly nicer API (see example below)\n */\n\nconst Where = Criterion;\nexports.Where = Where;\n/**\n * Query allows to build queries to be used to fetch data from a model.\n */\n\nclass Query {\n  /**\n   * Query creates a new generic query object.\n   * @param ands An array of top-level Criterions to be included in the query.\n   * @param ors An array of internal queries.\n   * @param sort An object describing how to sort the query.\n   */\n  constructor(ands = [], ors = [], sort) {\n    this.ands = ands;\n    this.ors = ors;\n    this.sort = sort;\n  }\n  /**\n   * where starts to create a query condition for a field\n   * @param fieldPath The field name to query on. Can be a hierarchical path.\n   */\n\n\n  static where(fieldPath) {\n    return new Criterion(fieldPath);\n  }\n  /**\n   * and concatenates a new condition in an existing field.\n   * @param fieldPath The field name to query on. Can be a hierarchical path.\n   */\n\n\n  and(fieldPath) {\n    return new Criterion(fieldPath, undefined, undefined, this);\n  }\n  /**\n   * or concatenates a new condition that is sufficient for an instance to satisfy, independant of the current Query. Has left-associativity as: (a And b) Or c\n   * @param query The 'sub-query' to concat to the existing query.\n   */\n\n\n  or(query) {\n    this.ors.push(query);\n    return this;\n  }\n  /**\n   * orderBy specify ascending order for the query results. On multiple calls, only the last one is considered.\n   * @param fieldPath The field name to query on. Can be a hierarchical path.\n   */\n\n\n  orderBy(fieldPath) {\n    this.sort = {\n      fieldPath,\n      desc: false\n    };\n    return this;\n  }\n  /**\n   * orderByDesc specify descending order for the query results. On multiple calls, only the last one is considered.\n   * @param fieldPath The field name to query on. Can be a hierarchical path.\n   */\n\n\n  orderByDesc(fieldPath) {\n    this.sort = {\n      fieldPath,\n      desc: true\n    };\n    return this;\n  }\n\n}\n\nexports.Query = Query;","map":{"version":3,"sources":["../../src/models/query.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module @textile/threads-client/models\n */\n// import { QueryJSON, SortJSON, CriterionJSON, ComparisonJSON, ValueJSON, Value } from './models'\n\n/**\n * Filter parameters for db subscription\n */\nexport interface Filter {\n  /** The collection name */\n  collectionName?: string\n  /** The instance ID */\n  instanceID?: string\n  /** The action type: ALL (default), CREATE, SAVE, DELETE */\n  actionTypes?: string[]\n}\n\n/**\n * Instance is a singular Model instance.\n */\nexport interface Instance<T> {\n  instance: T | undefined\n}\n\n/**\n * InstanceList is an array of Entities.\n */\nexport interface InstanceList<T> {\n  instancesList: T[]\n}\n\n/**\n * Value represents a valid JSON data type.\n */\nexport type Value = string | boolean | number\n\n/**\n * JSONValue is used by the gRPC server to handle JSON data types.\n */\nexport interface ValueJSON {\n  string?: string\n  bool?: boolean\n  float?: number\n}\n\n/**\n * JSONOperation defines the set of possible operations to be used in a Query.\n */\nexport enum ComparisonJSON {\n  Eq = 0,\n  Ne,\n  Gt,\n  Lt,\n  Ge,\n  Le,\n}\n\n/**\n * CriterionJSON represents a single Query criteria.\n */\nexport interface CriterionJSON {\n  fieldPath?: string\n  operation?: ComparisonJSON\n  value?: ValueJSON\n  query?: QueryJSON\n}\n\n/**\n * SortJSON describes how and what field on which to sort a query.\n */\nexport interface SortJSON {\n  fieldPath: string\n  desc: boolean\n}\n\n/**\n * QueryJSON represents a single store Query.\n */\nexport interface QueryJSON {\n  ands?: CriterionJSON[]\n  ors?: QueryJSON[]\n  sort?: SortJSON\n}\n\n/**\n * @hidden\n */\nconst valueToJSONValue = (value: Value): ValueJSON => {\n  switch (typeof value) {\n    case \"string\":\n      return { string: value }\n    case \"boolean\":\n      return { bool: value }\n    case \"number\":\n      return { float: value }\n    default:\n      throw new Error(\"unsupported JSON value type\")\n  }\n}\n\n/**\n * Criterion is a partial condition that can specify comparison operator for a field.\n */\nexport class Criterion implements CriterionJSON {\n  constructor(\n    public fieldPath: string,\n    public operation?: ComparisonJSON,\n    public value?: ValueJSON,\n    public query?: Query\n  ) {}\n\n  /**\n   * eq is an equality operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n  eq(value: Value): Query {\n    return this.create(ComparisonJSON.Eq, value)\n  }\n\n  /**\n   * ne is a not equal operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n  ne(value: Value): Query {\n    return this.create(ComparisonJSON.Ne, value)\n  }\n\n  /**\n   * gt is a greater operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n  gt(value: Value): Query {\n    return this.create(ComparisonJSON.Ne, value)\n  }\n\n  /** lt is a less operation against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n  lt(value: Value): Query {\n    return this.create(ComparisonJSON.Lt, value)\n  }\n\n  /** ge is a greater or equal operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n  ge(value: Value): Query {\n    return this.create(ComparisonJSON.Ge, value)\n  }\n\n  /** le is a less or equal operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n  le(value: Value): Query {\n    return this.create(ComparisonJSON.Le, value)\n  }\n\n  /**\n   * create updates this Criterion with a new Operation and returns the corresponding query.\n   * @param op\n   * @param value\n   */\n  private create(op: ComparisonJSON, value: Value): Query {\n    this.operation = op\n    this.value = valueToJSONValue(value)\n    if (this.query === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      this.query = new Query()\n    }\n    this.query.ands.push(this)\n    return this.query\n  }\n\n  /**\n   * toJSON converts the Criterion to JSONCriterion, dropping circular references to internal Queries.\n   */\n  toJSON(): CriterionJSON {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { query, ...rest } = this\n    return rest\n  }\n}\n\n/**\n * Alias Criterion to Where for a slightly nicer API (see example below)\n */\nconst Where = Criterion\n\n// Export Where for external callers\nexport { Where }\n\n/**\n * Query allows to build queries to be used to fetch data from a model.\n */\nexport class Query implements QueryJSON {\n  /**\n   * Query creates a new generic query object.\n   * @param ands An array of top-level Criterions to be included in the query.\n   * @param ors An array of internal queries.\n   * @param sort An object describing how to sort the query.\n   */\n  constructor(\n    public ands: CriterionJSON[] = [],\n    public ors: QueryJSON[] = [],\n    public sort?: SortJSON\n  ) {}\n\n  /**\n   * where starts to create a query condition for a field\n   * @param fieldPath The field name to query on. Can be a hierarchical path.\n   */\n  static where(fieldPath: string): Criterion {\n    return new Criterion(fieldPath)\n  }\n\n  /**\n   * and concatenates a new condition in an existing field.\n   * @param fieldPath The field name to query on. Can be a hierarchical path.\n   */\n  and(fieldPath: string): Criterion {\n    return new Criterion(fieldPath, undefined, undefined, this)\n  }\n\n  /**\n   * or concatenates a new condition that is sufficient for an instance to satisfy, independant of the current Query. Has left-associativity as: (a And b) Or c\n   * @param query The 'sub-query' to concat to the existing query.\n   */\n  or(query: Query): Query {\n    this.ors.push(query)\n    return this\n  }\n\n  /**\n   * orderBy specify ascending order for the query results. On multiple calls, only the last one is considered.\n   * @param fieldPath The field name to query on. Can be a hierarchical path.\n   */\n  orderBy(fieldPath: string): Query {\n    this.sort = { fieldPath, desc: false }\n    return this\n  }\n\n  /**\n   * orderByDesc specify descending order for the query results. On multiple calls, only the last one is considered.\n   * @param fieldPath The field name to query on. Can be a hierarchical path.\n   */\n  orderByDesc(fieldPath: string): Query {\n    this.sort = { fieldPath, desc: true }\n    return this\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}