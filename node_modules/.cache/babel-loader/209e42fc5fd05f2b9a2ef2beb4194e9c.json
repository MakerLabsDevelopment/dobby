{"ast":null,"code":"var _jsxFileName = \"/Users/nassarhayat/apps/textiletable/dobby/src/components/ThreadScreen.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'redux-bundler-react';\nimport BaseScreen from './BaseScreen';\nimport { Button } from 'semantic-ui-react';\nimport Table from './table/Table';\nimport './ThreadScreen.css';\n\nconst ThreadScreen = ({\n  threadsActive,\n  doThreadsCreate,\n  doCollectionsCreate,\n  routeParams\n}) => {\n  const [name, setName] = useState('');\n  useEffect(() => {\n    const setup = async () => {\n      console.log(routeParams, 'ss');\n\n      if (threadsActive) {\n        setName(threadsActive[0].name);\n      } else {\n        doThreadsCreate();\n      }\n    };\n\n    setup();\n  }, []);\n\n  const selectExisting = name => {\n    setName(name);\n  };\n\n  return /*#__PURE__*/React.createElement(BaseScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"optionsRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, threadsActive && threadsActive.map((collection, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"tableButton\",\n    onClick: () => selectExisting(collection.name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, collection.name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"nameInput\",\n    placeholder: \"table name\",\n    type: \"text\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"ui primary button\",\n    onClick: () => doCollectionsCreate(name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, \"Create\"))), threadsActive && /*#__PURE__*/React.createElement(Table, {\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default connect('doThreadsCreate', 'doCollectionsCreate', 'selectThreadsActive', 'selectRouteParams', ThreadScreen);","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/dobby/src/components/ThreadScreen.tsx"],"names":["React","useState","useEffect","connect","BaseScreen","Button","Table","ThreadScreen","threadsActive","doThreadsCreate","doCollectionsCreate","routeParams","name","setName","setup","console","log","selectExisting","map","collection","index","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAO,oBAAP;;AAUA,MAAMC,YAAY,GAAG,CAAC;AACpBC,EAAAA,aADoB;AAEpBC,EAAAA,eAFoB;AAGpBC,EAAAA,mBAHoB;AAIpBC,EAAAA;AAJoB,CAAD,KAKC;AACpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAS,EAAT,CAAhC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,KAAK,GAAG,YAAY;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ,EAAyB,IAAzB;;AACA,UAAIH,aAAJ,EAAmB;AACjBK,QAAAA,OAAO,CAACL,aAAa,CAAC,CAAD,CAAb,CAAiBI,IAAlB,CAAP;AACD,OAFD,MAEO;AACLH,QAAAA,eAAe;AAChB;AACF,KAPD;;AAQAK,IAAAA,KAAK;AACN,GAVQ,EAUN,EAVM,CAAT;;AAYA,QAAMG,cAAc,GAAIL,IAAD,IAAkB;AACvCC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACD,GAFD;;AAGA,sBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,aAAa,IAAIA,aAAa,CAACU,GAAd,CAAkB,CAACC,UAAD,EAAkBC,KAAlB,kBAClC;AACE,IAAA,GAAG,EAAEA,KADP;AAEE,IAAA,SAAS,EAAC,aAFZ;AAGE,IAAA,OAAO,EAAE,MAAMH,cAAc,CAACE,UAAU,CAACP,IAAZ,CAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGO,UAAU,CAACP,IALd,CADgB,CADpB,eAUE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,SAAS,EAAC,WAAjB;AAA6B,IAAA,WAAW,EAAC,YAAzC;AAAsD,IAAA,IAAI,EAAC,MAA3D;AAAkE,IAAA,KAAK,EAAEA,IAAzE;AAA+E,IAAA,QAAQ,EAAES,CAAC,IAAIR,OAAO,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,mBAAlB;AAAsC,IAAA,OAAO,EAAE,MAAMb,mBAAmB,CAACE,IAAD,CAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAVF,CADF,EAgBGJ,aAAa,iBACZ,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAEI,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBJ,CADF;AAsBD,CA9CD;;AAgDA,eAAeT,OAAO,CACpB,iBADoB,EAEpB,qBAFoB,EAGpB,qBAHoB,EAIpB,mBAJoB,EAKpBI,YALoB,CAAtB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { connect } from 'redux-bundler-react'\nimport BaseScreen from './BaseScreen'\nimport { Button } from 'semantic-ui-react'\nimport Table from './table/Table'\nimport './ThreadScreen.css'\n\n\ninterface IThreadsScreen {\n  threadsActive: any\n  doThreadsCreate: () => any\n  doCollectionsCreate: (name: string) => any\n  routeParams: any\n}\n\nconst ThreadScreen = ({\n  threadsActive,\n  doThreadsCreate,\n  doCollectionsCreate,\n  routeParams\n}: IThreadsScreen) => {\n  const [name, setName] = useState<string>('')\n\n\n  useEffect(() => {\n    const setup = async () => {\n      console.log(routeParams, 'ss')\n      if (threadsActive) {\n        setName(threadsActive[0].name)\n      } else {\n        doThreadsCreate()\n      }\n    }\n    setup()\n  }, [])\n\n  const selectExisting = (name: string) => {\n    setName(name)\n  }\n  return (\n    <BaseScreen>\n      <div className='optionsRow'>\n        {threadsActive && threadsActive.map((collection: any, index: number) => (\n          <div\n            key={index}\n            className='tableButton'\n            onClick={() => selectExisting(collection.name)}\n          >\n            {collection.name}\n          </div>\n        ))}\n        <div className=\"inputContainer\">\n          <input className='nameInput' placeholder='table name' type='text' value={name} onChange={e => setName(e.target.value)}/>\n          <Button className='ui primary button' onClick={() => doCollectionsCreate(name)}>Create</Button>\n        </div>\n      </div>\n      {threadsActive && (\n        <Table name={name}/>\n      )}\n    </BaseScreen>\n  )\n}\n\nexport default connect(\n  'doThreadsCreate',\n  'doCollectionsCreate',\n  'selectThreadsActive',\n  'selectRouteParams',\n  ThreadScreen\n)\n"]},"metadata":{},"sourceType":"module"}