{"ast":null,"code":"import { set, updateAll } from 'shades';\nimport { createSelector } from 'redux-bundler';\nconst schema = {\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  title: null,\n  type: 'object',\n  properties: {\n    _id: {\n      type: 'string'\n    },\n    name: {\n      type: 'string'\n    },\n    missions: {\n      type: 'number',\n      minimum: 0\n    }\n  }\n};\nexport default {\n  name: 'collections',\n  getReducer: () => {\n    const initialData = {\n      active: null,\n      list: null,\n      loading: false,\n      data: null\n    };\n    return (state = initialData, {\n      type,\n      payload,\n      err\n    }) => {\n      if (type.startsWith('COLLECTIONS') && type.endsWith('_START')) {\n        return set('loading')(true)(state);\n      }\n\n      if (type === 'COLLECTIONS_RESET') {\n        return initialData;\n      }\n\n      if (type === 'COLLECTIONS_FETCH_SUCCESS') {\n        console.log('PPP', payload);\n        return updateAll(set('list')(payload), set('loading')(false))(state);\n      }\n\n      if (type === 'COLLECTIONS_FETCH_FAILED') {\n        console.log('err', err);\n        return updateAll(set('list')(null), set('loading')(false))(state);\n      }\n\n      if (type === 'COLLECTIONS_FETCH_DATA_SUCCESS') {\n        return updateAll(set('data')(payload.instancesList), set('loading')(false))(state);\n      }\n\n      if (type === 'COLLECTIONS_FETCH_DATA_FAILED') {\n        return updateAll(set('data')(null), set('loading')(false))(state);\n      }\n\n      return state;\n    };\n  },\n  doCollectionsFetch: () => {\n    console.log('HHH');\n    return async ({\n      apiGet,\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_FETCH_START'\n      });\n      const {\n        authClient: client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadsActive\n      } = store.select(['selectThreadsActive']);\n      console.log(client, threadsActive, 'III');\n      return await client.listCollections(threadsActive).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsFetchActive: name => {\n    return async ({\n      apiGet,\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_FETCH_ACTIVE_START'\n      });\n      const {\n        authClient: client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadsActive\n      } = store.select(['selectThreadsActive']);\n      return await client.getCollectionInfo(threadsActive, name).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_ACTIVE_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_ACTIVE_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsFetchData: name => {\n    return async ({\n      apiGet,\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_FETCH_DATA_START'\n      });\n      const {\n        authClient: client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadsActive\n      } = store.select(['selectThreadsActive']);\n      return await client.find(threadsActive, name, {}).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_DATA_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_FETCH_DATA_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsCreate: name => {\n    return async ({\n      dispatch,\n      apiPost,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_ADD_START'\n      });\n      const {\n        authClient: client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadsActive\n      } = store.select(['selectThreadsActive']);\n      const namedSchema = schema.title = name;\n      await client.newCollection(threadsActive, name, namedSchema);\n      const data = {\n        _id: Math.random().toString(36),\n        name: \"\",\n        count: 0\n      };\n      return await client.create(threadsActive, name, data).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsUpdate: (name, data) => {\n    return ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_UPDATE_START'\n      });\n      const {\n        client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadsActive\n      } = store.select(['selectThreadsActive']);\n      return client.save(threadsActive, name, data).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_UPDATE_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_UPDATE_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsAddRow: (name, emptyRowObject) => {\n    return ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_ADD_ROW_START'\n      });\n      const {\n        authClient: client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadsActive\n      } = store.select(['selectThreadsActive']);\n      return client.create(threadsActive, name, [emptyRowObject]).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_ROW_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_ROW_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsDeleteRow: (name, instanceId) => {\n    return ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_ADD_ROW_START'\n      });\n      const {\n        authClient: client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadsActive\n      } = store.select(['selectThreadsActive']);\n      return client.delete(threadsActive, name, [instanceId]).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_ROW_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_ROW_FAILED',\n          err\n        });\n      });\n    };\n  },\n  doCollectionsAddColumn: (name, schema) => {\n    return ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'COLLECTIONS_ADD_COLUMN_START'\n      });\n      const {\n        authClient: client\n      } = store.select(['selectAuthClient']);\n      const {\n        threadId\n      } = store.select(['selectThreadsActive']);\n      return client.updateCollection(threadId, name, schema).then(payload => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_COLUMN_SUCCESS',\n          payload\n        });\n      }).catch(err => {\n        return dispatch({\n          type: 'COLLECTIONS_ADD_COLUMN_FAILED',\n          err\n        });\n      });\n    };\n  },\n  reactCollectionsPath: createSelector('selectCollectionsActive', 'selectCollectionsList', 'selectAuthClient', 'selectCollectionsLoading', 'selectRouteParams', (active, list, client, loading, {\n    threadId,\n    collectionName\n  }) => {\n    // console.log(list, collectionName, threadId, 'list2')\n    // if (client && !list && !loading &&\n    //   (!collectionName || collectionName !== active?.name)\n    // ) {\n    //   return { actionCreator: 'doCollectionsFetchActive', args: [collectionName] }\n    // }\n    console.log(client, list, loading, threadId, 'JJJ');\n\n    if (client && !list && !loading && threadId) {\n      // console.log('HHH')\n      return {\n        actionCreator: 'doCollectionsFetch'\n      };\n    }\n  }),\n  selectCollectionsLoading: state => state.collections.loading,\n  selectCollectionsList: state => state.collections.list,\n  selectCollectionsActive: state => state.collections.active,\n  selectCollectionsData: state => state.collections.data\n};","map":{"version":3,"sources":["/Users/nassarhayat/apps/textiletable/dobby/src/bundles/collections.js"],"names":["set","updateAll","createSelector","schema","$schema","title","type","properties","_id","name","missions","minimum","getReducer","initialData","active","list","loading","data","state","payload","err","startsWith","endsWith","console","log","instancesList","doCollectionsFetch","apiGet","dispatch","store","authClient","client","select","threadsActive","listCollections","then","catch","doCollectionsFetchActive","getCollectionInfo","doCollectionsFetchData","find","doCollectionsCreate","apiPost","namedSchema","newCollection","Math","random","toString","count","create","doCollectionsUpdate","save","doCollectionsAddRow","emptyRowObject","doCollectionsDeleteRow","instanceId","delete","doCollectionsAddColumn","threadId","updateCollection","reactCollectionsPath","collectionName","actionCreator","selectCollectionsLoading","collections","selectCollectionsList","selectCollectionsActive","selectCollectionsData"],"mappings":"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","sourcesContent":["import { set, updateAll } from 'shades'\nimport { createSelector } from 'redux-bundler'\n\nconst schema = {\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  title: null,\n  type: 'object',\n  properties: {\n    _id: { type: 'string' },\n    name: { type: 'string' },\n    missions: {\n      type: 'number',\n      minimum: 0,\n    },\n  },\n}\n\nexport default {\n  name: 'collections',\n  getReducer: () => {\n    const initialData = {\n      active: null,\n      list: null,\n      loading: false,\n      data: null\n    }\n    return (state = initialData, { type, payload, err }) => {\n      if (type.startsWith('COLLECTIONS') && type.endsWith('_START')) {\n        return set('loading')(true)(state)\n      }\n\n      if (type === 'COLLECTIONS_RESET') {\n        return initialData\n      }\n\n      if (type === 'COLLECTIONS_FETCH_SUCCESS') {\n        console.log('PPP', payload)\n        return updateAll(\n          set('list')(payload),\n          set('loading')(false)\n        )(state)\n      }\n\n      if (type === 'COLLECTIONS_FETCH_FAILED') {\n        console.log('err', err)\n        return updateAll(\n          set('list')(null),\n          set('loading')(false)\n        )(state)\n      }\n\n      if (type === 'COLLECTIONS_FETCH_DATA_SUCCESS') {\n        return updateAll(\n          set('data')(payload.instancesList),\n          set('loading')(false)\n        )(state)\n      }\n\n      if (type === 'COLLECTIONS_FETCH_DATA_FAILED') {\n        return updateAll(\n          set('data')(null),\n          set('loading')(false)\n        )(state)\n      }\n\n      return state\n    }\n  },\n  doCollectionsFetch: () => {\n    console.log('HHH')\n    return async ({ apiGet, dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_FETCH_START' })\n      const { authClient: client } = store.select(['selectAuthClient'])\n      const { threadsActive } = store.select(['selectThreadsActive'])\n      console.log(client, threadsActive, 'III')\n      return await client.listCollections(threadsActive).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_FAILED', err })\n      })\n    }\n  },\n  doCollectionsFetchActive: (name) => {\n    return async ({ apiGet, dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_START' })\n      const { authClient: client } = store.select(['selectAuthClient'])\n      const { threadsActive } = store.select(['selectThreadsActive'])\n      return await client.getCollectionInfo(threadsActive, name).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_ACTIVE_FAILED', err })\n      })\n    }\n  },\n  doCollectionsFetchData: (name) => {\n    return async ({ apiGet, dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_FETCH_DATA_START' })\n      const { authClient: client } = store.select(['selectAuthClient'])\n      const { threadsActive } = store.select(['selectThreadsActive'])\n      return await client.find(threadsActive, name, {}).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_DATA_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_FETCH_DATA_FAILED', err })\n      })\n    }\n  },\n  doCollectionsCreate: (name) => {\n    return async ({ dispatch, apiPost, store }) => {\n      dispatch({ type: 'COLLECTIONS_ADD_START' })\n      const { authClient: client } = store.select(['selectAuthClient'])\n      const { threadsActive } = store.select(['selectThreadsActive'])\n      const namedSchema = schema.title = name\n      await client.newCollection(threadsActive, name, namedSchema)\n      const data = { _id: Math.random().toString(36), name: \"\", count: 0 }\n      return await client.create(threadsActive, name, data).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_FAILED', err })\n      })\n    }\n  },\n  doCollectionsUpdate: (name, data) => {\n    return ({ dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_UPDATE_START' })\n      const { client } = store.select(['selectAuthClient'])\n      const { threadsActive } = store.select(['selectThreadsActive'])\n      return client.save(threadsActive, name, data).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_UPDATE_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_UPDATE_FAILED', err })\n      })\n    }\n  },\n  doCollectionsAddRow: (name, emptyRowObject) => {\n    return ({ dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_ADD_ROW_START' })\n      const { authClient: client } = store.select(['selectAuthClient'])\n      const { threadsActive } = store.select(['selectThreadsActive'])\n      return client.create(threadsActive, name, [emptyRowObject]).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_ROW_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_ROW_FAILED', err })\n      })\n    }\n  },\n  doCollectionsDeleteRow: (name, instanceId) => {\n    return ({ dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_ADD_ROW_START' })\n      const { authClient: client } = store.select(['selectAuthClient'])\n      const { threadsActive } = store.select(['selectThreadsActive'])\n      return client.delete(threadsActive, name, [instanceId]).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_ROW_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_ROW_FAILED', err })\n      })\n    }\n  },\n  doCollectionsAddColumn: (name, schema) => {\n    return ({ dispatch, store }) => {\n      dispatch({ type: 'COLLECTIONS_ADD_COLUMN_START' })\n      const { authClient: client } = store.select(['selectAuthClient'])\n      const { threadId } = store.select(['selectThreadsActive'])\n      return client.updateCollection(threadId, name, schema).then((payload) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_COLUMN_SUCCESS', payload })\n      }).catch((err) => {\n        return dispatch({ type: 'COLLECTIONS_ADD_COLUMN_FAILED', err })\n      })\n    }\n  },\n  reactCollectionsPath: createSelector(\n    'selectCollectionsActive',\n    'selectCollectionsList',\n    'selectAuthClient',\n    'selectCollectionsLoading',\n    'selectRouteParams',\n    (active, list, client, loading, { threadId, collectionName }) => {\n      // console.log(list, collectionName, threadId, 'list2')\n      // if (client && !list && !loading &&\n      //   (!collectionName || collectionName !== active?.name)\n      // ) {\n      //   return { actionCreator: 'doCollectionsFetchActive', args: [collectionName] }\n      // }\n      console.log(client, list, loading, threadId, 'JJJ')\n      if (client && !list && !loading && threadId) {\n        // console.log('HHH')\n        return { actionCreator: 'doCollectionsFetch' }\n      }\n    },\n  ),\n  selectCollectionsLoading: state => state.collections.loading,\n  selectCollectionsList: state => state.collections.list,\n  selectCollectionsActive: state => state.collections.active,\n  selectCollectionsData: state => state.collections.data,\n}\n"]},"metadata":{},"sourceType":"module"}