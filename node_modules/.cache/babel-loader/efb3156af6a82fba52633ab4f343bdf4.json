{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GrpcConnection = void 0;\n\nconst grpc_web_1 = require(\"@improbable-eng/grpc-web\");\n\nconst context_1 = require(\"@textile/context\");\n\nconst grpc_transport_1 = require(\"@textile/grpc-transport\");\n\nclass GrpcConnection {\n  /**\n   * Creates a new gRPC client instance for accessing the Textile Buckets API.\n   * @param context The context to use for interacting with the APIs. Can be modified later.\n   */\n  constructor(context = new context_1.Context(), debug = false) {\n    this.context = context;\n    this.serviceHost = context.host;\n    this.rpcOptions = {\n      transport: grpc_transport_1.WebsocketTransport(),\n      debug\n    };\n  }\n\n  unary(methodDescriptor, req, ctx) {\n    return new Promise((resolve, reject) => {\n      const metadata = Object.assign(Object.assign({}, this.context.toJSON()), ctx === null || ctx === void 0 ? void 0 : ctx.toJSON());\n      grpc_web_1.grpc.unary(methodDescriptor, {\n        request: req,\n        host: this.serviceHost,\n        transport: this.rpcOptions.transport,\n        debug: this.rpcOptions.debug,\n        metadata,\n        onEnd: res => {\n          const {\n            status,\n            statusMessage,\n            message\n          } = res;\n\n          if (status === grpc_web_1.grpc.Code.OK) {\n            if (message) {\n              resolve(message);\n            } else {\n              resolve();\n            }\n          } else {\n            const err = {\n              message: statusMessage,\n              code: status,\n              metadata\n            };\n            reject(err);\n          }\n        }\n      });\n    });\n  }\n\n}\n\nexports.GrpcConnection = GrpcConnection;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAQA,MAAa,cAAb,CAA2B;AAGzB;;;;AAIA,EAAA,WAAA,CAAmB,OAAA,GAA4B,IAAI,SAAA,CAAA,OAAJ,EAA/C,EAA8D,KAAK,GAAG,KAAtE,EAA2E;AAAxD,SAAA,OAAA,GAAA,OAAA;AACjB,SAAK,WAAL,GAAmB,OAAO,CAAC,IAA3B;AACA,SAAK,UAAL,GAAkB;AAChB,MAAA,SAAS,EAAE,gBAAA,CAAA,kBAAA,EADK;AAEhB,MAAA;AAFgB,KAAlB;AAID;;AAEM,EAAA,KAAK,CAIV,gBAJU,EAIW,GAJX,EAImB,GAJnB,EAIyC;AACnD,WAAO,IAAI,OAAJ,CAAe,CAAC,OAAD,EAAU,MAAV,KAAoB;AACxC,YAAM,QAAQ,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,KAAK,OAAL,CAAa,MAAb,EAAR,CAAA,EAAkC,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,MAAL,EAAlC,CAAd;AACA,MAAA,UAAA,CAAA,IAAA,CAAK,KAAL,CAAW,gBAAX,EAA6B;AAC3B,QAAA,OAAO,EAAE,GADkB;AAE3B,QAAA,IAAI,EAAE,KAAK,WAFgB;AAG3B,QAAA,SAAS,EAAE,KAAK,UAAL,CAAgB,SAHA;AAI3B,QAAA,KAAK,EAAE,KAAK,UAAL,CAAgB,KAJI;AAK3B,QAAA,QAL2B;AAM3B,QAAA,KAAK,EAAG,GAAD,IAA6B;AAClC,gBAAM;AAAE,YAAA,MAAF;AAAU,YAAA,aAAV;AAAyB,YAAA;AAAzB,cAAqC,GAA3C;;AACA,cAAI,MAAM,KAAK,UAAA,CAAA,IAAA,CAAK,IAAL,CAAU,EAAzB,EAA6B;AAC3B,gBAAI,OAAJ,EAAa;AACX,cAAA,OAAO,CAAC,OAAD,CAAP;AACD,aAFD,MAEO;AACL,cAAA,OAAO;AACR;AACF,WAND,MAMO;AACL,kBAAM,GAAG,GAAiB;AACxB,cAAA,OAAO,EAAE,aADe;AAExB,cAAA,IAAI,EAAE,MAFkB;AAGxB,cAAA;AAHwB,aAA1B;AAKA,YAAA,MAAM,CAAC,GAAD,CAAN;AACD;AACF;AAtB0B,OAA7B;AAwBD,KA1BM,CAAP;AA2BD;;AA/CwB;;AAA3B,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GrpcConnection = void 0;\nconst grpc_web_1 = require(\"@improbable-eng/grpc-web\");\nconst context_1 = require(\"@textile/context\");\nconst grpc_transport_1 = require(\"@textile/grpc-transport\");\nclass GrpcConnection {\n    /**\n     * Creates a new gRPC client instance for accessing the Textile Buckets API.\n     * @param context The context to use for interacting with the APIs. Can be modified later.\n     */\n    constructor(context = new context_1.Context(), debug = false) {\n        this.context = context;\n        this.serviceHost = context.host;\n        this.rpcOptions = {\n            transport: grpc_transport_1.WebsocketTransport(),\n            debug,\n        };\n    }\n    unary(methodDescriptor, req, ctx) {\n        return new Promise((resolve, reject) => {\n            const metadata = Object.assign(Object.assign({}, this.context.toJSON()), ctx === null || ctx === void 0 ? void 0 : ctx.toJSON());\n            grpc_web_1.grpc.unary(methodDescriptor, {\n                request: req,\n                host: this.serviceHost,\n                transport: this.rpcOptions.transport,\n                debug: this.rpcOptions.debug,\n                metadata,\n                onEnd: (res) => {\n                    const { status, statusMessage, message } = res;\n                    if (status === grpc_web_1.grpc.Code.OK) {\n                        if (message) {\n                            resolve(message);\n                        }\n                        else {\n                            resolve();\n                        }\n                    }\n                    else {\n                        const err = {\n                            message: statusMessage,\n                            code: status,\n                            metadata,\n                        };\n                        reject(err);\n                    }\n                },\n            });\n        });\n    }\n}\nexports.GrpcConnection = GrpcConnection;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}