import type { Multiaddr } from "@textile/multiaddr";
import { PrivateKey, PublicKey } from "@textile/threads-crypto";
import CID from "cids";
/**
 * LogID represents a simplified PeerID used for tracking thread logs.
 * It is a minimal implementation of PeerID useful mostly for marshaling and unmarshaling.
 */
export declare class LogID {
    readonly id: Uint8Array;
    readonly privKey?: PrivateKey | undefined;
    readonly pubKey: PublicKey | undefined;
    constructor(id: Uint8Array, privKey?: PrivateKey | undefined, pubKey?: PublicKey | undefined);
    static fromRandom(bytesLength?: number): Promise<LogID>;
    static fromBytes(buf: Uint8Array): LogID;
    static fromB58String(str: string): LogID;
    static fromPublicKey(key: PublicKey | Uint8Array): Promise<LogID>;
    static fromPrivateKey(key: PrivateKey | Uint8Array): Promise<LogID>;
    marshalPubKey(): Uint8Array | undefined;
    marshalPrivKey(): Uint8Array | undefined;
    toBytes(): Uint8Array;
    toB58String(): string;
    toString(): string;
    /**
     * Checks the equality of `this` peer against a given LogID.
     */
    equals(id: Uint8Array | LogID): boolean;
    isValid(): boolean;
}
export declare const PeerId: {
    BytesToString: (buf: Uint8Array) => string;
};
/**
 * LogInfo holds known info about a log.
 */
export interface LogInfo {
    /**
     * The logs ID.
     */
    id: LogID;
    /**
     * The logs public key used to check signatures.
     */
    pubKey?: PublicKey;
    /**
     * The logs private key, used to sign content when available.
     */
    privKey?: PrivateKey;
    /**
     * The set of Multiaddrs associated with this log.
     */
    addrs?: Set<Multiaddr>;
    /**
     * The set of heads for this log.
     */
    head?: CID;
}
