{"version":3,"file":"identity.js","sourceRoot":"","sources":["../src/identity.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,4DAAqE;AACrE,0DAAiC;AAEjC,SAAgB,iBAAiB,CAAC,GAAc;IAC9C,OAAO,mBAAS;SACb,MAAM,CAAC,QAAQ,EAAE,qBAAI,CAAC,gBAAgB,CAAC,GAAG,CAAW,CAAC;SACtD,QAAQ,EAAE,CAAA;AACf,CAAC;AAJD,8CAIC;AAED,SAAgB,kBAAkB,CAAC,GAAe;IAChD,OAAO,mBAAS;SACb,MAAM,CAAC,QAAQ,EAAE,qBAAI,CAAC,iBAAiB,CAAC,GAAG,CAAW,CAAC;SACvD,QAAQ,EAAE,CAAA;AACf,CAAC;AAJD,gDAIC;AAED,SAAgB,oBAAoB,CAAC,GAAW;IAC9C,OAAO,qBAAI,CAAC,mBAAmB,CAAC,mBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;AACxD,CAAC;AAFD,oDAEC;AAmBD,MAAa,qBAAqB;IAChC,YAAmB,GAAc;QAAd,QAAG,GAAH,GAAG,CAAW;IAAG,CAAC;IAErC;;;;OAIG;IACH,MAAM,CAAC,IAAgB,EAAE,GAAe;QACtC,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;IACnC,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,OAAO,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACpC,CAAC;IAED;;OAEG;IACH,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAA;IACvB,CAAC;CACF;AAzBD,sDAyBC;AAED,MAAa,oBAAoB;IAC/B,YAAmB,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;IAAG,CAAC;IAEtC;;;OAGG;IACH,IAAI,CAAC,IAAgB;QACnB,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC5B,CAAC;IAED;;OAEG;IACH,IAAI,MAAM;QACR,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IACnD,CAAC;IACD;;OAEG;IACH,MAAM,CAAO,UAAU;;YACrB,OAAO,IAAI,oBAAoB,CAC7B,MAAM,qBAAI,CAAC,aAAa,CAAC,OAAO,CAAC,eAAe,EAAE,CACnD,CAAA;QACH,CAAC;KAAA;IAED;;OAEG;IACH,QAAQ;QACN,OAAO,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACrC,CAAC;IAED;;;OAGG;IACH,MAAM,CAAO,UAAU,CAAC,GAAW;;YACjC,OAAO,IAAI,oBAAoB,CAAC,MAAM,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAA;QAClE,CAAC;KAAA;CACF;AAxCD,oDAwCC","sourcesContent":["import { keys, PrivateKey, PublicKey } from \"@textile/threads-crypto\"\nimport multibase from \"multibase\"\n\nexport function publicKeyToString(key: PublicKey): string {\n  return multibase\n    .encode(\"base32\", keys.marshalPublicKey(key) as Buffer)\n    .toString()\n}\n\nexport function privateKeyToString(key: PrivateKey): string {\n  return multibase\n    .encode(\"base32\", keys.marshalPrivateKey(key) as Buffer)\n    .toString()\n}\n\nexport function privateKeyFromString(str: string): Promise<PrivateKey> {\n  return keys.unmarshalPrivateKey(multibase.decode(str))\n}\n\nexport interface Public {\n  verify(data: Uint8Array, sig: Uint8Array): Promise<boolean>\n  toString(): string\n  bytes: Uint8Array\n}\n\n/**\n * Identity represents an entity capable of signing a message.\n * This is a simple 'private key' interface that must be capable of returning the associated public key for\n * verification. In many cases, this will just be a private key, but callers can use any setup that suits their needs.\n * The interface is currently modeled after @textile/threads-crypto PrivateKeys.\n */\nexport interface Identity {\n  sign(data: Uint8Array): Promise<Uint8Array>\n  public: Public\n}\n\nexport class Libp2pCryptoPublicKey implements Public {\n  constructor(public key: PublicKey) {}\n\n  /**\n   * Verify the given signed data.\n   * @param data The data to verify.\n   * @param sig The signature to verify.\n   */\n  verify(data: Uint8Array, sig: Uint8Array): Promise<boolean> {\n    return this.key.verify(data, sig)\n  }\n\n  /**\n   * Returns base32 encoded Public key representation.\n   */\n  toString(): string {\n    return publicKeyToString(this.key)\n  }\n\n  /**\n   * The raw bytes of the Public key.\n   */\n  get bytes(): Uint8Array {\n    return this.key.bytes\n  }\n}\n\nexport class Libp2pCryptoIdentity implements Identity {\n  constructor(public key: PrivateKey) {}\n\n  /**\n   * Signs the given data with the Private key,\n   * @param data Data to be signed.\n   */\n  sign(data: Uint8Array): Promise<Uint8Array> {\n    return this.key.sign(data)\n  }\n\n  /**\n   * Returns the Public key.\n   */\n  get public(): Libp2pCryptoPublicKey {\n    return new Libp2pCryptoPublicKey(this.key.public)\n  }\n  /**\n   * Create a random Ed25519 Identity.\n   */\n  static async fromRandom(): Promise<Libp2pCryptoIdentity> {\n    return new Libp2pCryptoIdentity(\n      await keys.supportedKeys.ed25519.generateKeyPair()\n    )\n  }\n\n  /**\n   * Returns base32 encoded private key representation.\n   */\n  toString(): string {\n    return privateKeyToString(this.key)\n  }\n\n  /**\n   * Creates key key from base32 encoded string representation\n   * @param str\n   */\n  static async fromString(str: string): Promise<Libp2pCryptoIdentity> {\n    return new Libp2pCryptoIdentity(await privateKeyFromString(str))\n  }\n}\n"]}