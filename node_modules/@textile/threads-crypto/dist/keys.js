"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.marshalPrivateKey = exports.unmarshalPrivateKey = exports.marshalPublicKey = exports.unmarshalPublicKey = exports.generateKeyPair = exports.supportedKeys = exports.keyTypeError = void 0;
const ed25519 = __importStar(require("./ed25519"));
const proto_keys_1 = require("./proto.keys");
/**
 * Exposes an interface to various cryptographic key generation routines.
 * Currently the 'ed25519' types are supported, although ed25519 keys
 * support only signing and verification of messages.
 */
exports.keyTypeError = new Error("Unsupported key type.");
exports.supportedKeys = {
    ed25519,
};
// Generates a keypair of the given type and bitsize
exports.generateKeyPair = (type, bytesLength) => __awaiter(void 0, void 0, void 0, function* () {
    if (type !== "Ed25519")
        throw exports.keyTypeError;
    return ed25519.generateKeyPair(bytesLength);
});
/**
 * Converts a protobuf serialized public key into its representative object
 * @param buf The input key bytes.
 */
exports.unmarshalPublicKey = (buf) => {
    const decoded = proto_keys_1.decodePublicKey(buf);
    const data = decoded.Data;
    switch (decoded.Type) {
        case "Ed25519" /* Ed25519 */:
            return exports.supportedKeys.ed25519.unmarshalEd25519PublicKey(data);
        case "RSA" /* RSA */:
        case "Secp256k1" /* Secp256k1 */:
        default:
            throw exports.keyTypeError;
    }
};
/**
 * Converts a public key object into a protobuf serialized public key
 * @param key public key.
 * @param type key type. Currently only ED25519 is supported.
 */
exports.marshalPublicKey = (key, type = "ED25519") => {
    if (type !== "ED25519")
        throw exports.keyTypeError;
    return key.bytes;
};
/**
 * Converts a protobuf serialized private key into its representative object
 * @param buf The input key bytes.
 */
exports.unmarshalPrivateKey = (buf) => {
    const decoded = proto_keys_1.decodePrivateKey(buf);
    const data = decoded.Data;
    switch (decoded.Type) {
        case "Ed25519" /* Ed25519 */:
            return exports.supportedKeys.ed25519.unmarshalEd25519PrivateKey(data);
        case "RSA" /* RSA */:
        case "Secp256k1" /* Secp256k1 */:
        default:
            throw exports.keyTypeError;
    }
};
// Converts a private key object into a protobuf serialized private key
exports.marshalPrivateKey = (key, type = "ED25519") => {
    if (type !== "ED25519")
        throw exports.keyTypeError;
    return key.bytes;
};
//# sourceMappingURL=keys.js.map