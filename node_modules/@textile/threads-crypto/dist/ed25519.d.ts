/// <reference types="node" />
import { PrivateKey, PublicKey } from "./interfaces";
export declare const constants: {
    PUBLIC_KEY_BYTE_LENGTH: number;
    PRIVATE_KEY_BYTE_LENGTH: number;
    SEED_BYTE_LENGTH: number;
    SIGN_BYTE_LENGTH: number;
    HASH_BYTE_LENGTH: number;
};
export declare class Ed25519PublicKey implements PublicKey {
    private publicKey;
    constructor(publicKey: Uint8Array);
    verify(data: Uint8Array, sig: Uint8Array): Promise<boolean>;
    marshal(): Uint8Array;
    get buffer(): Buffer;
    get bytes(): Uint8Array;
    equals(key: PublicKey): boolean;
    hash(): Promise<Uint8Array>;
}
export declare class Ed25519PrivateKey implements PrivateKey {
    private privateKey;
    private publicKey;
    /**
     * Construct a Ed25519 private key.
     * @param key 64 byte Uint8Array or Buffer containing private key
     * @param publicKey 32 byte Uint8Array or Buffer containing public key
     */
    constructor(privateKey: Uint8Array, publicKey: Uint8Array);
    sign(message: Uint8Array): Promise<Buffer>;
    get public(): Ed25519PublicKey;
    marshal(): Uint8Array;
    get publicKeyBuffer(): Buffer;
    get privateKeyBuffer(): Buffer;
    get bytes(): Uint8Array;
    equals(key: PrivateKey): boolean;
    hash(): Promise<Uint8Array>;
    /**
     * Gets the ID of the key.
     *
     * The key id is the base58 encoding of the SHA-256 multihash of its public key.
     * The public key is a protobuf encoding containing a type and the DER encoding
     * of the PKCS SubjectPublicKeyInfo.
     */
    id(): Promise<string>;
}
export declare function unmarshalEd25519PrivateKey(bytes: Uint8Array): Promise<Ed25519PrivateKey>;
export declare function unmarshalEd25519PublicKey(bytes: Uint8Array): Ed25519PublicKey;
export declare function generateKeyPair(bytesLength?: number): Promise<Ed25519PrivateKey>;
