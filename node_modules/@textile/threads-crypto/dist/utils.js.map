{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";;;;;;AAAA,8DAAgC;AAChC,mCAA+B;AAE/B,SAAgB,SAAS,CACvB,MAAkB,EAClB,IAAY,EACZ,MAAe;IAEf,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,eAAM,CAAC,IAAI,CAAC,CAAC,CAAA;IACtC,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,eAAM,CAAC,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAA;IACzD,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA;IAChE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;IACX,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAA;IACrB,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,CAAA;IACrC,OAAO,IAAI,CAAA;AACb,CAAC;AAZD,8BAYC;AAED;;;GAGG;AACH,SAAgB,eAAe,CAAC,KAAiB;IAC/C,MAAM,MAAM,GAAG,qBAAM,CAAC,KAAK,CAAC,CAAA;IAC5B,MAAM,IAAI,GAAG,IAAI,CAAA,CAAC,WAAW;IAC7B,OAAO,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;AAChC,CAAC;AAJD,0CAIC;AAED,SAAgB,SAAS,CAAC,GAAe,EAAE,MAAc;IACvD,IAAI,CAAC,CAAC,GAAG,YAAY,UAAU,CAAC,IAAI,GAAG,CAAC,MAAM,GAAG,MAAM;QACrD,MAAM,IAAI,KAAK,CACb,qDAAqD,MAAM,EAAE,CAC9D,CAAA;IACH,OAAO,GAAG,CAAA;AACZ,CAAC;AAND,8BAMC","sourcesContent":["import sha256 from \"fast-sha256\"\nimport { encode } from \"varint\"\n\nexport function multihash(\n  digest: Uint8Array,\n  code: number,\n  length?: number\n): Uint8Array {\n  const a = new Uint8Array(encode(code))\n  const b = new Uint8Array(encode(length ?? digest.length))\n  const full = new Uint8Array(a.length + b.length + digest.length)\n  full.set(a)\n  full.set(b, a.length)\n  full.set(digest, a.length + b.length)\n  return full\n}\n\n/**\n * Basic multihash implementation that only supports sha256.\n * @param bytes The bytes to wrap with multihash.\n */\nexport function sha256Multihash(bytes: Uint8Array): Uint8Array {\n  const digest = sha256(bytes)\n  const code = 0x12 // sha2-256\n  return multihash(digest, code)\n}\n\nexport function ensureKey(key: Uint8Array, length: number): Uint8Array {\n  if (!(key instanceof Uint8Array) || key.length < length)\n    throw new Error(\n      `Key must be a Uint8Array (or Buffer) of length >= ${length}`\n    )\n  return key\n}\n"]}