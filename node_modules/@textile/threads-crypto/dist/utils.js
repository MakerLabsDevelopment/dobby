"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureKey = exports.sha256Multihash = exports.multihash = void 0;
const fast_sha256_1 = __importDefault(require("fast-sha256"));
const varint_1 = require("varint");
function multihash(digest, code, length) {
    const a = new Uint8Array(varint_1.encode(code));
    const b = new Uint8Array(varint_1.encode(length !== null && length !== void 0 ? length : digest.length));
    const full = new Uint8Array(a.length + b.length + digest.length);
    full.set(a);
    full.set(b, a.length);
    full.set(digest, a.length + b.length);
    return full;
}
exports.multihash = multihash;
/**
 * Basic multihash implementation that only supports sha256.
 * @param bytes The bytes to wrap with multihash.
 */
function sha256Multihash(bytes) {
    const digest = fast_sha256_1.default(bytes);
    const code = 0x12; // sha2-256
    return multihash(digest, code);
}
exports.sha256Multihash = sha256Multihash;
function ensureKey(key, length) {
    if (!(key instanceof Uint8Array) || key.length < length)
        throw new Error(`Key must be a Uint8Array (or Buffer) of length >= ${length}`);
    return key;
}
exports.ensureKey = ensureKey;
//# sourceMappingURL=utils.js.map