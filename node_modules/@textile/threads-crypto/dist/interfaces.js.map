{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Maps an IPFS hash name to its node-forge equivalent.\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n */\nexport type HashType = \"SHA1\" | \"SHA256\" | \"SHA512\"\n\n/**\n * Supported curve types.\n */\nexport type CurveType = \"P-256\" | \"P-384\" | \"P-521\"\n\n/**\n * Supported cipher types.\n */\nexport type CipherType = \"AES-128\" | \"AES-256\" | \"Blowfish\"\n\n/**\n * Generic public key interface.\n */\nexport interface PublicKey {\n  /**\n   * A protobuf serialized representation of this key.\n   */\n  readonly bytes: Uint8Array\n  /**\n   * Verify the signature of the given message data.\n   * @param data The data whose signature is to be verified.\n   * @param sig The signature to verify.\n   */\n  verify(data: Uint8Array, sig: Uint8Array): Promise<boolean>\n  /**\n   * Return the raw bytes of this key. Not to be conused with `bytes`.\n   */\n  marshal(): Uint8Array\n  /**\n   * Test for equality with another key.\n   * @param key Other key.\n   */\n  equals(key: PublicKey): boolean\n  /**\n   * Compute the sha256 hash of the key's `bytes`.\n   */\n  hash(): Promise<Uint8Array>\n}\n\n/**\n * Generic private key interface.\n */\nexport interface PrivateKey {\n  /**\n   * The public key associated with this private key.\n   */\n  readonly public: PublicKey\n  /**\n   * A protobuf serialized representation of this key.\n   */\n  readonly bytes: Uint8Array\n  /**\n   * Generates a digital signature on the given data.\n   * @param data The data to sign.\n   */\n  sign(data: Uint8Array): Promise<Uint8Array>\n  /**\n   * Return the raw bytes of this key. Not to be conused with `bytes`.\n   */\n  marshal(): Uint8Array\n  /**\n   * Test for equality with another key.\n   * @param key Other key.\n   */\n  equals(key: PrivateKey): boolean\n  /**\n   * Compute the sha256 hash of the key's `bytes`.\n   */\n  hash(): Promise<Uint8Array>\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   */\n  id(): Promise<string>\n}\n"]}