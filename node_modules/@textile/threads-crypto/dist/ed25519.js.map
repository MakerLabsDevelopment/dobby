{"version":3,"file":"ed25519.js","sourceRoot":"","sources":["../src/ed25519.ts"],"names":[],"mappings":"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","sourcesContent":["import { keys } from \"libp2p-crypto\"\nimport multibase from \"multibase\"\nimport { PrivateKey, PublicKey } from \"./interfaces\"\nimport { encodePrivateKey, encodePublicKey, KeyType } from \"./proto.keys\"\nimport { ensureKey, sha256Multihash } from \"./utils\"\n\n// import * as ed from 'noble-ed25519'\nconst ed = keys.supportedKeys.ed25519\n\nexport const constants = {\n  PUBLIC_KEY_BYTE_LENGTH: 32,\n  PRIVATE_KEY_BYTE_LENGTH: 32,\n  SEED_BYTE_LENGTH: 32,\n  SIGN_BYTE_LENGTH: 64,\n  HASH_BYTE_LENGTH: 64,\n}\n\nexport class Ed25519PublicKey implements PublicKey {\n  constructor(private publicKey: Uint8Array) {\n    this.publicKey = ensureKey(publicKey, constants.PUBLIC_KEY_BYTE_LENGTH)\n  }\n\n  async verify(data: Uint8Array, sig: Uint8Array): Promise<boolean> {\n    // return ed.verify(sig, data, this.publicKey)\n    const key = new ed.Ed25519PublicKey(this.buffer)\n    return key.verify(Buffer.from(data), Buffer.from(sig))\n  }\n\n  marshal(): Uint8Array {\n    return new Uint8Array(this.publicKey)\n  }\n\n  get buffer(): Buffer {\n    return Buffer.from(this.publicKey)\n  }\n\n  get bytes(): Uint8Array {\n    return encodePublicKey({\n      Type: KeyType.Ed25519,\n      Data: this.marshal(),\n    })\n  }\n\n  equals(key: PublicKey): boolean {\n    const bytes = key.bytes\n    return this.bytes.every((value, index) => value === bytes[index])\n  }\n\n  async hash(): Promise<Uint8Array> {\n    return sha256Multihash(this.bytes)\n  }\n}\n\nexport class Ed25519PrivateKey implements PrivateKey {\n  /**\n   * Construct a Ed25519 private key.\n   * @param key 64 byte Uint8Array or Buffer containing private key\n   * @param publicKey 32 byte Uint8Array or Buffer containing public key\n   */\n  constructor(private privateKey: Uint8Array, private publicKey: Uint8Array) {\n    this.privateKey = ensureKey(privateKey, constants.PRIVATE_KEY_BYTE_LENGTH)\n    this.publicKey = ensureKey(publicKey, constants.PUBLIC_KEY_BYTE_LENGTH)\n  }\n\n  async sign(message: Uint8Array): Promise<Buffer> {\n    // return ed.sign(message, this.privateKey)\n    const privateKey = Buffer.concat([\n      this.privateKeyBuffer,\n      this.publicKeyBuffer,\n    ])\n    const key = new ed.Ed25519PrivateKey(privateKey, this.publicKeyBuffer)\n    return key.sign(Buffer.from(message))\n  }\n\n  get public(): Ed25519PublicKey {\n    return new Ed25519PublicKey(this.publicKey)\n  }\n\n  marshal(): Uint8Array {\n    // ED25519 private keys are represented by two 32-bytes curve points (private and public\n    // components)\n    const full = new Uint8Array(\n      this.privateKey.byteLength + this.publicKey.byteLength * 2\n    )\n    full.set(this.privateKey)\n    full.set(this.publicKey, this.privateKey.byteLength)\n    // @note To match the output of libp2p-crypto, we also append redundant public key bytes\n    full.set(\n      this.publicKey,\n      this.privateKey.byteLength + this.publicKey.byteLength\n    )\n    return full\n  }\n\n  get publicKeyBuffer(): Buffer {\n    return Buffer.from(this.publicKey)\n  }\n\n  get privateKeyBuffer(): Buffer {\n    return Buffer.from(this.privateKey)\n  }\n\n  get bytes(): Uint8Array {\n    return encodePrivateKey({\n      Type: KeyType.Ed25519,\n      Data: this.marshal(),\n    })\n  }\n\n  equals(key: PrivateKey): boolean {\n    const bytes = key.bytes\n    return this.bytes.every((value, index) => value === bytes[index])\n  }\n\n  async hash(): Promise<Uint8Array> {\n    return sha256Multihash(this.bytes)\n  }\n\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   */\n  async id(): Promise<string> {\n    const hash = await this.public.hash()\n    return multibase\n      .encode(\"base58btc\", hash as Buffer)\n      .toString()\n      .slice(1)\n  }\n}\n\nexport async function unmarshalEd25519PrivateKey(\n  bytes: Uint8Array\n): Promise<Ed25519PrivateKey> {\n  // We might have the public key bytes appended twice, but we can ignore the extra public\n  // bytes on the end (no need to check it either)\n  const privateKeyBytes = bytes.slice(0, constants.PRIVATE_KEY_BYTE_LENGTH)\n  const publicKeyBytes = bytes.slice(\n    constants.PRIVATE_KEY_BYTE_LENGTH,\n    constants.PRIVATE_KEY_BYTE_LENGTH + constants.PUBLIC_KEY_BYTE_LENGTH\n  )\n  return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes)\n}\n\nexport function unmarshalEd25519PublicKey(bytes: Uint8Array): Ed25519PublicKey {\n  return new Ed25519PublicKey(bytes)\n}\n\nexport async function generateKeyPair(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  bytesLength = constants.PRIVATE_KEY_BYTE_LENGTH\n): Promise<Ed25519PrivateKey> {\n  // const privateKey = ed.utils.randomPrivateKey(bytesLength)\n  // const publicKey = await ed.getPublicKey(privateKey)\n  const key = await ed.generateKeyPair()\n  const bytes = key.marshal()\n  const privateKey = bytes.slice(0, constants.PRIVATE_KEY_BYTE_LENGTH)\n  const publicKey = bytes.slice(\n    constants.PRIVATE_KEY_BYTE_LENGTH,\n    constants.PRIVATE_KEY_BYTE_LENGTH + constants.PUBLIC_KEY_BYTE_LENGTH\n  )\n  return new Ed25519PrivateKey(privateKey, publicKey)\n}\n"]}