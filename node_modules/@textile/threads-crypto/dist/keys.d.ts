import * as ed25519 from "./ed25519";
import { PrivateKey, PublicKey } from "./interfaces";
/**
 * Exposes an interface to various cryptographic key generation routines.
 * Currently the 'ed25519' types are supported, although ed25519 keys
 * support only signing and verification of messages.
 */
export declare const keyTypeError: Error;
export declare const supportedKeys: {
    ed25519: typeof ed25519;
};
export declare const generateKeyPair: (type: "Ed25519", bytesLength?: number | undefined) => Promise<PrivateKey>;
/**
 * Converts a protobuf serialized public key into its representative object
 * @param buf The input key bytes.
 */
export declare const unmarshalPublicKey: (buf: Uint8Array) => PublicKey;
/**
 * Converts a public key object into a protobuf serialized public key
 * @param key public key.
 * @param type key type. Currently only ED25519 is supported.
 */
export declare const marshalPublicKey: (key: PublicKey, type?: string) => Uint8Array;
/**
 * Converts a protobuf serialized private key into its representative object
 * @param buf The input key bytes.
 */
export declare const unmarshalPrivateKey: (buf: Uint8Array) => Promise<PrivateKey>;
export declare const marshalPrivateKey: (key: PrivateKey, type?: string) => Uint8Array;
